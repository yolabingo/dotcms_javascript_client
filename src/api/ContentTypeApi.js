/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContentTypeForm from '../model/ContentTypeForm';
import CopyContentTypeForm from '../model/CopyContentTypeForm';
import FilteredContentTypesForm from '../model/FilteredContentTypesForm';

/**
* ContentType service.
* @module api/ContentTypeApi
* @version 3
*/
export default class ContentTypeApi {

    /**
    * Constructs a new ContentTypeApi. 
    * @alias module:api/ContentTypeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the copyType operation.
     * @callback module:api/ContentTypeApi~copyTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} baseVariableName 
     * @param {Object} opts Optional parameters
     * @param {module:model/CopyContentTypeForm} opts.copyContentTypeForm 
     * @param {module:api/ContentTypeApi~copyTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    copyType(baseVariableName, opts, callback) {
      opts = opts || {};
      let postBody = opts['copyContentTypeForm'];
      // verify the required parameter 'baseVariableName' is set
      if (baseVariableName === undefined || baseVariableName === null) {
        throw new Error("Missing the required parameter 'baseVariableName' when calling copyType");
      }

      let pathParams = {
        'baseVariableName': baseVariableName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{baseVariableName}/_copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createType operation.
     * @callback module:api/ContentTypeApi~createTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentTypeForm} opts.contentTypeForm 
     * @param {module:api/ContentTypeApi~createTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createType(opts, callback) {
      opts = opts || {};
      let postBody = opts['contentTypeForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteType operation.
     * @callback module:api/ContentTypeApi~deleteTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idOrVar 
     * @param {module:api/ContentTypeApi~deleteTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteType(idOrVar, callback) {
      let postBody = null;
      // verify the required parameter 'idOrVar' is set
      if (idOrVar === undefined || idOrVar === null) {
        throw new Error("Missing the required parameter 'idOrVar' when calling deleteType");
      }

      let pathParams = {
        'idOrVar': idOrVar
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/id/{idOrVar}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filteredContentTypes operation.
     * @callback module:api/ContentTypeApi~filteredContentTypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/FilteredContentTypesForm} opts.filteredContentTypesForm 
     * @param {module:api/ContentTypeApi~filteredContentTypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filteredContentTypes(opts, callback) {
      opts = opts || {};
      let postBody = opts['filteredContentTypesForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/_filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentTypes operation.
     * @callback module:api/ContentTypeApi~getContentTypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {String} opts.orderby  (default to 'upper(name)')
     * @param {String} opts.direction  (default to 'ASC')
     * @param {String} opts.type 
     * @param {String} opts.host 
     * @param {module:api/ContentTypeApi~getContentTypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getContentTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'orderby': opts['orderby'],
        'direction': opts['direction'],
        'type': opts['type'],
        'host': opts['host']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentBaseTypes operation.
     * @callback module:api/ContentTypeApi~getRecentBaseTypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ContentTypeApi~getRecentBaseTypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentBaseTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/basetypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getType operation.
     * @callback module:api/ContentTypeApi~getTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idOrVar 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.languageId 
     * @param {Boolean} opts.live 
     * @param {module:api/ContentTypeApi~getTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getType(idOrVar, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idOrVar' is set
      if (idOrVar === undefined || idOrVar === null) {
        throw new Error("Missing the required parameter 'idOrVar' when calling getType");
      }

      let pathParams = {
        'idOrVar': idOrVar
      };
      let queryParams = {
        'languageId': opts['languageId'],
        'live': opts['live']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/id/{idOrVar}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateType operation.
     * @callback module:api/ContentTypeApi~updateTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idOrVar 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentTypeForm} opts.contentTypeForm 
     * @param {module:api/ContentTypeApi~updateTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateType(idOrVar, opts, callback) {
      opts = opts || {};
      let postBody = opts['contentTypeForm'];
      // verify the required parameter 'idOrVar' is set
      if (idOrVar === undefined || idOrVar === null) {
        throw new Error("Missing the required parameter 'idOrVar' when calling updateType");
      }

      let pathParams = {
        'idOrVar': idOrVar
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/id/{idOrVar}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
