/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTokenForm from '../model/ApiTokenForm';
import AuthenticationForm from '../model/AuthenticationForm';
import BodyPart from '../model/BodyPart';
import BodyPartMediaType from '../model/BodyPartMediaType';
import BrowserQueryForm from '../model/BrowserQueryForm';
import CategoryEditForm from '../model/CategoryEditForm';
import CategoryForm from '../model/CategoryForm';
import CategoryView from '../model/CategoryView';
import ChangeLoggerForm from '../model/ChangeLoggerForm';
import CompanyEmailForm from '../model/CompanyEmailForm';
import ContainerForm from '../model/ContainerForm';
import ContentDisposition from '../model/ContentDisposition';
import CopySiteForm from '../model/CopySiteForm';
import CreateTokenForm from '../model/CreateTokenForm';
import CustomPortletForm from '../model/CustomPortletForm';
import DeleteFieldsForm from '../model/DeleteFieldsForm';
import DeleteForm from '../model/DeleteForm';
import DeletePPQueueElementsByIdentifierForm from '../model/DeletePPQueueElementsByIdentifierForm';
import DeleteSecretForm from '../model/DeleteSecretForm';
import ExportSecretForm from '../model/ExportSecretForm';
import FilterDescriptorForm from '../model/FilterDescriptorForm';
import ForgotPasswordForm from '../model/ForgotPasswordForm';
import FormDataContentDisposition from '../model/FormDataContentDisposition';
import I18NForm from '../model/I18NForm';
import LanguageForm from '../model/LanguageForm';
import LoginAsForm from '../model/LoginAsForm';
import MakeDefaultLangForm from '../model/MakeDefaultLangForm';
import MultiPart from '../model/MultiPart';
import OpenFolderForm from '../model/OpenFolderForm';
import Persona from '../model/Persona';
import PersonalizationPersonaPageForm from '../model/PersonalizationPersonaPageForm';
import PullRelatedForm from '../model/PullRelatedForm';
import RemoteAPITokenForm from '../model/RemoteAPITokenForm';
import RemoteUrlForm from '../model/RemoteUrlForm';
import ResetPasswordForm from '../model/ResetPasswordForm';
import ResponseEntityContainerView from '../model/ResponseEntityContainerView';
import ResponseEntityPermissionView from '../model/ResponseEntityPermissionView';
import ResponseEntitySmallRoleView from '../model/ResponseEntitySmallRoleView';
import ResponseEntityView from '../model/ResponseEntityView';
import ResponseHostVariableEntityView from '../model/ResponseHostVariableEntityView';
import ResponseSiteVariablesEntityView from '../model/ResponseSiteVariablesEntityView';
import RestCondition from '../model/RestCondition';
import RestConditionGroup from '../model/RestConditionGroup';
import RestConditionValue from '../model/RestConditionValue';
import RestLanguage from '../model/RestLanguage';
import RestPersona from '../model/RestPersona';
import RestRule from '../model/RestRule';
import RestRuleAction from '../model/RestRuleAction';
import RestTag from '../model/RestTag';
import RestUser from '../model/RestUser';
import RoleLayoutForm from '../model/RoleLayoutForm';
import SearchByPathForm from '../model/SearchByPathForm';
import SearchSiteByNameForm from '../model/SearchSiteByNameForm';
import SetForm from '../model/SetForm';
import SetHashForm from '../model/SetHashForm';
import SiteForm from '../model/SiteForm';
import SiteVariableForm from '../model/SiteVariableForm';
import TagForm from '../model/TagForm';
import TemplateForm from '../model/TemplateForm';
import UpdateFieldForm from '../model/UpdateFieldForm';
import UpdateTagForm from '../model/UpdateTagForm';
import UpdateUserForm from '../model/UpdateUserForm';
import UpgradeTaskForm from '../model/UpgradeTaskForm';

/**
* Default service.
* @module api/DefaultApi
* @version 3
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateIndex operation.
     * @callback module:api/DefaultApi~activateIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~activateIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activateIndex(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling activateIndex");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/activate/{params}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the add operation.
     * @callback module:api/DefaultApi~addCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestRule} opts.restRule 
     * @param {module:api/DefaultApi~addCallback} callback The callback function, accepting three arguments: error, data, response
     */
    add(siteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['restRule'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling add");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the add1 operation.
     * @callback module:api/DefaultApi~add1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestRuleAction} opts.restRuleAction 
     * @param {module:api/DefaultApi~add1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    add1(siteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['restRuleAction'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling add1");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the add2 operation.
     * @callback module:api/DefaultApi~add2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} ruleId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestConditionGroup} opts.restConditionGroup 
     * @param {module:api/DefaultApi~add2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    add2(siteId, ruleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['restConditionGroup'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling add2");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling add2");
      }

      let pathParams = {
        'siteId': siteId,
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/rules/{ruleId}/conditionGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the add3 operation.
     * @callback module:api/DefaultApi~add3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestCondition} opts.restCondition 
     * @param {module:api/DefaultApi~add3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    add3(siteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['restCondition'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling add3");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/conditions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the add4 operation.
     * @callback module:api/DefaultApi~add4Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} conditionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestConditionValue} opts.restConditionValue 
     * @param {module:api/DefaultApi~add4Callback} callback The callback function, accepting three arguments: error, data, response
     */
    add4(siteId, conditionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['restConditionValue'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling add4");
      }
      // verify the required parameter 'conditionId' is set
      if (conditionId === undefined || conditionId === null) {
        throw new Error("Missing the required parameter 'conditionId' when calling add4");
      }

      let pathParams = {
        'siteId': siteId,
        'conditionId': conditionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/conditions/{conditionId}/conditionValues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addContentPortletToLayout operation.
     * @callback module:api/DefaultApi~addContentPortletToLayoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portletId 
     * @param {String} layoutId 
     * @param {module:api/DefaultApi~addContentPortletToLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addContentPortletToLayout(portletId, layoutId, callback) {
      let postBody = null;
      // verify the required parameter 'portletId' is set
      if (portletId === undefined || portletId === null) {
        throw new Error("Missing the required parameter 'portletId' when calling addContentPortletToLayout");
      }
      // verify the required parameter 'layoutId' is set
      if (layoutId === undefined || layoutId === null) {
        throw new Error("Missing the required parameter 'layoutId' when calling addContentPortletToLayout");
      }

      let pathParams = {
        'portletId': portletId,
        'layoutId': layoutId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/portlet/custom/{portletId}/_addtolayout/{layoutId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTag operation.
     * @callback module:api/DefaultApi~addTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/TagForm} opts.tagForm 
     * @param {module:api/DefaultApi~addTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTag(opts, callback) {
      opts = opts || {};
      let postBody = opts['tagForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addToolGroupToUser operation.
     * @callback module:api/DefaultApi~addToolGroupToUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layoutId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid 
     * @param {module:api/DefaultApi~addToolGroupToUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addToolGroupToUser(layoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'layoutId' is set
      if (layoutId === undefined || layoutId === null) {
        throw new Error("Missing the required parameter 'layoutId' when calling addToolGroupToUser");
      }

      let pathParams = {
        'layoutId': layoutId
      };
      let queryParams = {
        'userid': opts['userid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/toolgroups/{layoutId}/_addtouser', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aliveCheck operation.
     * @callback module:api/DefaultApi~aliveCheckCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~aliveCheckCallback} callback The callback function, accepting three arguments: error, data, response
     */
    aliveCheck(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/system-status/alive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applyLicense operation.
     * @callback module:api/DefaultApi~applyLicenseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {Object} opts Optional parameters
     * @param {String} opts.licenseText 
     * @param {module:api/DefaultApi~applyLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    applyLicense(params, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling applyLicense");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
        'licenseText': opts['licenseText']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/license/applyLicense', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archive operation.
     * @callback module:api/DefaultApi~archiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.containerId 
     * @param {module:api/DefaultApi~archiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    archive(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'containerId': opts['containerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/_archive', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archive2 operation.
     * @callback module:api/DefaultApi~archive2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~archive2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    archive2(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates/_archive', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveSite operation.
     * @callback module:api/DefaultApi~archiveSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~archiveSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    archiveSite(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling archiveSite");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/{siteId}/_archive', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authentication operation.
     * @callback module:api/DefaultApi~authenticationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthenticationForm} opts.authenticationForm 
     * @param {module:api/DefaultApi~authenticationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authentication(opts, callback) {
      opts = opts || {};
      let postBody = opts['authenticationForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/authentication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bringBack operation.
     * @callback module:api/DefaultApi~bringBackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} versionableInode 
     * @param {module:api/DefaultApi~bringBackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bringBack(versionableInode, callback) {
      let postBody = null;
      // verify the required parameter 'versionableInode' is set
      if (versionableInode === undefined || versionableInode === null) {
        throw new Error("Missing the required parameter 'versionableInode' when calling bringBack");
      }

      let pathParams = {
        'versionableInode': versionableInode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/versionables/{versionableInode}/_bringback', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkArchive operation.
     * @callback module:api/DefaultApi~bulkArchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~bulkArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkArchive(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/_bulkarchive', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkDelete operation.
     * @callback module:api/DefaultApi~bulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~bulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkDelete(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/_bulkdelete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkPublish operation.
     * @callback module:api/DefaultApi~bulkPublishCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~bulkPublishCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkPublish(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/_bulkpublish', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkUnarchive operation.
     * @callback module:api/DefaultApi~bulkUnarchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~bulkUnarchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkUnarchive(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/_bulkunarchive', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkUnpublish operation.
     * @callback module:api/DefaultApi~bulkUnpublishCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~bulkUnpublishCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkUnpublish(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/_bulkunpublish', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/DefaultApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callDelete(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling callDelete");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/license/delete/{params}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callExport operation.
     * @callback module:api/DefaultApi~callExportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.contextInode 
     * @param {String} opts.filter 
     * @param {module:api/DefaultApi~callExportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callExport(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contextInode': opts['contextInode'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/csv'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/categories/_export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the canLockContent1 operation.
     * @callback module:api/DefaultApi~canLockContent1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} inodeOrIdentifier 
     * @param {Object} opts Optional parameters
     * @param {String} opts.language  (default to '-1')
     * @param {module:api/DefaultApi~canLockContent1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    canLockContent1(inodeOrIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inodeOrIdentifier' is set
      if (inodeOrIdentifier === undefined || inodeOrIdentifier === null) {
        throw new Error("Missing the required parameter 'inodeOrIdentifier' when calling canLockContent1");
      }

      let pathParams = {
        'inodeOrIdentifier': inodeOrIdentifier
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/content/_canlock/{inodeOrIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeLoggerLevel operation.
     * @callback module:api/DefaultApi~changeLoggerLevelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeLoggerForm} opts.changeLoggerForm 
     * @param {module:api/DefaultApi~changeLoggerLevelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeLoggerLevel(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeLoggerForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/logger', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkIntegrity operation.
     * @callback module:api/DefaultApi~checkIntegrityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~checkIntegrityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    checkIntegrity(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling checkIntegrity");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/integrity/checkintegrity/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkIntegrityProcessStatus operation.
     * @callback module:api/DefaultApi~checkIntegrityProcessStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~checkIntegrityProcessStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    checkIntegrityProcessStatus(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling checkIntegrityProcessStatus");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/integrity/checkIntegrityProcessStatus/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkRoles operation.
     * @callback module:api/DefaultApi~checkRolesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {String} roleIds 
     * @param {module:api/DefaultApi~checkRolesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    checkRoles(userId, roleIds, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling checkRoles");
      }
      // verify the required parameter 'roleIds' is set
      if (roleIds === undefined || roleIds === null) {
        throw new Error("Missing the required parameter 'roleIds' when calling checkRoles");
      }

      let pathParams = {
        'userId': userId,
        'roleIds': roleIds
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/roles/checkuserroles/userid/{userId}/roleids/{roleIds}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clearIndex operation.
     * @callback module:api/DefaultApi~clearIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~clearIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearIndex(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling clearIndex");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/clear/{params}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the closeIndex operation.
     * @callback module:api/DefaultApi~closeIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~closeIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    closeIndex(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling closeIndex");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/close/{params}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containerContent operation.
     * @callback module:api/DefaultApi~containerContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} containerId 
     * @param {String} contentletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pageInode 
     * @param {module:api/DefaultApi~containerContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containerContent(containerId, contentletId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling containerContent");
      }
      // verify the required parameter 'contentletId' is set
      if (contentletId === undefined || contentletId === null) {
        throw new Error("Missing the required parameter 'contentletId' when calling containerContent");
      }

      let pathParams = {
        'containerId': containerId,
        'contentletId': contentletId
      };
      let queryParams = {
        'pageInode': opts['pageInode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/{containerId}/content/{contentletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containerContentByQueryParam operation.
     * @callback module:api/DefaultApi~containerContentByQueryParamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.containerId 
     * @param {String} opts.pageInode 
     * @param {module:api/DefaultApi~containerContentByQueryParamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containerContentByQueryParam(contentletId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentletId' is set
      if (contentletId === undefined || contentletId === null) {
        throw new Error("Missing the required parameter 'contentletId' when calling containerContentByQueryParam");
      }

      let pathParams = {
        'contentletId': contentletId
      };
      let queryParams = {
        'containerId': opts['containerId'],
        'pageInode': opts['pageInode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/content/{contentletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containerForm operation.
     * @callback module:api/DefaultApi~containerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} containerId 
     * @param {String} formId 
     * @param {module:api/DefaultApi~containerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containerForm(containerId, formId, callback) {
      let postBody = null;
      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling containerForm");
      }
      // verify the required parameter 'formId' is set
      if (formId === undefined || formId === null) {
        throw new Error("Missing the required parameter 'formId' when calling containerForm");
      }

      let pathParams = {
        'containerId': containerId,
        'formId': formId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/{containerId}/form/{formId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containerFormByQueryParam operation.
     * @callback module:api/DefaultApi~containerFormByQueryParamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} formId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.containerId 
     * @param {module:api/DefaultApi~containerFormByQueryParamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containerFormByQueryParam(formId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'formId' is set
      if (formId === undefined || formId === null) {
        throw new Error("Missing the required parameter 'formId' when calling containerFormByQueryParam");
      }

      let pathParams = {
        'formId': formId
      };
      let queryParams = {
        'containerId': opts['containerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/form/{formId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copy operation.
     * @callback module:api/DefaultApi~copyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntityContainerView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~copyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntityContainerView}
     */
    copy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling copy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = ResponseEntityContainerView;
      return this.apiClient.callApi(
        '/v1/containers/{id}/_copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copy1 operation.
     * @callback module:api/DefaultApi~copy1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} templateId 
     * @param {module:api/DefaultApi~copy1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    copy1(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling copy1");
      }

      let pathParams = {
        'templateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates/{templateId}/_copy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copySite operation.
     * @callback module:api/DefaultApi~copySiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CopySiteForm} opts.copySiteForm 
     * @param {module:api/DefaultApi~copySiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    copySite(opts, callback) {
      opts = opts || {};
      let postBody = opts['copySiteForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/_copy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyTempFromUrl operation.
     * @callback module:api/DefaultApi~copyTempFromUrlCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RemoteUrlForm} opts.remoteUrlForm 
     * @param {module:api/DefaultApi~copyTempFromUrlCallback} callback The callback function, accepting three arguments: error, data, response
     */
    copyTempFromUrl(opts, callback) {
      opts = opts || {};
      let postBody = opts['remoteUrlForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/temp/byUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApp operation.
     * @callback module:api/DefaultApi~createAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/DefaultApi~createAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createApp(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppSecrets operation.
     * @callback module:api/DefaultApi~createAppSecretsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {String} siteId 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/DefaultApi~createAppSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createAppSecrets(key, siteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling createAppSecrets");
      }
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling createAppSecrets");
      }

      let pathParams = {
        'key': key,
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps/{key}/{siteId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContentPortlet operation.
     * @callback module:api/DefaultApi~createContentPortletCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomPortletForm} opts.customPortletForm 
     * @param {module:api/DefaultApi~createContentPortletCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createContentPortlet(opts, callback) {
      opts = opts || {};
      let postBody = opts['customPortletForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/portlet/custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContentTypeField operation.
     * @callback module:api/DefaultApi~createContentTypeFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~createContentTypeFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createContentTypeField(typeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling createContentTypeField");
      }

      let pathParams = {
        'typeId': typeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContentTypeField1 operation.
     * @callback module:api/DefaultApi~createContentTypeField1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeIdOrVarName 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~createContentTypeField1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    createContentTypeField1(typeIdOrVarName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'typeIdOrVarName' is set
      if (typeIdOrVarName === undefined || typeIdOrVarName === null) {
        throw new Error("Missing the required parameter 'typeIdOrVarName' when calling createContentTypeField1");
      }

      let pathParams = {
        'typeIdOrVarName': typeIdOrVarName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contenttype/{typeIdOrVarName}/fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFieldVariableByFieldId operation.
     * @callback module:api/DefaultApi~createFieldVariableByFieldIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~createFieldVariableByFieldIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createFieldVariableByFieldId(typeId, fieldId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling createFieldVariableByFieldId");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling createFieldVariableByFieldId");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/id/{fieldId}/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFieldVariableByFieldVar operation.
     * @callback module:api/DefaultApi~createFieldVariableByFieldVarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldVar 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~createFieldVariableByFieldVarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createFieldVariableByFieldVar(typeId, fieldVar, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling createFieldVariableByFieldVar");
      }
      // verify the required parameter 'fieldVar' is set
      if (fieldVar === undefined || fieldVar === null) {
        throw new Error("Missing the required parameter 'fieldVar' when calling createFieldVariableByFieldVar");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldVar': fieldVar
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/var/{fieldVar}/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFolders operation.
     * @callback module:api/DefaultApi~createFoldersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteName 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~createFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createFolders(siteName, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling createFolders");
      }

      let pathParams = {
        'siteName': siteName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/folder/createfolders/{siteName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIndex operation.
     * @callback module:api/DefaultApi~createIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~createIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createIndex(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling createIndex");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/create/{params}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNewSite operation.
     * @callback module:api/DefaultApi~createNewSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteForm} opts.siteForm 
     * @param {module:api/DefaultApi~createNewSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createNewSite(opts, callback) {
      opts = opts || {};
      let postBody = opts['siteForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentSite operation.
     * @callback module:api/DefaultApi~currentSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~currentSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    currentSite(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/currentSite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateIndex operation.
     * @callback module:api/DefaultApi~deactivateIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~deactivateIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deactivateIndex(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling deactivateIndex");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/deactivate/{params}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the defaultSite operation.
     * @callback module:api/DefaultApi~defaultSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~defaultSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    defaultSite(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/defaultSite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete1 operation.
     * @callback module:api/DefaultApi~delete1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tagId 
     * @param {module:api/DefaultApi~delete1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete1(tagId, callback) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling delete1");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/{tagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete10 operation.
     * @callback module:api/DefaultApi~delete10Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} folder 
     * @param {String} pathParam 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: Object}>} opts.requestBody 
     * @param {module:api/DefaultApi~delete10Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete10(folder, pathParam, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling delete10");
      }
      // verify the required parameter 'pathParam' is set
      if (pathParam === undefined || pathParam === null) {
        throw new Error("Missing the required parameter 'pathParam' when calling delete10");
      }

      let pathParams = {
        'folder': folder,
        'pathParam': pathParam
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/{folder}/{pathParam}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete2 operation.
     * @callback module:api/DefaultApi~delete2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~delete2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete2(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/categories', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete3 operation.
     * @callback module:api/DefaultApi~delete3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.containerId 
     * @param {module:api/DefaultApi~delete3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete3(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'containerId': opts['containerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete5 operation.
     * @callback module:api/DefaultApi~delete5Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteForm} opts.deleteForm 
     * @param {module:api/DefaultApi~delete5Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete5(opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/notification/delete', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete6 operation.
     * @callback module:api/DefaultApi~delete6Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~delete6Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete6(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling delete6");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/notification/id/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete7 operation.
     * @callback module:api/DefaultApi~delete7Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/DefaultApi~delete7Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete7(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling delete7");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/redis/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete8 operation.
     * @callback module:api/DefaultApi~delete8Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~delete8Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete8(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete9 operation.
     * @callback module:api/DefaultApi~delete9Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} folder 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: Object}>} opts.requestBody 
     * @param {module:api/DefaultApi~delete9Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete9(folder, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling delete9");
      }

      let pathParams = {
        'folder': folder
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/{folder}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllAppSecrets operation.
     * @callback module:api/DefaultApi~deleteAllAppSecretsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {String} siteId 
     * @param {module:api/DefaultApi~deleteAllAppSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAllAppSecrets(key, siteId, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteAllAppSecrets");
      }
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteAllAppSecrets");
      }

      let pathParams = {
        'key': key,
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps/{key}/{siteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiToken operation.
     * @callback module:api/DefaultApi~deleteApiTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tokenId 
     * @param {module:api/DefaultApi~deleteApiTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApiToken(tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteApiToken");
      }

      let pathParams = {
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apitoken/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApp operation.
     * @callback module:api/DefaultApi~deleteAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.removeDescriptor 
     * @param {module:api/DefaultApi~deleteAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApp(key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteApp");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        'removeDescriptor': opts['removeDescriptor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssetsByIdentifiers operation.
     * @callback module:api/DefaultApi~deleteAssetsByIdentifiersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeletePPQueueElementsByIdentifierForm} opts.deletePPQueueElementsByIdentifierForm 
     * @param {module:api/DefaultApi~deleteAssetsByIdentifiersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAssetsByIdentifiers(opts, callback) {
      opts = opts || {};
      let postBody = opts['deletePPQueueElementsByIdentifierForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/publishqueue', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContentTypeFieldById operation.
     * @callback module:api/DefaultApi~deleteContentTypeFieldByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldId 
     * @param {module:api/DefaultApi~deleteContentTypeFieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContentTypeFieldById(typeId, fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling deleteContentTypeFieldById");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling deleteContentTypeFieldById");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/id/{fieldId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContentTypeFieldById1 operation.
     * @callback module:api/DefaultApi~deleteContentTypeFieldById1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} fieldId 
     * @param {module:api/DefaultApi~deleteContentTypeFieldById1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContentTypeFieldById1(fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling deleteContentTypeFieldById1");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contenttype/{typeIdOrVarName}/fields/id/{fieldId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContentTypeFieldByVar operation.
     * @callback module:api/DefaultApi~deleteContentTypeFieldByVarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldVar 
     * @param {module:api/DefaultApi~deleteContentTypeFieldByVarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContentTypeFieldByVar(typeId, fieldVar, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling deleteContentTypeFieldByVar");
      }
      // verify the required parameter 'fieldVar' is set
      if (fieldVar === undefined || fieldVar === null) {
        throw new Error("Missing the required parameter 'fieldVar' when calling deleteContentTypeFieldByVar");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldVar': fieldVar
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/var/{fieldVar}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContentTypeFieldByVar1 operation.
     * @callback module:api/DefaultApi~deleteContentTypeFieldByVar1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeIdOrVarName 
     * @param {String} fieldVar 
     * @param {module:api/DefaultApi~deleteContentTypeFieldByVar1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContentTypeFieldByVar1(typeIdOrVarName, fieldVar, callback) {
      let postBody = null;
      // verify the required parameter 'typeIdOrVarName' is set
      if (typeIdOrVarName === undefined || typeIdOrVarName === null) {
        throw new Error("Missing the required parameter 'typeIdOrVarName' when calling deleteContentTypeFieldByVar1");
      }
      // verify the required parameter 'fieldVar' is set
      if (fieldVar === undefined || fieldVar === null) {
        throw new Error("Missing the required parameter 'fieldVar' when calling deleteContentTypeFieldByVar1");
      }

      let pathParams = {
        'typeIdOrVarName': typeIdOrVarName,
        'fieldVar': fieldVar
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contenttype/{typeIdOrVarName}/fields/var/{fieldVar}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomPortlet operation.
     * @callback module:api/DefaultApi~deleteCustomPortletCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portletId 
     * @param {module:api/DefaultApi~deleteCustomPortletCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomPortlet(portletId, callback) {
      let postBody = null;
      // verify the required parameter 'portletId' is set
      if (portletId === undefined || portletId === null) {
        throw new Error("Missing the required parameter 'portletId' when calling deleteCustomPortlet");
      }

      let pathParams = {
        'portletId': portletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/portlet/custom/{portletId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEndpoint operation.
     * @callback module:api/DefaultApi~deleteEndpointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.user 
     * @param {String} opts.password 
     * @param {String} opts.endPoint 
     * @param {String} opts.type 
     * @param {String} opts.callback 
     * @param {module:api/DefaultApi~deleteEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEndpoint(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'user': opts['user'],
        'password': opts['password'],
        'endPoint': opts['endPoint'],
        'type': opts['type'],
        'callback': opts['callback']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/config/deleteEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEnvironment operation.
     * @callback module:api/DefaultApi~deleteEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.user 
     * @param {String} opts.password 
     * @param {String} opts.environment 
     * @param {String} opts.type 
     * @param {String} opts.callback 
     * @param {module:api/DefaultApi~deleteEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEnvironment(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'user': opts['user'],
        'password': opts['password'],
        'environment': opts['environment'],
        'type': opts['type'],
        'callback': opts['callback']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/config/deleteEnvironment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFailedRecords operation.
     * @callback module:api/DefaultApi~deleteFailedRecordsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~deleteFailedRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFailedRecords(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/failed', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFieldVariableByFieldId operation.
     * @callback module:api/DefaultApi~deleteFieldVariableByFieldIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldId 
     * @param {String} fieldVarId 
     * @param {module:api/DefaultApi~deleteFieldVariableByFieldIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFieldVariableByFieldId(typeId, fieldId, fieldVarId, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling deleteFieldVariableByFieldId");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling deleteFieldVariableByFieldId");
      }
      // verify the required parameter 'fieldVarId' is set
      if (fieldVarId === undefined || fieldVarId === null) {
        throw new Error("Missing the required parameter 'fieldVarId' when calling deleteFieldVariableByFieldId");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldId': fieldId,
        'fieldVarId': fieldVarId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/id/{fieldId}/variables/id/{fieldVarId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFieldVariableByFieldVar operation.
     * @callback module:api/DefaultApi~deleteFieldVariableByFieldVarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldVar 
     * @param {String} fieldVarId 
     * @param {module:api/DefaultApi~deleteFieldVariableByFieldVarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFieldVariableByFieldVar(typeId, fieldVar, fieldVarId, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling deleteFieldVariableByFieldVar");
      }
      // verify the required parameter 'fieldVar' is set
      if (fieldVar === undefined || fieldVar === null) {
        throw new Error("Missing the required parameter 'fieldVar' when calling deleteFieldVariableByFieldVar");
      }
      // verify the required parameter 'fieldVarId' is set
      if (fieldVarId === undefined || fieldVarId === null) {
        throw new Error("Missing the required parameter 'fieldVarId' when calling deleteFieldVariableByFieldVar");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldVar': fieldVar,
        'fieldVarId': fieldVarId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/var/{fieldVar}/variables/id/{fieldVarId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFields operation.
     * @callback module:api/DefaultApi~deleteFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~deleteFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFields(typeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling deleteFields");
      }

      let pathParams = {
        'typeId': typeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFields1 operation.
     * @callback module:api/DefaultApi~deleteFields1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeIdOrVarName 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~deleteFields1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFields1(typeIdOrVarName, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'typeIdOrVarName' is set
      if (typeIdOrVarName === undefined || typeIdOrVarName === null) {
        throw new Error("Missing the required parameter 'typeIdOrVarName' when calling deleteFields1");
      }

      let pathParams = {
        'typeIdOrVarName': typeIdOrVarName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contenttype/{typeIdOrVarName}/fields', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFields2 operation.
     * @callback module:api/DefaultApi~deleteFields2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeIdOrVarName 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteFieldsForm} opts.deleteFieldsForm 
     * @param {module:api/DefaultApi~deleteFields2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFields2(typeIdOrVarName, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteFieldsForm'];
      // verify the required parameter 'typeIdOrVarName' is set
      if (typeIdOrVarName === undefined || typeIdOrVarName === null) {
        throw new Error("Missing the required parameter 'typeIdOrVarName' when calling deleteFields2");
      }

      let pathParams = {
        'typeIdOrVarName': typeIdOrVarName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/contenttype/{typeIdOrVarName}/fields', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFilter operation.
     * @callback module:api/DefaultApi~deleteFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} filterKey 
     * @param {module:api/DefaultApi~deleteFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFilter(filterKey, callback) {
      let postBody = null;
      // verify the required parameter 'filterKey' is set
      if (filterKey === undefined || filterKey === null) {
        throw new Error("Missing the required parameter 'filterKey' when calling deleteFilter");
      }

      let pathParams = {
        'filterKey': filterKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/pushpublish/filters/{filterKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFolders operation.
     * @callback module:api/DefaultApi~deleteFoldersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteName 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~deleteFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFolders(siteName, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling deleteFolders");
      }

      let pathParams = {
        'siteName': siteName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/folder/{siteName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHash operation.
     * @callback module:api/DefaultApi~deleteHashCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteHashCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHash(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteHash");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/redis/hash/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIndex operation.
     * @callback module:api/DefaultApi~deleteIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} indexName 
     * @param {module:api/DefaultApi~deleteIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIndex(indexName, callback) {
      let postBody = null;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling deleteIndex");
      }

      let pathParams = {
        'indexName': indexName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/{indexName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIndividualAppSecret operation.
     * @callback module:api/DefaultApi~deleteIndividualAppSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteSecretForm} opts.deleteSecretForm 
     * @param {module:api/DefaultApi~deleteIndividualAppSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIndividualAppSecret(opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteSecretForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLanguage operation.
     * @callback module:api/DefaultApi~deleteLanguageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} languageId 
     * @param {module:api/DefaultApi~deleteLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLanguage(languageId, callback) {
      let postBody = null;
      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling deleteLanguage");
      }

      let pathParams = {
        'languageId': languageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/languages/{languageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePersonalPortlet operation.
     * @callback module:api/DefaultApi~deletePersonalPortletCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portletId 
     * @param {module:api/DefaultApi~deletePersonalPortletCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePersonalPortlet(portletId, callback) {
      let postBody = null;
      // verify the required parameter 'portletId' is set
      if (portletId === undefined || portletId === null) {
        throw new Error("Missing the required parameter 'portletId' when calling deletePersonalPortlet");
      }

      let pathParams = {
        'portletId': portletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/portlet/portletId/{portletId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortletForRole operation.
     * @callback module:api/DefaultApi~deletePortletForRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portletId 
     * @param {String} roleId 
     * @param {module:api/DefaultApi~deletePortletForRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePortletForRole(portletId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'portletId' is set
      if (portletId === undefined || portletId === null) {
        throw new Error("Missing the required parameter 'portletId' when calling deletePortletForRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling deletePortletForRole");
      }

      let pathParams = {
        'portletId': portletId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/portlet/portletId/{portletId}/roleId/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoleLayouts operation.
     * @callback module:api/DefaultApi~deleteRoleLayoutsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleLayoutForm} opts.roleLayoutForm 
     * @param {module:api/DefaultApi~deleteRoleLayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRoleLayouts(opts, callback) {
      opts = opts || {};
      let postBody = opts['roleLayoutForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/roles/layouts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSite operation.
     * @callback module:api/DefaultApi~deleteSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~deleteSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSite(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSite");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/{siteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTagInodesByInode operation.
     * @callback module:api/DefaultApi~deleteTagInodesByInodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} inode 
     * @param {module:api/DefaultApi~deleteTagInodesByInodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTagInodesByInode(inode, callback) {
      let postBody = null;
      // verify the required parameter 'inode' is set
      if (inode === undefined || inode === null) {
        throw new Error("Missing the required parameter 'inode' when calling deleteTagInodesByInode");
      }

      let pathParams = {
        'inode': inode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/inode/{inode}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteToolGroupFromUser operation.
     * @callback module:api/DefaultApi~deleteToolGroupFromUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layoutId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid 
     * @param {module:api/DefaultApi~deleteToolGroupFromUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteToolGroupFromUser(layoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'layoutId' is set
      if (layoutId === undefined || layoutId === null) {
        throw new Error("Missing the required parameter 'layoutId' when calling deleteToolGroupFromUser");
      }

      let pathParams = {
        'layoutId': layoutId
      };
      let queryParams = {
        'userid': opts['userid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/toolgroups/{layoutId}/_removefromuser', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVersion operation.
     * @callback module:api/DefaultApi~deleteVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} versionableInode 
     * @param {module:api/DefaultApi~deleteVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVersion(versionableInode, callback) {
      let postBody = null;
      // verify the required parameter 'versionableInode' is set
      if (versionableInode === undefined || versionableInode === null) {
        throw new Error("Missing the required parameter 'versionableInode' when calling deleteVersion");
      }

      let pathParams = {
        'versionableInode': versionableInode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/versionables/{versionableInode}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discardConflicts operation.
     * @callback module:api/DefaultApi~discardConflictsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~discardConflictsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    discardConflicts(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling discardConflicts");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/integrity/discardconflicts/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doLogin operation.
     * @callback module:api/DefaultApi~doLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idpConfigId 
     * @param {module:api/DefaultApi~doLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    doLogin(idpConfigId, callback) {
      let postBody = null;
      // verify the required parameter 'idpConfigId' is set
      if (idpConfigId === undefined || idpConfigId === null) {
        throw new Error("Missing the required parameter 'idpConfigId' when calling doLogin");
      }

      let pathParams = {
        'idpConfigId': idpConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/dotsaml/login/{idpConfigId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doesUserHaveAccessToPortlet operation.
     * @callback module:api/DefaultApi~doesUserHaveAccessToPortletCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portletId 
     * @param {module:api/DefaultApi~doesUserHaveAccessToPortletCallback} callback The callback function, accepting three arguments: error, data, response
     */
    doesUserHaveAccessToPortlet(portletId, callback) {
      let postBody = null;
      // verify the required parameter 'portletId' is set
      if (portletId === undefined || portletId === null) {
        throw new Error("Missing the required parameter 'portletId' when calling doesUserHaveAccessToPortlet");
      }

      let pathParams = {
        'portletId': portletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/portlet/{portletId}/_doesuserhaveaccess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadAssets operation.
     * @callback module:api/DefaultApi~downloadAssetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~downloadAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadAssets(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/maintenance/_downloadAssets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadDb operation.
     * @callback module:api/DefaultApi~downloadDbCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~downloadDbCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadDb(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/maintenance/_downloadDb', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadLogFile operation.
     * @callback module:api/DefaultApi~downloadLogFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} fileName 
     * @param {module:api/DefaultApi~downloadLogFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadLogFile(fileName, callback) {
      let postBody = null;
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling downloadLogFile");
      }

      let pathParams = {
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/maintenance/_downloadLog/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadRemainingRecordsAsCsv operation.
     * @callback module:api/DefaultApi~downloadRemainingRecordsAsCsvCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~downloadRemainingRecordsAsCsvCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadRemainingRecordsAsCsv(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/failed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadStarter operation.
     * @callback module:api/DefaultApi~downloadStarterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~downloadStarterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadStarter(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/maintenance/_downloadStarter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadStarterWithAssets operation.
     * @callback module:api/DefaultApi~downloadStarterWithAssetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~downloadStarterWithAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadStarterWithAssets(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/maintenance/_downloadStarterWithAssets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dynamicDelete operation.
     * @callback module:api/DefaultApi~dynamicDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pathParam 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~dynamicDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dynamicDelete(pathParam, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'pathParam' is set
      if (pathParam === undefined || pathParam === null) {
        throw new Error("Missing the required parameter 'pathParam' when calling dynamicDelete");
      }

      let pathParams = {
        'pathParam': pathParam
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/dynamic/{pathParam}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dynamicGet operation.
     * @callback module:api/DefaultApi~dynamicGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~dynamicGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dynamicGet(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/dynamic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dynamicGet1 operation.
     * @callback module:api/DefaultApi~dynamicGet1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pathParam 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~dynamicGet1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    dynamicGet1(pathParam, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'pathParam' is set
      if (pathParam === undefined || pathParam === null) {
        throw new Error("Missing the required parameter 'pathParam' when calling dynamicGet1");
      }

      let pathParams = {
        'pathParam': pathParam
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/dynamic/{pathParam}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dynamicPatch operation.
     * @callback module:api/DefaultApi~dynamicPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pathParam 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~dynamicPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dynamicPatch(pathParam, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'pathParam' is set
      if (pathParam === undefined || pathParam === null) {
        throw new Error("Missing the required parameter 'pathParam' when calling dynamicPatch");
      }

      let pathParams = {
        'pathParam': pathParam
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/dynamic/{pathParam}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dynamicPost operation.
     * @callback module:api/DefaultApi~dynamicPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~dynamicPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dynamicPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/dynamic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dynamicPost1 operation.
     * @callback module:api/DefaultApi~dynamicPost1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pathParam 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~dynamicPost1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    dynamicPost1(pathParam, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'pathParam' is set
      if (pathParam === undefined || pathParam === null) {
        throw new Error("Missing the required parameter 'pathParam' when calling dynamicPost1");
      }

      let pathParams = {
        'pathParam': pathParam
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/dynamic/{pathParam}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dynamicPut operation.
     * @callback module:api/DefaultApi~dynamicPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~dynamicPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dynamicPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/dynamic', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dynamicPut1 operation.
     * @callback module:api/DefaultApi~dynamicPut1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pathParam 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~dynamicPut1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    dynamicPut1(pathParam, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'pathParam' is set
      if (pathParam === undefined || pathParam === null) {
        throw new Error("Missing the required parameter 'pathParam' when calling dynamicPut1");
      }

      let pathParams = {
        'pathParam': pathParam
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/dynamic/{pathParam}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the echo operation.
     * @callback module:api/DefaultApi~echoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} message 
     * @param {module:api/DefaultApi~echoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    echo(message, callback) {
      let postBody = null;
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling echo");
      }

      let pathParams = {
        'message': message
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/redis/echo/{message}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportSecrets operation.
     * @callback module:api/DefaultApi~exportSecretsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ExportSecretForm} opts.exportSecretForm 
     * @param {module:api/DefaultApi~exportSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportSecrets(opts, callback) {
      opts = opts || {};
      let postBody = opts['exportSecretForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filter operation.
     * @callback module:api/DefaultApi~filterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.query 
     * @param {Number} opts.page  (default to 0)
     * @param {Number} opts.perPage  (default to 40)
     * @param {String} opts.orderby 
     * @param {String} opts.direction  (default to 'ASC')
     * @param {Boolean} opts.includeanonymous 
     * @param {Boolean} opts.includedefault 
     * @param {String} opts.assetinode 
     * @param {Number} opts.permission 
     * @param {module:api/DefaultApi~filterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'orderby': opts['orderby'],
        'direction': opts['direction'],
        'includeanonymous': opts['includeanonymous'],
        'includedefault': opts['includedefault'],
        'assetinode': opts['assetinode'],
        'permission': opts['permission']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllSiteThumbnails operation.
     * @callback module:api/DefaultApi~findAllSiteThumbnailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~findAllSiteThumbnailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findAllSiteThumbnails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/thumbnails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findByInode operation.
     * @callback module:api/DefaultApi~findByInodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} inode 
     * @param {module:api/DefaultApi~findByInodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findByInode(inode, callback) {
      let postBody = null;
      // verify the required parameter 'inode' is set
      if (inode === undefined || inode === null) {
        throw new Error("Missing the required parameter 'inode' when calling findByInode");
      }

      let pathParams = {
        'inode': inode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/content/versions/{inode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findFolderById operation.
     * @callback module:api/DefaultApi~findFolderByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} folderId 
     * @param {module:api/DefaultApi~findFolderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findFolderById(folderId, callback) {
      let postBody = null;
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling findFolderById");
      }

      let pathParams = {
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/folder/{folderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findHostByIdentifier operation.
     * @callback module:api/DefaultApi~findHostByIdentifierCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~findHostByIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findHostByIdentifier(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling findHostByIdentifier");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/{siteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findHostByName operation.
     * @callback module:api/DefaultApi~findHostByNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchSiteByNameForm} opts.searchSiteByNameForm 
     * @param {module:api/DefaultApi~findHostByNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findHostByName(opts, callback) {
      opts = opts || {};
      let postBody = opts['searchSiteByNameForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/_byname', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findPortlet operation.
     * @callback module:api/DefaultApi~findPortletCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portletId 
     * @param {module:api/DefaultApi~findPortletCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findPortlet(portletId, callback) {
      let postBody = null;
      // verify the required parameter 'portletId' is set
      if (portletId === undefined || portletId === null) {
        throw new Error("Missing the required parameter 'portletId' when calling findPortlet");
      }

      let pathParams = {
        'portletId': portletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/portlet/{portletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findResourceLink operation.
     * @callback module:api/DefaultApi~findResourceLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} field 
     * @param {Object} opts Optional parameters
     * @param {String} opts.inode 
     * @param {String} opts.identifier 
     * @param {String} opts.language  (default to '-1')
     * @param {module:api/DefaultApi~findResourceLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findResourceLink(field, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling findResourceLink");
      }

      let pathParams = {
        'field': field
      };
      let queryParams = {
        'inode': opts['inode'],
        'identifier': opts['identifier'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/content/resourcelinks/field/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findResourceLink1 operation.
     * @callback module:api/DefaultApi~findResourceLink1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} inode 
     * @param {module:api/DefaultApi~findResourceLink1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    findResourceLink1(inode, callback) {
      let postBody = null;
      // verify the required parameter 'inode' is set
      if (inode === undefined || inode === null) {
        throw new Error("Missing the required parameter 'inode' when calling findResourceLink1");
      }

      let pathParams = {
        'inode': inode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/content/fileassets/{inode}/resourcelink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findResourceLinks operation.
     * @callback module:api/DefaultApi~findResourceLinksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.inode 
     * @param {String} opts.identifier 
     * @param {String} opts.language  (default to '-1')
     * @param {module:api/DefaultApi~findResourceLinksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findResourceLinks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'inode': opts['inode'],
        'identifier': opts['identifier'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/content/resourcelinks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findRoleLayouts operation.
     * @callback module:api/DefaultApi~findRoleLayoutsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} roleId 
     * @param {module:api/DefaultApi~findRoleLayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findRoleLayouts(roleId, callback) {
      let postBody = null;
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling findRoleLayouts");
      }

      let pathParams = {
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/roles/{roleId}/layouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSubFoldersByPath operation.
     * @callback module:api/DefaultApi~findSubFoldersByPathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchByPathForm} opts.searchByPathForm 
     * @param {module:api/DefaultApi~findSubFoldersByPathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findSubFoldersByPath(opts, callback) {
      opts = opts || {};
      let postBody = opts['searchByPathForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/folder/byPath', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findTagsByInode operation.
     * @callback module:api/DefaultApi~findTagsByInodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} inode 
     * @param {module:api/DefaultApi~findTagsByInodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findTagsByInode(inode, callback) {
      let postBody = null;
      // verify the required parameter 'inode' is set
      if (inode === undefined || inode === null) {
        throw new Error("Missing the required parameter 'inode' when calling findTagsByInode");
      }

      let pathParams = {
        'inode': inode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/inode/{inode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findThemeById operation.
     * @callback module:api/DefaultApi~findThemeByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~findThemeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findThemeById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findThemeById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/themes/id/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findThemes operation.
     * @callback module:api/DefaultApi~findThemesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.hostId 
     * @param {Number} opts.page 
     * @param {Number} opts.perPage  (default to -1)
     * @param {String} opts.direction  (default to 'ASC')
     * @param {String} opts.searchParam 
     * @param {module:api/DefaultApi~findThemesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findThemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'hostId': opts['hostId'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'direction': opts['direction'],
        'searchParam': opts['searchParam']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/themes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findVersionable operation.
     * @callback module:api/DefaultApi~findVersionableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} versionableInodeOrIdentifier 
     * @param {module:api/DefaultApi~findVersionableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findVersionable(versionableInodeOrIdentifier, callback) {
      let postBody = null;
      // verify the required parameter 'versionableInodeOrIdentifier' is set
      if (versionableInodeOrIdentifier === undefined || versionableInodeOrIdentifier === null) {
        throw new Error("Missing the required parameter 'versionableInodeOrIdentifier' when calling findVersionable");
      }

      let pathParams = {
        'versionableInodeOrIdentifier': versionableInodeOrIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/versionables/{versionableInodeOrIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findVersions operation.
     * @callback module:api/DefaultApi~findVersionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.inodes 
     * @param {String} opts.identifier 
     * @param {String} opts.groupByLang 
     * @param {Number} opts.limit 
     * @param {module:api/DefaultApi~findVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findVersions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'inodes': opts['inodes'],
        'identifier': opts['identifier'],
        'groupByLang': opts['groupByLang'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/content/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fixConflicts operation.
     * @callback module:api/DefaultApi~fixConflictsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~fixConflictsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fixConflicts(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling fixConflicts");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/integrity/fixconflicts/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fixConflictsFromRemote operation.
     * @callback module:api/DefaultApi~fixConflictsFromRemoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.DATA_TO_FIX 
     * @param {String} opts.TYPE 
     * @param {module:api/DefaultApi~fixConflictsFromRemoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fixConflictsFromRemote(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'DATA_TO_FIX': opts['DATA_TO_FIX'],
        'TYPE': opts['TYPE']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/integrity/_fixconflictsfromremote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flushAll operation.
     * @callback module:api/DefaultApi~flushAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} provider 
     * @param {module:api/DefaultApi~flushAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    flushAll(provider, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling flushAll");
      }

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/caches/provider/{provider}/flush', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flushGroup operation.
     * @callback module:api/DefaultApi~flushGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} provider 
     * @param {String} group 
     * @param {module:api/DefaultApi~flushGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    flushGroup(provider, group, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling flushGroup");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling flushGroup");
      }

      let pathParams = {
        'provider': provider,
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/caches/provider/{provider}/flush/{group}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flushIndiciesCache operation.
     * @callback module:api/DefaultApi~flushIndiciesCacheCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~flushIndiciesCacheCallback} callback The callback function, accepting three arguments: error, data, response
     */
    flushIndiciesCache(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/cache', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flushObject operation.
     * @callback module:api/DefaultApi~flushObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} provider 
     * @param {String} group 
     * @param {String} id 
     * @param {module:api/DefaultApi~flushObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    flushObject(provider, group, id, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling flushObject");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling flushObject");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling flushObject");
      }

      let pathParams = {
        'provider': provider,
        'group': group,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/caches/provider/{provider}/flush/{group}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forgotPassword operation.
     * @callback module:api/DefaultApi~forgotPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ForgotPasswordForm} opts.forgotPasswordForm 
     * @param {module:api/DefaultApi~forgotPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forgotPassword(opts, callback) {
      opts = opts || {};
      let postBody = opts['forgotPasswordForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/forgotpassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the freeLicense operation.
     * @callback module:api/DefaultApi~freeLicenseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~freeLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    freeLicense(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling freeLicense");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/license/free/{params}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateIntegrityData operation.
     * @callback module:api/DefaultApi~generateIntegrityDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~generateIntegrityDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    generateIntegrityData(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/integrity/_generateintegritydata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/DefaultApi~getCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bundleId 
     * @param {module:api/DefaultApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     */
    get(bundleId, callback) {
      let postBody = null;
      // verify the required parameter 'bundleId' is set
      if (bundleId === undefined || bundleId === null) {
        throw new Error("Missing the required parameter 'bundleId' when calling get");
      }

      let pathParams = {
        'bundleId': bundleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/auditPublishing/get/{bundleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get2 operation.
     * @callback module:api/DefaultApi~get2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/DefaultApi~get2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    get2(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling get2");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/redis/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get3 operation.
     * @callback module:api/DefaultApi~get3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} folder 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: Object}>} opts.requestBody 
     * @param {module:api/DefaultApi~get3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    get3(folder, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling get3");
      }

      let pathParams = {
        'folder': folder
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/{folder}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get4 operation.
     * @callback module:api/DefaultApi~get4Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} folder 
     * @param {String} pathParam 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: Object}>} opts.requestBody 
     * @param {module:api/DefaultApi~get4Callback} callback The callback function, accepting three arguments: error, data, response
     */
    get4(folder, pathParam, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling get4");
      }
      // verify the required parameter 'pathParam' is set
      if (pathParam === undefined || pathParam === null) {
        throw new Error("Missing the required parameter 'pathParam' when calling get4");
      }

      let pathParams = {
        'folder': folder,
        'pathParam': pathParam
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/{folder}/{pathParam}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get5 operation.
     * @callback module:api/DefaultApi~get5Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} languageid 
     * @param {module:api/DefaultApi~get5Callback} callback The callback function, accepting three arguments: error, data, response
     */
    get5(languageid, callback) {
      let postBody = null;
      // verify the required parameter 'languageid' is set
      if (languageid === undefined || languageid === null) {
        throw new Error("Missing the required parameter 'languageid' when calling get5");
      }

      let pathParams = {
        'languageid': languageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/languages/id/{languageid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActive operation.
     * @callback module:api/DefaultApi~getActiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getActiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActive(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getActive");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/active/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAll operation.
     * @callback module:api/DefaultApi~getAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAll(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getAll");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/license/all/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllMessages operation.
     * @callback module:api/DefaultApi~getAllMessagesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} language 
     * @param {module:api/DefaultApi~getAllMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllMessages(language, callback) {
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getAllMessages");
      }

      let pathParams = {
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/languages/{language}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiToken operation.
     * @callback module:api/DefaultApi~getApiTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTokenForm} opts.createTokenForm 
     * @param {module:api/DefaultApi~getApiTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getApiToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['createTokenForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/authentication/api-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiTokens operation.
     * @callback module:api/DefaultApi~getApiTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showRevoked 
     * @param {module:api/DefaultApi~getApiTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getApiTokens(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getApiTokens");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'showRevoked': opts['showRevoked']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apitoken/{userId}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppByKey operation.
     * @callback module:api/DefaultApi~getAppByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/DefaultApi~getAppByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAppByKey(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAppByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppDetail operation.
     * @callback module:api/DefaultApi~getAppDetailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {String} siteId 
     * @param {module:api/DefaultApi~getAppDetailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAppDetail(key, siteId, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAppDetail");
      }
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getAppDetail");
      }

      let pathParams = {
        'key': key,
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps/{key}/{siteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByContentlet operation.
     * @callback module:api/DefaultApi~getByContentletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntityPermissionView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permission for a Contentlet
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentletId 
     * @param {String} opts.type  (default to 'READ')
     * @param {module:api/DefaultApi~getByContentletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntityPermissionView}
     */
    getByContentlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contentletId': opts['contentletId'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseEntityPermissionView;
      return this.apiClient.callApi(
        '/v1/permissions/_bycontent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardinality operation.
     * @callback module:api/DefaultApi~getCardinalityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getCardinalityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardinality(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/relationships/cardinalities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategories operation.
     * @callback module:api/DefaultApi~getCategoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {String} opts.orderby  (default to 'category_name')
     * @param {String} opts.direction  (default to 'ASC')
     * @param {Boolean} opts.showChildrenCount 
     * @param {module:api/DefaultApi~getCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'orderby': opts['orderby'],
        'direction': opts['direction'],
        'showChildrenCount': opts['showChildrenCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryByIdOrKey operation.
     * @callback module:api/DefaultApi~getCategoryByIdOrKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idOrKey 
     * @param {module:api/DefaultApi~getCategoryByIdOrKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryView}
     */
    getCategoryByIdOrKey(idOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'idOrKey' is set
      if (idOrKey === undefined || idOrKey === null) {
        throw new Error("Missing the required parameter 'idOrKey' when calling getCategoryByIdOrKey");
      }

      let pathParams = {
        'idOrKey': idOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = CategoryView;
      return this.apiClient.callApi(
        '/v1/categories/{idOrKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChildren operation.
     * @callback module:api/DefaultApi~getChildrenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {String} opts.orderby  (default to 'category_name')
     * @param {String} opts.direction  (default to 'ASC')
     * @param {String} opts.inode 
     * @param {Boolean} opts.showChildrenCount 
     * @param {module:api/DefaultApi~getChildrenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChildren(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'orderby': opts['orderby'],
        'direction': opts['direction'],
        'inode': opts['inode'],
        'showChildrenCount': opts['showChildrenCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/categories/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterStats operation.
     * @callback module:api/DefaultApi~getClusterStatsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getClusterStatsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getClusterStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/cluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigVariables operation.
     * @callback module:api/DefaultApi~getConfigVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.keys 
     * @param {module:api/DefaultApi~getConfigVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getConfigVariables(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'keys': opts['keys']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/configuration/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContainers operation.
     * @callback module:api/DefaultApi~getContainersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {String} opts.orderby  (default to 'title')
     * @param {String} opts.direction  (default to 'ASC')
     * @param {String} opts.host 
     * @param {Boolean} opts.system 
     * @param {Boolean} opts.archive 
     * @param {String} opts.contentTypeIdOrVar 
     * @param {module:api/DefaultApi~getContainersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getContainers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'orderby': opts['orderby'],
        'direction': opts['direction'],
        'host': opts['host'],
        'system': opts['system'],
        'archive': opts['archive'],
        'content_type_id_or_var': opts['contentTypeIdOrVar']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContent1 operation.
     * @callback module:api/DefaultApi~getContent1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getContent1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getContent1(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getContent1");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contentrelationships/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContent2 operation.
     * @callback module:api/DefaultApi~getContent2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} inodeOrIdentifier 
     * @param {Object} opts Optional parameters
     * @param {String} opts.language  (default to '-1')
     * @param {module:api/DefaultApi~getContent2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getContent2(inodeOrIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inodeOrIdentifier' is set
      if (inodeOrIdentifier === undefined || inodeOrIdentifier === null) {
        throw new Error("Missing the required parameter 'inodeOrIdentifier' when calling getContent2");
      }

      let pathParams = {
        'inodeOrIdentifier': inodeOrIdentifier
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/content/{inodeOrIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentTypeFieldById operation.
     * @callback module:api/DefaultApi~getContentTypeFieldByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldId 
     * @param {module:api/DefaultApi~getContentTypeFieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getContentTypeFieldById(typeId, fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getContentTypeFieldById");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getContentTypeFieldById");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/id/{fieldId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentTypeFieldById1 operation.
     * @callback module:api/DefaultApi~getContentTypeFieldById1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} fieldId 
     * @param {module:api/DefaultApi~getContentTypeFieldById1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getContentTypeFieldById1(fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getContentTypeFieldById1");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contenttype/{typeIdOrVarName}/fields/id/{fieldId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentTypeFieldByVar operation.
     * @callback module:api/DefaultApi~getContentTypeFieldByVarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldVar 
     * @param {module:api/DefaultApi~getContentTypeFieldByVarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getContentTypeFieldByVar(typeId, fieldVar, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getContentTypeFieldByVar");
      }
      // verify the required parameter 'fieldVar' is set
      if (fieldVar === undefined || fieldVar === null) {
        throw new Error("Missing the required parameter 'fieldVar' when calling getContentTypeFieldByVar");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldVar': fieldVar
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/var/{fieldVar}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentTypeFieldByVar1 operation.
     * @callback module:api/DefaultApi~getContentTypeFieldByVar1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeIdOrVarName 
     * @param {String} fieldVar 
     * @param {module:api/DefaultApi~getContentTypeFieldByVar1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getContentTypeFieldByVar1(typeIdOrVarName, fieldVar, callback) {
      let postBody = null;
      // verify the required parameter 'typeIdOrVarName' is set
      if (typeIdOrVarName === undefined || typeIdOrVarName === null) {
        throw new Error("Missing the required parameter 'typeIdOrVarName' when calling getContentTypeFieldByVar1");
      }
      // verify the required parameter 'fieldVar' is set
      if (fieldVar === undefined || fieldVar === null) {
        throw new Error("Missing the required parameter 'fieldVar' when calling getContentTypeFieldByVar1");
      }

      let pathParams = {
        'typeIdOrVarName': typeIdOrVarName,
        'fieldVar': fieldVar
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contenttype/{typeIdOrVarName}/fields/var/{fieldVar}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentTypeFields operation.
     * @callback module:api/DefaultApi~getContentTypeFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {module:api/DefaultApi~getContentTypeFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getContentTypeFields(typeId, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getContentTypeFields");
      }

      let pathParams = {
        'typeId': typeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentTypeFields1 operation.
     * @callback module:api/DefaultApi~getContentTypeFields1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeIdOrVarName 
     * @param {module:api/DefaultApi~getContentTypeFields1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getContentTypeFields1(typeIdOrVarName, callback) {
      let postBody = null;
      // verify the required parameter 'typeIdOrVarName' is set
      if (typeIdOrVarName === undefined || typeIdOrVarName === null) {
        throw new Error("Missing the required parameter 'typeIdOrVarName' when calling getContentTypeFields1");
      }

      let pathParams = {
        'typeIdOrVarName': typeIdOrVarName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contenttype/{typeIdOrVarName}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentTypeFields2 operation.
     * @callback module:api/DefaultApi~getContentTypeFields2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeIdOrVarName 
     * @param {module:api/DefaultApi~getContentTypeFields2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getContentTypeFields2(typeIdOrVarName, callback) {
      let postBody = null;
      // verify the required parameter 'typeIdOrVarName' is set
      if (typeIdOrVarName === undefined || typeIdOrVarName === null) {
        throw new Error("Missing the required parameter 'typeIdOrVarName' when calling getContentTypeFields2");
      }

      let pathParams = {
        'typeIdOrVarName': typeIdOrVarName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/contenttype/{typeIdOrVarName}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreateContentURL operation.
     * @callback module:api/DefaultApi~getCreateContentURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentTypeVariable 
     * @param {module:api/DefaultApi~getCreateContentURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCreateContentURL(contentTypeVariable, callback) {
      let postBody = null;
      // verify the required parameter 'contentTypeVariable' is set
      if (contentTypeVariable === undefined || contentTypeVariable === null) {
        throw new Error("Missing the required parameter 'contentTypeVariable' when calling getCreateContentURL");
      }

      let pathParams = {
        'contentTypeVariable': contentTypeVariable
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/portlet/_actionurl/{contentTypeVariable}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentCount operation.
     * @callback module:api/DefaultApi~getDocumentCountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getDocumentCountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDocumentCount(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getDocumentCount");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/testResource/testGet/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getESConfigProperties operation.
     * @callback module:api/DefaultApi~getESConfigPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getESConfigPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getESConfigProperties(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getESConfigProperties");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cluster/getESConfigProperties/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvents operation.
     * @callback module:api/DefaultApi~getEventsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.lastcallback 
     * @param {module:api/DefaultApi~getEventsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lastcallback': opts['lastcallback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ws/v1/system/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExternalGrammar operation.
     * @callback module:api/DefaultApi~getExternalGrammarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {module:api/DefaultApi~getExternalGrammarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExternalGrammar(path, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getExternalGrammar");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/application.wadl/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldTypes operation.
     * @callback module:api/DefaultApi~getFieldTypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getFieldTypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFieldTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/fieldTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldVariableByFieldId operation.
     * @callback module:api/DefaultApi~getFieldVariableByFieldIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldId 
     * @param {String} fieldVarId 
     * @param {module:api/DefaultApi~getFieldVariableByFieldIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFieldVariableByFieldId(typeId, fieldId, fieldVarId, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getFieldVariableByFieldId");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getFieldVariableByFieldId");
      }
      // verify the required parameter 'fieldVarId' is set
      if (fieldVarId === undefined || fieldVarId === null) {
        throw new Error("Missing the required parameter 'fieldVarId' when calling getFieldVariableByFieldId");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldId': fieldId,
        'fieldVarId': fieldVarId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/id/{fieldId}/variables/id/{fieldVarId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldVariableByFieldVar operation.
     * @callback module:api/DefaultApi~getFieldVariableByFieldVarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldVar 
     * @param {String} fieldVarId 
     * @param {module:api/DefaultApi~getFieldVariableByFieldVarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFieldVariableByFieldVar(typeId, fieldVar, fieldVarId, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getFieldVariableByFieldVar");
      }
      // verify the required parameter 'fieldVar' is set
      if (fieldVar === undefined || fieldVar === null) {
        throw new Error("Missing the required parameter 'fieldVar' when calling getFieldVariableByFieldVar");
      }
      // verify the required parameter 'fieldVarId' is set
      if (fieldVarId === undefined || fieldVarId === null) {
        throw new Error("Missing the required parameter 'fieldVarId' when calling getFieldVariableByFieldVar");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldVar': fieldVar,
        'fieldVarId': fieldVarId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/var/{fieldVar}/variables/id/{fieldVarId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldVariablesByFieldId operation.
     * @callback module:api/DefaultApi~getFieldVariablesByFieldIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldId 
     * @param {module:api/DefaultApi~getFieldVariablesByFieldIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFieldVariablesByFieldId(typeId, fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getFieldVariablesByFieldId");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getFieldVariablesByFieldId");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/id/{fieldId}/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldVariablesByFieldVar operation.
     * @callback module:api/DefaultApi~getFieldVariablesByFieldVarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldVar 
     * @param {module:api/DefaultApi~getFieldVariablesByFieldVarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFieldVariablesByFieldVar(typeId, fieldVar, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getFieldVariablesByFieldVar");
      }
      // verify the required parameter 'fieldVar' is set
      if (fieldVar === undefined || fieldVar === null) {
        throw new Error("Missing the required parameter 'fieldVar' when calling getFieldVariablesByFieldVar");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldVar': fieldVar
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/var/{fieldVar}/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilter operation.
     * @callback module:api/DefaultApi~getFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} filterKey 
     * @param {module:api/DefaultApi~getFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFilter(filterKey, callback) {
      let postBody = null;
      // verify the required parameter 'filterKey' is set
      if (filterKey === undefined || filterKey === null) {
        throw new Error("Missing the required parameter 'filterKey' when calling getFilter");
      }

      let pathParams = {
        'filterKey': filterKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/pushpublish/filters/{filterKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilters operation.
     * @callback module:api/DefaultApi~getFiltersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFilters(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/pushpublish/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFolderContent operation.
     * @callback module:api/DefaultApi~getFolderContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/BrowserQueryForm} opts.browserQueryForm 
     * @param {module:api/DefaultApi~getFolderContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFolderContent(opts, callback) {
      opts = opts || {};
      let postBody = opts['browserQueryForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/browser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFromLanguageTag operation.
     * @callback module:api/DefaultApi~getFromLanguageTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} languageTag 
     * @param {module:api/DefaultApi~getFromLanguageTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFromLanguageTag(languageTag, callback) {
      let postBody = null;
      // verify the required parameter 'languageTag' is set
      if (languageTag === undefined || languageTag === null) {
        throw new Error("Missing the required parameter 'languageTag' when calling getFromLanguageTag");
      }

      let pathParams = {
        'languageTag': languageTag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/languages/{languageTag}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHash operation.
     * @callback module:api/DefaultApi~getHashCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/DefaultApi~getHashCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getHash(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getHash");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/redis/hash/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIncrement operation.
     * @callback module:api/DefaultApi~getIncrementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/DefaultApi~getIncrementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIncrement(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getIncrement");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/redis/incr/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIndexStatus operation.
     * @callback module:api/DefaultApi~getIndexStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getIndexStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIndexStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstalledBundles operation.
     * @callback module:api/DefaultApi~getInstalledBundlesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getInstalledBundlesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInstalledBundles(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getInstalledBundles");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/osgi/getInstalledBundles/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntegrityData operation.
     * @callback module:api/DefaultApi~getIntegrityDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} requestId 
     * @param {module:api/DefaultApi~getIntegrityDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIntegrityData(requestId, callback) {
      let postBody = null;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling getIntegrityData");
      }

      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/zip'];
      let returnType = null;
      return this.apiClient.callApi(
        '/integrity/{requestId}/integrityData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntegrityResult operation.
     * @callback module:api/DefaultApi~getIntegrityResultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getIntegrityResultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIntegrityResult(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getIntegrityResult");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/integrity/getIntegrityResult/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJvmInfo operation.
     * @callback module:api/DefaultApi~getJvmInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getJvmInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getJvmInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/jvm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJwtFromApiToken operation.
     * @callback module:api/DefaultApi~getJwtFromApiTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tokenId 
     * @param {module:api/DefaultApi~getJwtFromApiTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getJwtFromApiToken(tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling getJwtFromApiToken");
      }

      let pathParams = {
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apitoken/{tokenId}/jwt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKeys operation.
     * @callback module:api/DefaultApi~getKeysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} provider 
     * @param {String} group 
     * @param {module:api/DefaultApi~getKeysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getKeys(provider, group, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling getKeys");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling getKeys");
      }

      let pathParams = {
        'provider': provider,
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/caches/provider/{provider}/keys/{group}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLayout operation.
     * @callback module:api/DefaultApi~getLayoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLayout(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getLayout");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/portlet/layout/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLayout1 operation.
     * @callback module:api/DefaultApi~getLayout1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getLayout1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getLayout1(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getLayout1");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restexample/layout/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLayout2 operation.
     * @callback module:api/DefaultApi~getLayout2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getLayout2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getLayout2(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getLayout2");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulesengine/layout/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLayout3 operation.
     * @callback module:api/DefaultApi~getLayout3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getLayout3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getLayout3(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getLayout3");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/es/layout/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLayout4 operation.
     * @callback module:api/DefaultApi~getLayout4Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getLayout4Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getLayout4(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getLayout4");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/personas/layout/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLicenseRepoStatus operation.
     * @callback module:api/DefaultApi~getLicenseRepoStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getLicenseRepoStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLicenseRepoStatus(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getLicenseRepoStatus");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cluster/licenseRepoStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiveById operation.
     * @callback module:api/DefaultApi~getLiveByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.containerId 
     * @param {Boolean} opts.includeContentType 
     * @param {module:api/DefaultApi~getLiveByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLiveById(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'containerId': opts['containerId'],
        'includeContentType': opts['includeContentType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/live', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiveById1 operation.
     * @callback module:api/DefaultApi~getLiveById1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} templateId 
     * @param {module:api/DefaultApi~getLiveById1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getLiveById1(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getLiveById1");
      }

      let pathParams = {
        'templateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates/{templateId}/live', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoggedInUser operation.
     * @callback module:api/DefaultApi~getLoggedInUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getLoggedInUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLoggedInUser(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getLoggedInUser");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/getloggedinuser/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoggedInUser1 operation.
     * @callback module:api/DefaultApi~getLoggedInUser1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getLoggedInUser1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getLoggedInUser1(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getLoggedInUser1");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/util/encodeQueryParamValue/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLogger operation.
     * @callback module:api/DefaultApi~getLoggerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} loggerName 
     * @param {module:api/DefaultApi~getLoggerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLogger(loggerName, callback) {
      let postBody = null;
      // verify the required parameter 'loggerName' is set
      if (loggerName === undefined || loggerName === null) {
        throw new Error("Missing the required parameter 'loggerName' when calling getLogger");
      }

      let pathParams = {
        'loggerName': loggerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/logger/{loggerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoggers operation.
     * @callback module:api/DefaultApi~getLoggersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getLoggersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLoggers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/logger', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoginUser operation.
     * @callback module:api/DefaultApi~getLoginUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getLoginUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLoginUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/authentication/logInUser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenus operation.
     * @callback module:api/DefaultApi~getMenusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getMenusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMenus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/menu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessages operation.
     * @callback module:api/DefaultApi~getMessagesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/I18NForm} opts.i18NForm 
     * @param {module:api/DefaultApi~getMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMessages(opts, callback) {
      opts = opts || {};
      let postBody = opts['i18NForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/languages/i18n', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessages1 operation.
     * @callback module:api/DefaultApi~getMessages1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/I18NForm} opts.i18NForm 
     * @param {module:api/DefaultApi~getMessages1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getMessages1(opts, callback) {
      opts = opts || {};
      let postBody = opts['i18NForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/languages/i18n', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewNotificationsCount operation.
     * @callback module:api/DefaultApi~getNewNotificationsCountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getNewNotificationsCountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNewNotificationsCount(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getNewNotificationsCount");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/notification/getNewNotificationsCount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodesInfo operation.
     * @callback module:api/DefaultApi~getNodesInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getNodesInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNodesInfo(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getNodesInfo");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cluster/getNodesStatus/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotifications operation.
     * @callback module:api/DefaultApi~getNotificationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {Object} opts Optional parameters
     * @param {String} opts.range 
     * @param {module:api/DefaultApi~getNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotifications(params, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getNotifications");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/notification/getNotifications/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOneSidedRelationships operation.
     * @callback module:api/DefaultApi~getOneSidedRelationshipsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentTypeId 
     * @param {Number} opts.page 
     * @param {Number} opts.perPage  (default to 0)
     * @param {module:api/DefaultApi~getOneSidedRelationshipsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOneSidedRelationships(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contentTypeId': opts['contentTypeId'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissionsByPermissionType operation.
     * @callback module:api/DefaultApi~getPermissionsByPermissionTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid 
     * @param {String} opts.permission 
     * @param {String} opts.permissiontype 
     * @param {module:api/DefaultApi~getPermissionsByPermissionTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPermissionsByPermissionType(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userid': opts['userid'],
        'permission': opts['permission'],
        'permissiontype': opts['permissiontype']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/permissions/_bypermissiontype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReindexationProgress operation.
     * @callback module:api/DefaultApi~getReindexationProgressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getReindexationProgressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReindexationProgress(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/reindex', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteToken operation.
     * @callback module:api/DefaultApi~getRemoteTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RemoteAPITokenForm} opts.remoteAPITokenForm 
     * @param {module:api/DefaultApi~getRemoteTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRemoteToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['remoteAPITokenForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apitoken/remote', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelectFolder operation.
     * @callback module:api/DefaultApi~getSelectFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getSelectFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelectFolder(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/browser/selectedfolder', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteSetupProgress operation.
     * @callback module:api/DefaultApi~getSiteSetupProgressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~getSiteSetupProgressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSiteSetupProgress(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSiteSetupProgress");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/{siteId}/setup_progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteVariables operation.
     * @callback module:api/DefaultApi~getSiteVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseSiteVariablesEntityView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the Site Variables for a site
     * @param {String} siteId 
     * @param {module:api/DefaultApi~getSiteVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseSiteVariablesEntityView}
     */
    getSiteVariables(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSiteVariables");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseSiteVariablesEntityView;
      return this.apiClient.callApi(
        '/v1/site/variable/{siteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStructuresWithWYSIWYGFields operation.
     * @callback module:api/DefaultApi~getStructuresWithWYSIWYGFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {String} type 
     * @param {String} callback 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {module:api/DefaultApi~getStructuresWithWYSIWYGFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStructuresWithWYSIWYGFields(path, type, callback, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getStructuresWithWYSIWYGFields");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getStructuresWithWYSIWYGFields");
      }
      // verify the required parameter 'callback' is set
      if (callback === undefined || callback === null) {
        throw new Error("Missing the required parameter 'callback' when calling getStructuresWithWYSIWYGFields");
      }

      let pathParams = {
        'path': path,
        'type': type,
        'callback': callback
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/structure/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuccessCallbackFunction operation.
     * @callback module:api/DefaultApi~getSuccessCallbackFunctionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idOrVar 
     * @param {module:api/DefaultApi~getSuccessCallbackFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSuccessCallbackFunction(idOrVar, callback) {
      let postBody = null;
      // verify the required parameter 'idOrVar' is set
      if (idOrVar === undefined || idOrVar === null) {
        throw new Error("Missing the required parameter 'idOrVar' when calling getSuccessCallbackFunction");
      }

      let pathParams = {
        'idOrVar': idOrVar
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/form/{idOrVar}/successCallback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSyncEvents operation.
     * @callback module:api/DefaultApi~getSyncEventsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.lastcallback 
     * @param {module:api/DefaultApi~getSyncEventsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSyncEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lastcallback': opts['lastcallback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ws/v1/system/syncevents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsByNameOrId operation.
     * @callback module:api/DefaultApi~getTagsByNameOrIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} nameOrId 
     * @param {module:api/DefaultApi~getTagsByNameOrIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTagsByNameOrId(nameOrId, callback) {
      let postBody = null;
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling getTagsByNameOrId");
      }

      let pathParams = {
        'nameOrId': nameOrId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/{nameOrId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsByUserId operation.
     * @callback module:api/DefaultApi~getTagsByUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~getTagsByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTagsByUserId(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getTagsByUserId");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/user/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWadl operation.
     * @callback module:api/DefaultApi~getWadlCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getWadlCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWadl(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.sun.wadl+xml', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/application.wadl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWidget operation.
     * @callback module:api/DefaultApi~getWidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~getWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWidget(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getWidget");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain; charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/widget/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkingById operation.
     * @callback module:api/DefaultApi~getWorkingByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.containerId 
     * @param {Boolean} opts.includeContentType 
     * @param {module:api/DefaultApi~getWorkingByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWorkingById(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'containerId': opts['containerId'],
        'includeContentType': opts['includeContentType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/working', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkingById1 operation.
     * @callback module:api/DefaultApi~getWorkingById1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} templateId 
     * @param {module:api/DefaultApi~getWorkingById1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getWorkingById1(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getWorkingById1");
      }

      let pathParams = {
        'templateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates/{templateId}/working', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importCategories operation.
     * @callback module:api/DefaultApi~importCategoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/DefaultApi~importCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/categories/_import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSecrets operation.
     * @callback module:api/DefaultApi~importSecretsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/DefaultApi~importSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importSecrets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importTags operation.
     * @callback module:api/DefaultApi~importTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/DefaultApi~importTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importTags(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incrementAsync operation.
     * @callback module:api/DefaultApi~incrementAsyncCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/DefaultApi~incrementAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     */
    incrementAsync(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling incrementAsync");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/redis/incr/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexList operation.
     * @callback module:api/DefaultApi~indexListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~indexListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    indexList(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling indexList");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/indexlist/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the isPgDumpAvailable operation.
     * @callback module:api/DefaultApi~isPgDumpAvailableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~isPgDumpAvailableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    isPgDumpAvailable(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/maintenance/_pgDumpAvailable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueApiToken operation.
     * @callback module:api/DefaultApi~issueApiTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiTokenForm} opts.apiTokenForm 
     * @param {module:api/DefaultApi~issueApiTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueApiToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiTokenForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apitoken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the layoutGet operation.
     * @callback module:api/DefaultApi~layoutGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~layoutGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    layoutGet(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling layoutGet");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/portlet/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the layoutPost operation.
     * @callback module:api/DefaultApi~layoutPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~layoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    layoutPost(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling layoutPost");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/portlet/{params}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkTagsAndInode operation.
     * @callback module:api/DefaultApi~linkTagsAndInodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} nameOrId 
     * @param {String} inode 
     * @param {module:api/DefaultApi~linkTagsAndInodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    linkTagsAndInode(nameOrId, inode, callback) {
      let postBody = null;
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling linkTagsAndInode");
      }
      // verify the required parameter 'inode' is set
      if (inode === undefined || inode === null) {
        throw new Error("Missing the required parameter 'inode' when calling linkTagsAndInode");
      }

      let pathParams = {
        'nameOrId': nameOrId,
        'inode': inode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/tag/{nameOrId}/inode/{inode}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/DefaultApi~listCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: RestTag}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.siteId 
     * @param {module:api/DefaultApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: RestTag}>}
     */
    list(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'siteId': opts['siteId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = {'String': RestTag};
      return this.apiClient.callApi(
        '/v1/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list10 operation.
     * @callback module:api/DefaultApi~list10Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~list10Callback} callback The callback function, accepting three arguments: error, data, response
     */
    list10(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/system/ruleengine/actionlets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list11 operation.
     * @callback module:api/DefaultApi~list11Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~list11Callback} callback The callback function, accepting three arguments: error, data, response
     */
    list11(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/system/ruleengine/conditionlets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list12 operation.
     * @callback module:api/DefaultApi~list12Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {Number} opts.page 
     * @param {Number} opts.perPage  (default to 40)
     * @param {String} opts.orderby  (default to 'mod_date')
     * @param {String} opts.direction  (default to 'DESC')
     * @param {String} opts.host 
     * @param {Boolean} opts.archive 
     * @param {module:api/DefaultApi~list12Callback} callback The callback function, accepting three arguments: error, data, response
     */
    list12(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'orderby': opts['orderby'],
        'direction': opts['direction'],
        'host': opts['host'],
        'archive': opts['archive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list13 operation.
     * @callback module:api/DefaultApi~list13Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentInode 
     * @param {module:api/DefaultApi~list13Callback} callback The callback function, accepting three arguments: error, data, response
     */
    list13(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contentInode': opts['contentInode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list14 operation.
     * @callback module:api/DefaultApi~list14Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: Persona}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~list14Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: Persona}>}
     */
    list14(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling list14");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = {'String': Persona};
      return this.apiClient.callApi(
        '/personas/sites/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list2 operation.
     * @callback module:api/DefaultApi~list2Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: RestLanguage}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~list2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: RestLanguage}>}
     */
    list2(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = {'String': RestLanguage};
      return this.apiClient.callApi(
        '/v1/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list3 operation.
     * @callback module:api/DefaultApi~list3Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: RestPersona}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~list3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: RestPersona}>}
     */
    list3(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = {'String': RestPersona};
      return this.apiClient.callApi(
        '/v1/personas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list4 operation.
     * @callback module:api/DefaultApi~list4Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: RestRule}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~list4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: RestRule}>}
     */
    list4(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling list4");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = {'String': RestRule};
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list5 operation.
     * @callback module:api/DefaultApi~list5Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} ruleId 
     * @param {module:api/DefaultApi~list5Callback} callback The callback function, accepting three arguments: error, data, response
     */
    list5(siteId, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling list5");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling list5");
      }

      let pathParams = {
        'siteId': siteId,
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/rules/{ruleId}/conditionGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list6 operation.
     * @callback module:api/DefaultApi~list6Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} conditionId 
     * @param {module:api/DefaultApi~list6Callback} callback The callback function, accepting three arguments: error, data, response
     */
    list6(siteId, conditionId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling list6");
      }
      // verify the required parameter 'conditionId' is set
      if (conditionId === undefined || conditionId === null) {
        throw new Error("Missing the required parameter 'conditionId' when calling list6");
      }

      let pathParams = {
        'siteId': siteId,
        'conditionId': conditionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/conditions/{conditionId}/conditionValues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list7 operation.
     * @callback module:api/DefaultApi~list7Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~list7Callback} callback The callback function, accepting three arguments: error, data, response
     */
    list7(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appconfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list8 operation.
     * @callback module:api/DefaultApi~list8Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~list8Callback} callback The callback function, accepting three arguments: error, data, response
     */
    list8(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list9 operation.
     * @callback module:api/DefaultApi~list9Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} lang 
     * @param {String} rsrc 
     * @param {module:api/DefaultApi~list9Callback} callback The callback function, accepting three arguments: error, data, response
     */
    list9(lang, rsrc, callback) {
      let postBody = null;
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling list9");
      }
      // verify the required parameter 'rsrc' is set
      if (rsrc === undefined || rsrc === null) {
        throw new Error("Missing the required parameter 'rsrc' when calling list9");
      }

      let pathParams = {
        'lang': lang,
        'rsrc': rsrc
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/system/i18n/{lang}/{rsrc}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAvailableApps operation.
     * @callback module:api/DefaultApi~listAvailableAppsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {module:api/DefaultApi~listAvailableAppsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listAvailableApps(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadAssetsUnder operation.
     * @callback module:api/DefaultApi~loadAssetsUnderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sitename 
     * @param {module:api/DefaultApi~loadAssetsUnderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadAssetsUnder(sitename, callback) {
      let postBody = null;
      // verify the required parameter 'sitename' is set
      if (sitename === undefined || sitename === null) {
        throw new Error("Missing the required parameter 'sitename' when calling loadAssetsUnder");
      }

      let pathParams = {
        'sitename': sitename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/browsertree/sitename/{sitename}/uri', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadAssetsUnder1 operation.
     * @callback module:api/DefaultApi~loadAssetsUnder1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sitename 
     * @param {String} uri 
     * @param {module:api/DefaultApi~loadAssetsUnder1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    loadAssetsUnder1(sitename, uri, callback) {
      let postBody = null;
      // verify the required parameter 'sitename' is set
      if (sitename === undefined || sitename === null) {
        throw new Error("Missing the required parameter 'sitename' when calling loadAssetsUnder1");
      }
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling loadAssetsUnder1");
      }

      let pathParams = {
        'sitename': sitename,
        'uri': uri
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/browsertree/sitename/{sitename}/uri/{uri}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadById operation.
     * @callback module:api/DefaultApi~loadByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~loadByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadById(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling loadById");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/role/loadbyid/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadByName operation.
     * @callback module:api/DefaultApi~loadByNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~loadByNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadByName(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling loadByName");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/role/loadbyname/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadChildren operation.
     * @callback module:api/DefaultApi~loadChildrenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~loadChildrenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadChildren(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling loadChildren");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/role/loadchildren/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadEnvironments operation.
     * @callback module:api/DefaultApi~loadEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~loadEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadEnvironments(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling loadEnvironments");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environment/loadenvironments/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadFolderAndSubFoldersByPath operation.
     * @callback module:api/DefaultApi~loadFolderAndSubFoldersByPathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} path 
     * @param {module:api/DefaultApi~loadFolderAndSubFoldersByPathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadFolderAndSubFoldersByPath(siteId, path, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling loadFolderAndSubFoldersByPath");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling loadFolderAndSubFoldersByPath");
      }

      let pathParams = {
        'siteId': siteId,
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/folder/siteId/{siteId}/path/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadFolderByURI operation.
     * @callback module:api/DefaultApi~loadFolderByURICallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteName 
     * @param {String} uri 
     * @param {module:api/DefaultApi~loadFolderByURICallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadFolderByURI(siteName, uri, callback) {
      let postBody = null;
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling loadFolderByURI");
      }
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling loadFolderByURI");
      }

      let pathParams = {
        'siteName': siteName,
        'uri': uri
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/folder/sitename/{siteName}/uri/{uri}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadJson operation.
     * @callback module:api/DefaultApi~loadJsonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~loadJsonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadJson(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling loadJson");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restexample/test/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadRoleByRoleId operation.
     * @callback module:api/DefaultApi~loadRoleByRoleIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} roleid 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.loadChildrenRoles  (default to true)
     * @param {module:api/DefaultApi~loadRoleByRoleIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadRoleByRoleId(roleid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling loadRoleByRoleId");
      }

      let pathParams = {
        'roleid': roleid
      };
      let queryParams = {
        'loadChildrenRoles': opts['loadChildrenRoles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/roles/{roleid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadRootRoles operation.
     * @callback module:api/DefaultApi~loadRootRolesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.loadChildrenRoles  (default to true)
     * @param {module:api/DefaultApi~loadRootRolesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadRootRoles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'loadChildrenRoles': opts['loadChildrenRoles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadUsersAndRolesByRoleId operation.
     * @callback module:api/DefaultApi~loadUsersAndRolesByRoleIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} roleid 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.roleHierarchyForAssign  (default to false)
     * @param {String} opts.name 
     * @param {module:api/DefaultApi~loadUsersAndRolesByRoleIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadUsersAndRolesByRoleId(roleid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling loadUsersAndRolesByRoleId");
      }

      let pathParams = {
        'roleid': roleid
      };
      let queryParams = {
        'roleHierarchyForAssign': opts['roleHierarchyForAssign'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/roles/{roleid}/rolehierarchyanduserroles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginAs operation.
     * @callback module:api/DefaultApi~loginAsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginAsForm} opts.loginAsForm 
     * @param {module:api/DefaultApi~loginAsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginAs(opts, callback) {
      opts = opts || {};
      let postBody = opts['loginAsForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/loginas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginAsData operation.
     * @callback module:api/DefaultApi~loginAsDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:api/DefaultApi~loginAsDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginAsData(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/loginAsData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginForm operation.
     * @callback module:api/DefaultApi~loginFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/I18NForm} opts.i18NForm 
     * @param {module:api/DefaultApi~loginFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginForm(opts, callback) {
      opts = opts || {};
      let postBody = opts['i18NForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/loginform', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/DefaultApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutAs operation.
     * @callback module:api/DefaultApi~logoutAsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~logoutAsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logoutAs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/logoutas', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutGet operation.
     * @callback module:api/DefaultApi~logoutGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idpConfigId 
     * @param {module:api/DefaultApi~logoutGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logoutGet(idpConfigId, callback) {
      let postBody = null;
      // verify the required parameter 'idpConfigId' is set
      if (idpConfigId === undefined || idpConfigId === null) {
        throw new Error("Missing the required parameter 'idpConfigId' when calling logoutGet");
      }

      let pathParams = {
        'idpConfigId': idpConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html', 'application/xhtml+xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/dotsaml/logout/{idpConfigId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutPost operation.
     * @callback module:api/DefaultApi~logoutPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idpConfigId 
     * @param {module:api/DefaultApi~logoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logoutPost(idpConfigId, callback) {
      let postBody = null;
      // verify the required parameter 'idpConfigId' is set
      if (idpConfigId === undefined || idpConfigId === null) {
        throw new Error("Missing the required parameter 'idpConfigId' when calling logoutPost");
      }

      let pathParams = {
        'idpConfigId': idpConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html', 'application/xhtml+xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/dotsaml/logout/{idpConfigId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the makeDefault operation.
     * @callback module:api/DefaultApi~makeDefaultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~makeDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    makeDefault(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling makeDefault");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/{siteId}/_makedefault', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the makeDefault1 operation.
     * @callback module:api/DefaultApi~makeDefault1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} language 
     * @param {Object} opts Optional parameters
     * @param {module:model/MakeDefaultLangForm} opts.makeDefaultLangForm 
     * @param {module:api/DefaultApi~makeDefault1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    makeDefault1(language, opts, callback) {
      opts = opts || {};
      let postBody = opts['makeDefaultLangForm'];
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling makeDefault1");
      }

      let pathParams = {
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/languages/{language}/_makedefault', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markAsRead operation.
     * @callback module:api/DefaultApi~markAsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~markAsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    markAsRead(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/notification/markAsRead', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadata operation.
     * @callback module:api/DefaultApi~metadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idpConfigId 
     * @param {module:api/DefaultApi~metadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadata(idpConfigId, callback) {
      let postBody = null;
      // verify the required parameter 'idpConfigId' is set
      if (idpConfigId === undefined || idpConfigId === null) {
        throw new Error("Missing the required parameter 'idpConfigId' when calling metadata");
      }

      let pathParams = {
        'idpConfigId': idpConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/dotsaml/metadata/{idpConfigId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modIndex operation.
     * @callback module:api/DefaultApi~modIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} indexName 
     * @param {Object} opts Optional parameters
     * @param {String} opts.action 
     * @param {module:api/DefaultApi~modIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    modIndex(indexName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling modIndex");
      }

      let pathParams = {
        'indexName': indexName
      };
      let queryParams = {
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/{indexName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveFields operation.
     * @callback module:api/DefaultApi~moveFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeIdOrVarName 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/DefaultApi~moveFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveFields(typeIdOrVarName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'typeIdOrVarName' is set
      if (typeIdOrVarName === undefined || typeIdOrVarName === null) {
        throw new Error("Missing the required parameter 'typeIdOrVarName' when calling moveFields");
      }

      let pathParams = {
        'typeIdOrVarName': typeIdOrVarName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/contenttype/{typeIdOrVarName}/fields/move', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the openIndex operation.
     * @callback module:api/DefaultApi~openIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~openIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    openIndex(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling openIndex");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/open/{params}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optimizeIndices operation.
     * @callback module:api/DefaultApi~optimizeIndicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~optimizeIndicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    optimizeIndices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/optimize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchMultipart operation.
     * @callback module:api/DefaultApi~patchMultipartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} folder 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/DefaultApi~patchMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchMultipart(folder, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling patchMultipart");
      }

      let pathParams = {
        'folder': folder
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/{folder}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchMultipart1 operation.
     * @callback module:api/DefaultApi~patchMultipart1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pathParam 
     * @param {String} folder 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/DefaultApi~patchMultipart1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    patchMultipart1(pathParam, folder, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pathParam' is set
      if (pathParam === undefined || pathParam === null) {
        throw new Error("Missing the required parameter 'pathParam' when calling patchMultipart1");
      }
      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling patchMultipart1");
      }

      let pathParams = {
        'pathParam': pathParam,
        'folder': folder
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/{folder}/{pathParam}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personalizePageContainers operation.
     * @callback module:api/DefaultApi~personalizePageContainersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/PersonalizationPersonaPageForm} opts.personalizationPersonaPageForm 
     * @param {module:api/DefaultApi~personalizePageContainersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    personalizePageContainers(opts, callback) {
      opts = opts || {};
      let postBody = opts['personalizationPersonaPageForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/personalization/pagepersonas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personalizePageContainers1 operation.
     * @callback module:api/DefaultApi~personalizePageContainers1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pageId 
     * @param {String} personalization 
     * @param {module:api/DefaultApi~personalizePageContainers1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    personalizePageContainers1(pageId, personalization, callback) {
      let postBody = null;
      // verify the required parameter 'pageId' is set
      if (pageId === undefined || pageId === null) {
        throw new Error("Missing the required parameter 'pageId' when calling personalizePageContainers1");
      }
      // verify the required parameter 'personalization' is set
      if (personalization === undefined || personalization === null) {
        throw new Error("Missing the required parameter 'personalization' when calling personalizePageContainers1");
      }

      let pathParams = {
        'pageId': pageId,
        'personalization': personalization
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/personalization/pagepersonas/page/{pageId}/personalization/{personalization}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pickLicense operation.
     * @callback module:api/DefaultApi~pickLicenseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~pickLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pickLicense(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling pickLicense");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/license/pick/{params}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ping operation.
     * @callback module:api/DefaultApi~pingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~pingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ping(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/redis/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMultipart operation.
     * @callback module:api/DefaultApi~postMultipartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} folder 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/DefaultApi~postMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postMultipart(folder, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling postMultipart");
      }

      let pathParams = {
        'folder': folder
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/{folder}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMultipart1 operation.
     * @callback module:api/DefaultApi~postMultipart1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pathParam 
     * @param {String} folder 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/DefaultApi~postMultipart1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postMultipart1(pathParam, folder, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pathParam' is set
      if (pathParam === undefined || pathParam === null) {
        throw new Error("Missing the required parameter 'pathParam' when calling postMultipart1");
      }
      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling postMultipart1");
      }

      let pathParams = {
        'pathParam': pathParam,
        'folder': folder
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/{folder}/{pathParam}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processBundle operation.
     * @callback module:api/DefaultApi~processBundleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bundle 
     * @param {module:api/DefaultApi~processBundleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    processBundle(bundle, callback) {
      let postBody = null;
      // verify the required parameter 'bundle' is set
      if (bundle === undefined || bundle === null) {
        throw new Error("Missing the required parameter 'bundle' when calling processBundle");
      }

      let pathParams = {
        'bundle': bundle
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/osgi/_processExports/{bundle}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processLogin operation.
     * @callback module:api/DefaultApi~processLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idpConfigId 
     * @param {module:api/DefaultApi~processLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    processLogin(idpConfigId, callback) {
      let postBody = null;
      // verify the required parameter 'idpConfigId' is set
      if (idpConfigId === undefined || idpConfigId === null) {
        throw new Error("Missing the required parameter 'idpConfigId' when calling processLogin");
      }

      let pathParams = {
        'idpConfigId': idpConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/dotsaml/login/{idpConfigId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publish operation.
     * @callback module:api/DefaultApi~publishCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {String} opts.callback 
     * @param {Boolean} opts.FORCE_PUSH 
     * @param {module:api/DefaultApi~publishCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publish(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'callback': opts['callback'],
        'FORCE_PUSH': opts['FORCE_PUSH']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundlePublisher/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publish1 operation.
     * @callback module:api/DefaultApi~publish1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.containerId 
     * @param {module:api/DefaultApi~publish1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    publish1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'containerId': opts['containerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/_publish', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publish2 operation.
     * @callback module:api/DefaultApi~publish2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~publish2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    publish2(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates/_publish', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishSite operation.
     * @callback module:api/DefaultApi~publishSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~publishSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publishSite(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling publishSite");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/{siteId}/_publish', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullRelated operation.
     * @callback module:api/DefaultApi~pullRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntityView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pull Related Content
     * @param {Object} opts Optional parameters
     * @param {module:model/PullRelatedForm} opts.pullRelatedForm 
     * @param {module:api/DefaultApi~pullRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntityView}
     */
    pullRelated(opts, callback) {
      opts = opts || {};
      let postBody = opts['pullRelatedForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseEntityView;
      return this.apiClient.callApi(
        '/v1/content/related', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putMultipart operation.
     * @callback module:api/DefaultApi~putMultipartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} folder 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/DefaultApi~putMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putMultipart(folder, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling putMultipart");
      }

      let pathParams = {
        'folder': folder
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/{folder}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putMultipart1 operation.
     * @callback module:api/DefaultApi~putMultipart1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pathParam 
     * @param {String} folder 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/DefaultApi~putMultipart1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putMultipart1(pathParam, folder, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pathParam' is set
      if (pathParam === undefined || pathParam === null) {
        throw new Error("Missing the required parameter 'pathParam' when calling putMultipart1");
      }
      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling putMultipart1");
      }

      let pathParams = {
        'pathParam': pathParam,
        'folder': folder
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vtl/{folder}/{pathParam}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putZipFile operation.
     * @callback module:api/DefaultApi~putZipFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {Object} opts Optional parameters
     * @param {module:model/FormDataContentDisposition} opts.file 
     * @param {String} opts._return 
     * @param {module:api/DefaultApi~putZipFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putZipFile(params, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling putZipFile");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'return': opts['_return']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/license/upload/{params}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regenerateKey operation.
     * @callback module:api/DefaultApi~regenerateKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~regenerateKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    regenerateKey(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/config/regenerateKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remove operation.
     * @callback module:api/DefaultApi~removeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} ruleId 
     * @param {module:api/DefaultApi~removeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    remove(siteId, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling remove");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling remove");
      }

      let pathParams = {
        'siteId': siteId,
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/rules/{ruleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remove1 operation.
     * @callback module:api/DefaultApi~remove1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} actionId 
     * @param {module:api/DefaultApi~remove1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    remove1(siteId, actionId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling remove1");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling remove1");
      }

      let pathParams = {
        'siteId': siteId,
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/actions/{actionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remove2 operation.
     * @callback module:api/DefaultApi~remove2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} ruleId 
     * @param {String} conditionGroupId 
     * @param {module:api/DefaultApi~remove2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    remove2(siteId, ruleId, conditionGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling remove2");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling remove2");
      }
      // verify the required parameter 'conditionGroupId' is set
      if (conditionGroupId === undefined || conditionGroupId === null) {
        throw new Error("Missing the required parameter 'conditionGroupId' when calling remove2");
      }

      let pathParams = {
        'siteId': siteId,
        'ruleId': ruleId,
        'conditionGroupId': conditionGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/rules/{ruleId}/conditionGroups/{conditionGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remove3 operation.
     * @callback module:api/DefaultApi~remove3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} conditionId 
     * @param {module:api/DefaultApi~remove3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    remove3(siteId, conditionId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling remove3");
      }
      // verify the required parameter 'conditionId' is set
      if (conditionId === undefined || conditionId === null) {
        throw new Error("Missing the required parameter 'conditionId' when calling remove3");
      }

      let pathParams = {
        'siteId': siteId,
        'conditionId': conditionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/conditions/{conditionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remove4 operation.
     * @callback module:api/DefaultApi~remove4Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} conditionId 
     * @param {String} valueId 
     * @param {module:api/DefaultApi~remove4Callback} callback The callback function, accepting three arguments: error, data, response
     */
    remove4(siteId, conditionId, valueId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling remove4");
      }
      // verify the required parameter 'conditionId' is set
      if (conditionId === undefined || conditionId === null) {
        throw new Error("Missing the required parameter 'conditionId' when calling remove4");
      }
      // verify the required parameter 'valueId' is set
      if (valueId === undefined || valueId === null) {
        throw new Error("Missing the required parameter 'valueId' when calling remove4");
      }

      let pathParams = {
        'siteId': siteId,
        'conditionId': conditionId,
        'valueId': valueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/conditions/{conditionId}/conditionValues/{valueId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeContentletFromContainer operation.
     * @callback module:api/DefaultApi~removeContentletFromContainerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} containerId 
     * @param {String} contentletId 
     * @param {String} uid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.order 
     * @param {module:api/DefaultApi~removeContentletFromContainerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeContentletFromContainer(containerId, contentletId, uid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling removeContentletFromContainer");
      }
      // verify the required parameter 'contentletId' is set
      if (contentletId === undefined || contentletId === null) {
        throw new Error("Missing the required parameter 'contentletId' when calling removeContentletFromContainer");
      }
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling removeContentletFromContainer");
      }

      let pathParams = {
        'containerId': containerId,
        'contentletId': contentletId,
        'uid': uid
      };
      let queryParams = {
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/delete/{containerId}/content/{contentletId}/uid/{uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFromCluster operation.
     * @callback module:api/DefaultApi~removeFromClusterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~removeFromClusterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeFromCluster(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling removeFromCluster");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cluster/remove/{params}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestLicense operation.
     * @callback module:api/DefaultApi~requestLicenseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~requestLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    requestLicense(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling requestLicense");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/license/requestCode/{params}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetLicense operation.
     * @callback module:api/DefaultApi~resetLicenseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/DefaultApi~resetLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetLicense(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling resetLicense");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/license/resetLicense/{params}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPassword operation.
     * @callback module:api/DefaultApi~resetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetPasswordForm} opts.resetPasswordForm 
     * @param {module:api/DefaultApi~resetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetPassword(opts, callback) {
      opts = opts || {};
      let postBody = opts['resetPasswordForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/changePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeApiToken operation.
     * @callback module:api/DefaultApi~revokeApiTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tokenId 
     * @param {module:api/DefaultApi~revokeApiTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeApiToken(tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling revokeApiToken");
      }

      let pathParams = {
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apitoken/{tokenId}/revoke', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeUserToken operation.
     * @callback module:api/DefaultApi~revokeUserTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userid 
     * @param {module:api/DefaultApi~revokeUserTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeUserToken(userid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling revokeUserToken");
      }

      let pathParams = {
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apitoken/users/{userid}/revoke', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeUsersToken operation.
     * @callback module:api/DefaultApi~revokeUsersTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~revokeUsersTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeUsersToken(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apitoken/users/revoke', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the save operation.
     * @callback module:api/DefaultApi~saveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryEditForm} opts.categoryEditForm 
     * @param {module:api/DefaultApi~saveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    save(opts, callback) {
      opts = opts || {};
      let postBody = opts['categoryEditForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/categories/_sort', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the save1 operation.
     * @callback module:api/DefaultApi~save1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryForm} opts.categoryForm 
     * @param {module:api/DefaultApi~save1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryView}
     */
    save1(opts, callback) {
      opts = opts || {};
      let postBody = opts['categoryForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = CategoryView;
      return this.apiClient.callApi(
        '/v1/categories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the save2 operation.
     * @callback module:api/DefaultApi~save2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateForm} opts.templateForm 
     * @param {module:api/DefaultApi~save2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    save2(opts, callback) {
      opts = opts || {};
      let postBody = opts['templateForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAndPublish operation.
     * @callback module:api/DefaultApi~saveAndPublishCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateForm} opts.templateForm 
     * @param {module:api/DefaultApi~saveAndPublishCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveAndPublish(opts, callback) {
      opts = opts || {};
      let postBody = opts['templateForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates/_savepublish', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCompanyAuthTypeInfo operation.
     * @callback module:api/DefaultApi~saveCompanyAuthTypeInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.user 
     * @param {String} opts.password 
     * @param {String} opts.authType 
     * @param {module:api/DefaultApi~saveCompanyAuthTypeInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveCompanyAuthTypeInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'user': opts['user'],
        'password': opts['password'],
        'authType': opts['authType']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/config/saveCompanyAuthTypeInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCompanyBasicInfo operation.
     * @callback module:api/DefaultApi~saveCompanyBasicInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.user 
     * @param {String} opts.password 
     * @param {String} opts.portalURL 
     * @param {String} opts.mx 
     * @param {String} opts.emailAddress 
     * @param {String} opts.size 
     * @param {String} opts.type 
     * @param {String} opts.street 
     * @param {String} opts.homeURL 
     * @param {String} opts.city 
     * @param {String} opts.state 
     * @param {module:api/DefaultApi~saveCompanyBasicInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveCompanyBasicInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'user': opts['user'],
        'password': opts['password'],
        'portalURL': opts['portalURL'],
        'mx': opts['mx'],
        'emailAddress': opts['emailAddress'],
        'size': opts['size'],
        'type': opts['type'],
        'street': opts['street'],
        'homeURL': opts['homeURL'],
        'city': opts['city'],
        'state': opts['state']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/config/saveCompanyBasicInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCompanyLocaleInfo operation.
     * @callback module:api/DefaultApi~saveCompanyLocaleInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.user 
     * @param {String} opts.password 
     * @param {String} opts.languageId 
     * @param {String} opts.timeZoneId 
     * @param {module:api/DefaultApi~saveCompanyLocaleInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveCompanyLocaleInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'user': opts['user'],
        'password': opts['password'],
        'languageId': opts['languageId'],
        'timeZoneId': opts['timeZoneId']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/config/saveCompanyLocaleInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCompanyLogo operation.
     * @callback module:api/DefaultApi~saveCompanyLogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.user 
     * @param {String} opts.password 
     * @param {module:model/FormDataContentDisposition} opts.logoFile 
     * @param {module:api/DefaultApi~saveCompanyLogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveCompanyLogo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'user': opts['user'],
        'password': opts['password'],
        'logoFile': opts['logoFile']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/config/saveCompanyLogo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveDraft operation.
     * @callback module:api/DefaultApi~saveDraftCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateForm} opts.templateForm 
     * @param {module:api/DefaultApi~saveDraftCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveDraft(opts, callback) {
      opts = opts || {};
      let postBody = opts['templateForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates/draft', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveFromForm operation.
     * @callback module:api/DefaultApi~saveFromFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/FilterDescriptorForm} opts.filterDescriptorForm 
     * @param {module:api/DefaultApi~saveFromFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveFromForm(opts, callback) {
      opts = opts || {};
      let postBody = opts['filterDescriptorForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/pushpublish/filters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveFromLanguageTag operation.
     * @callback module:api/DefaultApi~saveFromLanguageTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} languageTag 
     * @param {module:api/DefaultApi~saveFromLanguageTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveFromLanguageTag(languageTag, callback) {
      let postBody = null;
      // verify the required parameter 'languageTag' is set
      if (languageTag === undefined || languageTag === null) {
        throw new Error("Missing the required parameter 'languageTag' when calling saveFromLanguageTag");
      }

      let pathParams = {
        'languageTag': languageTag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/languages/{languageTag}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveLanguage operation.
     * @callback module:api/DefaultApi~saveLanguageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/LanguageForm} opts.languageForm 
     * @param {module:api/DefaultApi~saveLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveLanguage(opts, callback) {
      opts = opts || {};
      let postBody = opts['languageForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/languages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveNew operation.
     * @callback module:api/DefaultApi~saveNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryForm} opts.categoryForm 
     * @param {module:api/DefaultApi~saveNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryView}
     */
    saveNew(opts, callback) {
      opts = opts || {};
      let postBody = opts['categoryForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = CategoryView;
      return this.apiClient.callApi(
        '/v1/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveNew1 operation.
     * @callback module:api/DefaultApi~saveNew1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ContainerForm} opts.containerForm 
     * @param {module:api/DefaultApi~saveNew1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    saveNew1(opts, callback) {
      opts = opts || {};
      let postBody = opts['containerForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveNew2 operation.
     * @callback module:api/DefaultApi~saveNew2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateForm} opts.templateForm 
     * @param {module:api/DefaultApi~saveNew2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    saveNew2(opts, callback) {
      opts = opts || {};
      let postBody = opts['templateForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveRoleLayouts operation.
     * @callback module:api/DefaultApi~saveRoleLayoutsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleLayoutForm} opts.roleLayoutForm 
     * @param {module:api/DefaultApi~saveRoleLayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveRoleLayouts(opts, callback) {
      opts = opts || {};
      let postBody = opts['roleLayoutForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/roles/layouts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSiteVariable operation.
     * @callback module:api/DefaultApi~saveSiteVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseHostVariableEntityView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a Site Variable
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteVariableForm} opts.siteVariableForm 
     * @param {module:api/DefaultApi~saveSiteVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseHostVariableEntityView}
     */
    saveSiteVariable(opts, callback) {
      opts = opts || {};
      let postBody = opts['siteVariableForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseHostVariableEntityView;
      return this.apiClient.callApi(
        '/v1/site/variable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveTest operation.
     * @callback module:api/DefaultApi~saveTestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.user 
     * @param {String} opts.password 
     * @param {String} opts.param1 
     * @param {String} opts.param2 
     * @param {String} opts.type 
     * @param {String} opts.callback 
     * @param {module:api/DefaultApi~saveTestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveTest(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'user': opts['user'],
        'password': opts['password'],
        'param1': opts['param1'],
        'param2': opts['param2'],
        'type': opts['type'],
        'callback': opts['callback']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/testResource/testPost', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search1 operation.
     * @callback module:api/DefaultApi~search1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.depth 
     * @param {Boolean} opts.live 
     * @param {Boolean} opts.allCategoriesInfo 
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~search1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    search1(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'depth': opts['depth'],
        'live': opts['live'],
        'allCategoriesInfo': opts['allCategoriesInfo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/es/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPost operation.
     * @callback module:api/DefaultApi~searchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.depth 
     * @param {Boolean} opts.live 
     * @param {Boolean} opts.allCategoriesInfo 
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~searchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'depth': opts['depth'],
        'live': opts['live'],
        'allCategoriesInfo': opts['allCategoriesInfo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/es/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRaw operation.
     * @callback module:api/DefaultApi~searchRawCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~searchRawCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchRaw(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/es/raw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRawGet operation.
     * @callback module:api/DefaultApi~searchRawGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~searchRawGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchRawGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/es/raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRoles operation.
     * @callback module:api/DefaultApi~searchRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntitySmallRoleView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Roles
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchName Value to filter by role name (default to '')
     * @param {String} opts.searchKey Value to filter by role key (default to '')
     * @param {String} opts.roleId Value for specific role id (default to '')
     * @param {Number} opts.start Offset on pagination (default to 0)
     * @param {Number} opts.count Size on pagination (default to 20)
     * @param {Boolean} opts.includeUserRoles Set false if do not want to include user rules (default to true)
     * @param {Boolean} opts.includeWorkflowRoles Set to true if want to include the workflow roles (default to false)
     * @param {module:api/DefaultApi~searchRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntitySmallRoleView}
     */
    searchRoles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchName': opts['searchName'],
        'searchKey': opts['searchKey'],
        'roleId': opts['roleId'],
        'start': opts['start'],
        'count': opts['count'],
        'includeUserRoles': opts['includeUserRoles'],
        'includeWorkflowRoles': opts['includeWorkflowRoles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseEntitySmallRoleView;
      return this.apiClient.callApi(
        '/v1/roles/_search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selectFolder operation.
     * @callback module:api/DefaultApi~selectFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/OpenFolderForm} opts.openFolderForm 
     * @param {module:api/DefaultApi~selectFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selectFolder(opts, callback) {
      opts = opts || {};
      let postBody = opts['openFolderForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/browser/selectedfolder', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selectFolder1 operation.
     * @callback module:api/DefaultApi~selectFolder1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~selectFolder1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selectFolder1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling selectFolder1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/folder/{id}/file-browser-selected', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the self operation.
     * @callback module:api/DefaultApi~selfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestPersona} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} id 
     * @param {module:api/DefaultApi~selfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestPersona}
     */
    self(siteId, id, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling self");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling self");
      }

      let pathParams = {
        'siteId': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = RestPersona;
      return this.apiClient.callApi(
        '/v1/personas/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the self1 operation.
     * @callback module:api/DefaultApi~self1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RestRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} ruleId 
     * @param {module:api/DefaultApi~self1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestRule}
     */
    self1(siteId, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling self1");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling self1");
      }

      let pathParams = {
        'siteId': siteId,
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = RestRule;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/rules/{ruleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the self2 operation.
     * @callback module:api/DefaultApi~self2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RestRuleAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} actionId 
     * @param {module:api/DefaultApi~self2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestRuleAction}
     */
    self2(siteId, actionId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling self2");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling self2");
      }

      let pathParams = {
        'siteId': siteId,
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = RestRuleAction;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/actions/{actionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the self3 operation.
     * @callback module:api/DefaultApi~self3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RestConditionGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} ruleId 
     * @param {String} groupId 
     * @param {module:api/DefaultApi~self3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestConditionGroup}
     */
    self3(siteId, ruleId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling self3");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling self3");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling self3");
      }

      let pathParams = {
        'siteId': siteId,
        'ruleId': ruleId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestConditionGroup;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/rules/{ruleId}/conditionGroups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the self4 operation.
     * @callback module:api/DefaultApi~self4Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} conditionId 
     * @param {module:api/DefaultApi~self4Callback} callback The callback function, accepting three arguments: error, data, response
     */
    self4(siteId, conditionId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling self4");
      }
      // verify the required parameter 'conditionId' is set
      if (conditionId === undefined || conditionId === null) {
        throw new Error("Missing the required parameter 'conditionId' when calling self4");
      }

      let pathParams = {
        'siteId': siteId,
        'conditionId': conditionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/conditions/{conditionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the self5 operation.
     * @callback module:api/DefaultApi~self5Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} conditionId 
     * @param {String} valueId 
     * @param {module:api/DefaultApi~self5Callback} callback The callback function, accepting three arguments: error, data, response
     */
    self5(siteId, conditionId, valueId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling self5");
      }
      // verify the required parameter 'conditionId' is set
      if (conditionId === undefined || conditionId === null) {
        throw new Error("Missing the required parameter 'conditionId' when calling self5");
      }
      // verify the required parameter 'valueId' is set
      if (valueId === undefined || valueId === null) {
        throw new Error("Missing the required parameter 'valueId' when calling self5");
      }

      let pathParams = {
        'siteId': siteId,
        'conditionId': conditionId,
        'valueId': valueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/conditions/{conditionId}/conditionValues/{valueId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the self6 operation.
     * @callback module:api/DefaultApi~self6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RestUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~self6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestUser}
     */
    self6(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = RestUser;
      return this.apiClient.callApi(
        '/v1/users/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the set operation.
     * @callback module:api/DefaultApi~setCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: String}>} opts.requestBody 
     * @param {module:api/DefaultApi~setCallback} callback The callback function, accepting three arguments: error, data, response
     */
    set(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/configuration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the set1 operation.
     * @callback module:api/DefaultApi~set1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SetForm} opts.setForm 
     * @param {module:api/DefaultApi~set1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    set1(opts, callback) {
      opts = opts || {};
      let postBody = opts['setForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/redis', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setHash operation.
     * @callback module:api/DefaultApi~setHashCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SetHashForm} opts.setHashForm 
     * @param {module:api/DefaultApi~setHashCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setHash(opts, callback) {
      opts = opts || {};
      let postBody = opts['setHashForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/redis/hash', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showObject operation.
     * @callback module:api/DefaultApi~showObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} provider 
     * @param {String} group 
     * @param {String} id 
     * @param {module:api/DefaultApi~showObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    showObject(provider, group, id, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling showObject");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling showObject");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showObject");
      }

      let pathParams = {
        'provider': provider,
        'group': group,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/caches/provider/{provider}/object/{group}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showObjects operation.
     * @callback module:api/DefaultApi~showObjectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} provider 
     * @param {String} group 
     * @param {module:api/DefaultApi~showObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    showObjects(provider, group, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling showObjects");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling showObjects");
      }

      let pathParams = {
        'provider': provider,
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/caches/provider/{provider}/objects/{group}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showProviders operation.
     * @callback module:api/DefaultApi~showProvidersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} group 
     * @param {module:api/DefaultApi~showProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    showProviders(group, callback) {
      let postBody = null;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling showProviders");
      }

      let pathParams = {
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/caches/providers/{group}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showProviders1 operation.
     * @callback module:api/DefaultApi~showProviders1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} provider 
     * @param {String} group 
     * @param {module:api/DefaultApi~showProviders1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    showProviders1(provider, group, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling showProviders1");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling showProviders1");
      }

      let pathParams = {
        'provider': provider,
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/caches/provider/{provider}/{group}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shutdown operation.
     * @callback module:api/DefaultApi~shutdownCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~shutdownCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shutdown(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/maintenance/_shutdown', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sites operation.
     * @callback module:api/DefaultApi~sitesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {Boolean} opts.archive 
     * @param {Boolean} opts.live 
     * @param {Boolean} opts.system 
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:api/DefaultApi~sitesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sites(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'archive': opts['archive'],
        'live': opts['live'],
        'system': opts['system'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startReindex operation.
     * @callback module:api/DefaultApi~startReindexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.shards 
     * @param {String} opts.contentType  (default to 'DOTALL')
     * @param {module:api/DefaultApi~startReindexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startReindex(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'shards': opts['shards'],
        'contentType': opts['contentType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/reindex', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statusCheck operation.
     * @callback module:api/DefaultApi~statusCheckCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~statusCheckCallback} callback The callback function, accepting three arguments: error, data, response
     */
    statusCheck(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/system-status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopReindexation operation.
     * @callback module:api/DefaultApi~stopReindexationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts._switch  (default to true)
     * @param {module:api/DefaultApi~stopReindexationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopReindexation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'switch': opts['_switch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/esindex/reindex', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the switchSite operation.
     * @callback module:api/DefaultApi~switchSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~switchSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    switchSite(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/switch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the switchSite1 operation.
     * @callback module:api/DefaultApi~switchSite1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~switchSite1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    switchSite1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchSite1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/switch/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testCluster operation.
     * @callback module:api/DefaultApi~testClusterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~testClusterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    testCluster(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cluster/test', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unarchive operation.
     * @callback module:api/DefaultApi~unarchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.containerId 
     * @param {module:api/DefaultApi~unarchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unarchive(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'containerId': opts['containerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/_unarchive', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unarchive1 operation.
     * @callback module:api/DefaultApi~unarchive1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~unarchive1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    unarchive1(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates/_unarchive', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unarchiveSite operation.
     * @callback module:api/DefaultApi~unarchiveSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~unarchiveSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unarchiveSite(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling unarchiveSite");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/{siteId}/_unarchive', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unpublish operation.
     * @callback module:api/DefaultApi~unpublishCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.containerId 
     * @param {module:api/DefaultApi~unpublishCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unpublish(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'containerId': opts['containerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers/_unpublish', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unpublish1 operation.
     * @callback module:api/DefaultApi~unpublish1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~unpublish1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    unpublish1(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/templates/_unpublish', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unpublishSite operation.
     * @callback module:api/DefaultApi~unpublishSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~unpublishSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unpublishSite(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling unpublishSite");
      }

      let pathParams = {
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site/{siteId}/_unpublish', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/DefaultApi~updateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ContainerForm} opts.containerForm 
     * @param {module:api/DefaultApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    update(opts, callback) {
      opts = opts || {};
      let postBody = opts['containerForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/containers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update2 operation.
     * @callback module:api/DefaultApi~update2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RestRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} ruleId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestRule} opts.restRule 
     * @param {module:api/DefaultApi~update2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestRule}
     */
    update2(siteId, ruleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['restRule'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling update2");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling update2");
      }

      let pathParams = {
        'siteId': siteId,
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = RestRule;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/rules/{ruleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update3 operation.
     * @callback module:api/DefaultApi~update3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RestRuleAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} actionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestRuleAction} opts.restRuleAction 
     * @param {module:api/DefaultApi~update3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestRuleAction}
     */
    update3(siteId, actionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['restRuleAction'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling update3");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling update3");
      }

      let pathParams = {
        'siteId': siteId,
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestRuleAction;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/actions/{actionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update4 operation.
     * @callback module:api/DefaultApi~update4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RestConditionGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} ruleId 
     * @param {String} groupId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestConditionGroup} opts.restConditionGroup 
     * @param {module:api/DefaultApi~update4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestConditionGroup}
     */
    update4(siteId, ruleId, groupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['restConditionGroup'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling update4");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling update4");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling update4");
      }

      let pathParams = {
        'siteId': siteId,
        'ruleId': ruleId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestConditionGroup;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/rules/{ruleId}/conditionGroups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update5 operation.
     * @callback module:api/DefaultApi~update5Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RestCondition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} conditionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestCondition} opts.restCondition 
     * @param {module:api/DefaultApi~update5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestCondition}
     */
    update5(siteId, conditionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['restCondition'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling update5");
      }
      // verify the required parameter 'conditionId' is set
      if (conditionId === undefined || conditionId === null) {
        throw new Error("Missing the required parameter 'conditionId' when calling update5");
      }

      let pathParams = {
        'siteId': siteId,
        'conditionId': conditionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestCondition;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/conditions/{conditionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update6 operation.
     * @callback module:api/DefaultApi~update6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RestConditionValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} conditionId 
     * @param {String} valueId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestConditionValue} opts.restConditionValue 
     * @param {module:api/DefaultApi~update6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestConditionValue}
     */
    update6(siteId, conditionId, valueId, opts, callback) {
      opts = opts || {};
      let postBody = opts['restConditionValue'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling update6");
      }
      // verify the required parameter 'conditionId' is set
      if (conditionId === undefined || conditionId === null) {
        throw new Error("Missing the required parameter 'conditionId' when calling update6");
      }
      // verify the required parameter 'valueId' is set
      if (valueId === undefined || valueId === null) {
        throw new Error("Missing the required parameter 'valueId' when calling update6");
      }

      let pathParams = {
        'siteId': siteId,
        'conditionId': conditionId,
        'valueId': valueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestConditionValue;
      return this.apiClient.callApi(
        '/v1/sites/{siteId}/ruleengine/conditions/{conditionId}/conditionValues/{valueId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update7 operation.
     * @callback module:api/DefaultApi~update7Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateUserForm} opts.updateUserForm 
     * @param {module:api/DefaultApi~update7Callback} callback The callback function, accepting three arguments: error, data, response
     */
    update7(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateUserForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/current', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppIndividualSecret operation.
     * @callback module:api/DefaultApi~updateAppIndividualSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {String} siteId 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/DefaultApi~updateAppIndividualSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAppIndividualSecret(key, siteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateAppIndividualSecret");
      }
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling updateAppIndividualSecret");
      }

      let pathParams = {
        'key': key,
        'siteId': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps/{key}/{siteId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBundles operation.
     * @callback module:api/DefaultApi~updateBundlesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/DefaultApi~updateBundlesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBundles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/osgi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContentTypeFieldById operation.
     * @callback module:api/DefaultApi~updateContentTypeFieldByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~updateContentTypeFieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateContentTypeFieldById(typeId, fieldId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling updateContentTypeFieldById");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling updateContentTypeFieldById");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/id/{fieldId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContentTypeFieldById1 operation.
     * @callback module:api/DefaultApi~updateContentTypeFieldById1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} fieldId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~updateContentTypeFieldById1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateContentTypeFieldById1(fieldId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling updateContentTypeFieldById1");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contenttype/{typeIdOrVarName}/fields/id/{fieldId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContentTypeFieldByVar operation.
     * @callback module:api/DefaultApi~updateContentTypeFieldByVarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldVar 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~updateContentTypeFieldByVarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateContentTypeFieldByVar(typeId, fieldVar, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling updateContentTypeFieldByVar");
      }
      // verify the required parameter 'fieldVar' is set
      if (fieldVar === undefined || fieldVar === null) {
        throw new Error("Missing the required parameter 'fieldVar' when calling updateContentTypeFieldByVar");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldVar': fieldVar
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/var/{fieldVar}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContentTypeFieldByVar1 operation.
     * @callback module:api/DefaultApi~updateContentTypeFieldByVar1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeIdOrVarName 
     * @param {String} fieldVar 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~updateContentTypeFieldByVar1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateContentTypeFieldByVar1(typeIdOrVarName, fieldVar, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'typeIdOrVarName' is set
      if (typeIdOrVarName === undefined || typeIdOrVarName === null) {
        throw new Error("Missing the required parameter 'typeIdOrVarName' when calling updateContentTypeFieldByVar1");
      }
      // verify the required parameter 'fieldVar' is set
      if (fieldVar === undefined || fieldVar === null) {
        throw new Error("Missing the required parameter 'fieldVar' when calling updateContentTypeFieldByVar1");
      }

      let pathParams = {
        'typeIdOrVarName': typeIdOrVarName,
        'fieldVar': fieldVar
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contenttype/{typeIdOrVarName}/fields/var/{fieldVar}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateField operation.
     * @callback module:api/DefaultApi~updateFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeIdOrVarName 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateFieldForm} opts.updateFieldForm 
     * @param {module:api/DefaultApi~updateFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateField(typeIdOrVarName, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateFieldForm'];
      // verify the required parameter 'typeIdOrVarName' is set
      if (typeIdOrVarName === undefined || typeIdOrVarName === null) {
        throw new Error("Missing the required parameter 'typeIdOrVarName' when calling updateField");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateField");
      }

      let pathParams = {
        'typeIdOrVarName': typeIdOrVarName,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/contenttype/{typeIdOrVarName}/fields/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFieldVariableByFieldId operation.
     * @callback module:api/DefaultApi~updateFieldVariableByFieldIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldId 
     * @param {String} fieldVarId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~updateFieldVariableByFieldIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFieldVariableByFieldId(typeId, fieldId, fieldVarId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling updateFieldVariableByFieldId");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling updateFieldVariableByFieldId");
      }
      // verify the required parameter 'fieldVarId' is set
      if (fieldVarId === undefined || fieldVarId === null) {
        throw new Error("Missing the required parameter 'fieldVarId' when calling updateFieldVariableByFieldId");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldId': fieldId,
        'fieldVarId': fieldVarId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/id/{fieldId}/variables/id/{fieldVarId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFieldVariableByFieldVar operation.
     * @callback module:api/DefaultApi~updateFieldVariableByFieldVarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {String} fieldVar 
     * @param {String} fieldVarId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~updateFieldVariableByFieldVarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFieldVariableByFieldVar(typeId, fieldVar, fieldVarId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling updateFieldVariableByFieldVar");
      }
      // verify the required parameter 'fieldVar' is set
      if (fieldVar === undefined || fieldVar === null) {
        throw new Error("Missing the required parameter 'fieldVar' when calling updateFieldVariableByFieldVar");
      }
      // verify the required parameter 'fieldVarId' is set
      if (fieldVarId === undefined || fieldVarId === null) {
        throw new Error("Missing the required parameter 'fieldVarId' when calling updateFieldVariableByFieldVar");
      }

      let pathParams = {
        'typeId': typeId,
        'fieldVar': fieldVar,
        'fieldVarId': fieldVarId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields/var/{fieldVar}/variables/id/{fieldVarId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFields operation.
     * @callback module:api/DefaultApi~updateFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~updateFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFields(typeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling updateFields");
      }

      let pathParams = {
        'typeId': typeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contenttype/{typeId}/fields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFields1 operation.
     * @callback module:api/DefaultApi~updateFields1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} typeIdOrVarName 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~updateFields1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFields1(typeIdOrVarName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'typeIdOrVarName' is set
      if (typeIdOrVarName === undefined || typeIdOrVarName === null) {
        throw new Error("Missing the required parameter 'typeIdOrVarName' when calling updateFields1");
      }

      let pathParams = {
        'typeIdOrVarName': typeIdOrVarName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contenttype/{typeIdOrVarName}/fields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFromForm operation.
     * @callback module:api/DefaultApi~updateFromFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/FilterDescriptorForm} opts.filterDescriptorForm 
     * @param {module:api/DefaultApi~updateFromFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFromForm(opts, callback) {
      opts = opts || {};
      let postBody = opts['filterDescriptorForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/pushpublish/filters', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLanguage operation.
     * @callback module:api/DefaultApi~updateLanguageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} languageId 
     * @param {Object} opts Optional parameters
     * @param {module:model/LanguageForm} opts.languageForm 
     * @param {module:api/DefaultApi~updateLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateLanguage(languageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['languageForm'];
      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling updateLanguage");
      }

      let pathParams = {
        'languageId': languageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/languages/{languageId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSite operation.
     * @callback module:api/DefaultApi~updateSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {module:model/SiteForm} opts.siteForm 
     * @param {module:api/DefaultApi~updateSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSite(opts, callback) {
      opts = opts || {};
      let postBody = opts['siteForm'];

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/site', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTag operation.
     * @callback module:api/DefaultApi~updateTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTagForm} opts.updateTagForm 
     * @param {module:api/DefaultApi~updateTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTag(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateTagForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upgrade operation.
     * @callback module:api/DefaultApi~upgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UpgradeTaskForm} opts.upgradeTaskForm 
     * @param {module:api/DefaultApi~upgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    upgrade(opts, callback) {
      opts = opts || {};
      let postBody = opts['upgradeTaskForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/upgradetask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadTempResourceMulti operation.
     * @callback module:api/DefaultApi~uploadTempResourceMultiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.maxFileLength  (default to '-1')
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/DefaultApi~uploadTempResourceMultiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadTempResourceMulti(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxFileLength': opts['maxFileLength']
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/temp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userHasLayout operation.
     * @callback module:api/DefaultApi~userHasLayoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layoutId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid 
     * @param {module:api/DefaultApi~userHasLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userHasLayout(layoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'layoutId' is set
      if (layoutId === undefined || layoutId === null) {
        throw new Error("Missing the required parameter 'layoutId' when calling userHasLayout");
      }

      let pathParams = {
        'layoutId': layoutId
      };
      let queryParams = {
        'userid': opts['userid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/toolgroups/{layoutId}/_userHasLayout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateEmail operation.
     * @callback module:api/DefaultApi~validateEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CompanyEmailForm} opts.companyEmailForm 
     * @param {module:api/DefaultApi~validateEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    validateEmail(opts, callback) {
      opts = opts || {};
      let postBody = opts['companyEmailForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/configuration/_validateCompanyEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
