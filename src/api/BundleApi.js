/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BodyPart from '../model/BodyPart';
import BodyPartMediaType from '../model/BodyPartMediaType';
import ContentDisposition from '../model/ContentDisposition';
import DeleteBundlesByIdentifierForm from '../model/DeleteBundlesByIdentifierForm';
import GenerateBundleForm from '../model/GenerateBundleForm';
import MultiPart from '../model/MultiPart';

/**
* Bundle service.
* @module api/BundleApi
* @version 3
*/
export default class BundleApi {

    /**
    * Constructs a new BundleApi. 
    * @alias module:api/BundleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAll operation.
     * @callback module:api/BundleApi~deleteAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BundleApi~deleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllFail operation.
     * @callback module:api/BundleApi~deleteAllFailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BundleApi~deleteAllFailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAllFail(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/all/fail', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllSuccess operation.
     * @callback module:api/BundleApi~deleteAllSuccessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BundleApi~deleteAllSuccessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAllSuccess(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/all/success', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBundlesByIdentifiers operation.
     * @callback module:api/BundleApi~deleteBundlesByIdentifiersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteBundlesByIdentifierForm} opts.deleteBundlesByIdentifierForm 
     * @param {module:api/BundleApi~deleteBundlesByIdentifiersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBundlesByIdentifiers(opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteBundlesByIdentifierForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/ids', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBundlesOlderThan operation.
     * @callback module:api/BundleApi~deleteBundlesOlderThanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Date} olderThan 
     * @param {module:api/BundleApi~deleteBundlesOlderThanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBundlesOlderThan(olderThan, callback) {
      let postBody = null;
      // verify the required parameter 'olderThan' is set
      if (olderThan === undefined || olderThan === null) {
        throw new Error("Missing the required parameter 'olderThan' when calling deleteBundlesOlderThan");
      }

      let pathParams = {
        'olderThan': olderThan
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/olderthan/{olderThan}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEnvironmentPushHistory operation.
     * @callback module:api/BundleApi~deleteEnvironmentPushHistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/BundleApi~deleteEnvironmentPushHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEnvironmentPushHistory(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling deleteEnvironmentPushHistory");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/deleteenvironmentpushhistory/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePushHistory operation.
     * @callback module:api/BundleApi~deletePushHistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/BundleApi~deletePushHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePushHistory(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling deletePushHistory");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/deletepushhistory/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadBundle operation.
     * @callback module:api/BundleApi~downloadBundleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bundleId 
     * @param {module:api/BundleApi~downloadBundleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadBundle(bundleId, callback) {
      let postBody = null;
      // verify the required parameter 'bundleId' is set
      if (bundleId === undefined || bundleId === null) {
        throw new Error("Missing the required parameter 'bundleId' when calling downloadBundle");
      }

      let pathParams = {
        'bundleId': bundleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/_download/{bundleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadManifest operation.
     * @callback module:api/BundleApi~downloadManifestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bundleId 
     * @param {module:api/BundleApi~downloadManifestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadManifest(bundleId, callback) {
      let postBody = null;
      // verify the required parameter 'bundleId' is set
      if (bundleId === undefined || bundleId === null) {
        throw new Error("Missing the required parameter 'bundleId' when calling downloadManifest");
      }

      let pathParams = {
        'bundleId': bundleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/{bundleId}/manifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateBundle operation.
     * @callback module:api/BundleApi~generateBundleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GenerateBundleForm} opts.generateBundleForm 
     * @param {module:api/BundleApi~generateBundleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    generateBundle(opts, callback) {
      opts = opts || {};
      let postBody = opts['generateBundleForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/_generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublishQueueElements operation.
     * @callback module:api/BundleApi~getPublishQueueElementsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bundleId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {module:api/BundleApi~getPublishQueueElementsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPublishQueueElements(bundleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bundleId' is set
      if (bundleId === undefined || bundleId === null) {
        throw new Error("Missing the required parameter 'bundleId' when calling getPublishQueueElements");
      }

      let pathParams = {
        'bundleId': bundleId
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/{bundleId}/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUnsendBundles operation.
     * @callback module:api/BundleApi~getUnsendBundlesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/BundleApi~getUnsendBundlesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUnsendBundles(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling getUnsendBundles");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/getunsendbundles/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBundle operation.
     * @callback module:api/BundleApi~updateBundleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} params 
     * @param {module:api/BundleApi~updateBundleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBundle(params, callback) {
      let postBody = null;
      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling updateBundle");
      }

      let pathParams = {
        'params': params
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/updatebundle/{params}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadBundleAsync operation.
     * @callback module:api/BundleApi~uploadBundleAsyncCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/BundleApi~uploadBundleAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadBundleAsync(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadBundleSync operation.
     * @callback module:api/BundleApi~uploadBundleSyncCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/BundleApi~uploadBundleSyncCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadBundleSync(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundle/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
