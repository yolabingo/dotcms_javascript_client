/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BodyPart from '../model/BodyPart';
import BodyPartMediaType from '../model/BodyPartMediaType';
import BulkActionForm from '../model/BulkActionForm';
import ContentDisposition from '../model/ContentDisposition';
import EventOutput from '../model/EventOutput';
import FireActionByNameForm from '../model/FireActionByNameForm';
import FireActionForm from '../model/FireActionForm';
import FireBulkActionsForm from '../model/FireBulkActionsForm';
import FireMultipleActionForm from '../model/FireMultipleActionForm';
import MultiPart from '../model/MultiPart';
import ResponseEntityView from '../model/ResponseEntityView';
import WorkflowActionForm from '../model/WorkflowActionForm';
import WorkflowActionStepForm from '../model/WorkflowActionStepForm';
import WorkflowActionletActionForm from '../model/WorkflowActionletActionForm';
import WorkflowCopyForm from '../model/WorkflowCopyForm';
import WorkflowReorderWorkflowActionStepForm from '../model/WorkflowReorderWorkflowActionStepForm';
import WorkflowSchemeForm from '../model/WorkflowSchemeForm';
import WorkflowSchemeImportObjectForm from '../model/WorkflowSchemeImportObjectForm';
import WorkflowSchemesForm from '../model/WorkflowSchemesForm';
import WorkflowStepAddForm from '../model/WorkflowStepAddForm';
import WorkflowStepUpdateForm from '../model/WorkflowStepUpdateForm';
import WorkflowSystemActionForm from '../model/WorkflowSystemActionForm';

/**
* Workflow service.
* @module api/WorkflowApi
* @version 3
*/
export default class WorkflowApi {

    /**
    * Constructs a new WorkflowApi. 
    * @alias module:api/WorkflowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addStep operation.
     * @callback module:api/WorkflowApi~addStepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowStepAddForm} opts.workflowStepAddForm 
     * @param {module:api/WorkflowApi~addStepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addStep(opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowStepAddForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/steps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyScheme operation.
     * @callback module:api/WorkflowApi~copySchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} schemeId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {module:model/WorkflowCopyForm} opts.workflowCopyForm 
     * @param {module:api/WorkflowApi~copySchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    copyScheme(schemeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowCopyForm'];
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling copyScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/schemes/{schemeId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAction operation.
     * @callback module:api/WorkflowApi~deleteActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} actionId 
     * @param {module:api/WorkflowApi~deleteActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAction(actionId, callback) {
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling deleteAction");
      }

      let pathParams = {
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/actions/{actionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAction1 operation.
     * @callback module:api/WorkflowApi~deleteAction1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} actionId 
     * @param {String} stepId 
     * @param {module:api/WorkflowApi~deleteAction1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAction1(actionId, stepId, callback) {
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling deleteAction1");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling deleteAction1");
      }

      let pathParams = {
        'actionId': actionId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/steps/{stepId}/actions/{actionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteActionlet operation.
     * @callback module:api/WorkflowApi~deleteActionletCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} actionletId 
     * @param {module:api/WorkflowApi~deleteActionletCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteActionlet(actionletId, callback) {
      let postBody = null;
      // verify the required parameter 'actionletId' is set
      if (actionletId === undefined || actionletId === null) {
        throw new Error("Missing the required parameter 'actionletId' when calling deleteActionlet");
      }

      let pathParams = {
        'actionletId': actionletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/actionlets/{actionletId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScheme operation.
     * @callback module:api/WorkflowApi~deleteSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} schemeId 
     * @param {module:api/WorkflowApi~deleteSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScheme(schemeId, callback) {
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling deleteScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/schemes/{schemeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStep operation.
     * @callback module:api/WorkflowApi~deleteStepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stepId 
     * @param {module:api/WorkflowApi~deleteStepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStep(stepId, callback) {
      let postBody = null;
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling deleteStep");
      }

      let pathParams = {
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/steps/{stepId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletesSystemAction operation.
     * @callback module:api/WorkflowApi~deletesSystemActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} identifier 
     * @param {module:api/WorkflowApi~deletesSystemActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletesSystemAction(identifier, callback) {
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling deletesSystemAction");
      }

      let pathParams = {
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/system/actions/{identifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the evaluateActionCondition operation.
     * @callback module:api/WorkflowApi~evaluateActionConditionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} actionId 
     * @param {module:api/WorkflowApi~evaluateActionConditionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    evaluateActionCondition(actionId, callback) {
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling evaluateActionCondition");
      }

      let pathParams = {
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/actions/{actionId}/condition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportScheme operation.
     * @callback module:api/WorkflowApi~exportSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} schemeId 
     * @param {module:api/WorkflowApi~exportSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportScheme(schemeId, callback) {
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling exportScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/schemes/{schemeId}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAction operation.
     * @callback module:api/WorkflowApi~findActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} actionId 
     * @param {module:api/WorkflowApi~findActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findAction(actionId, callback) {
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling findAction");
      }

      let pathParams = {
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/actions/{actionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findActionByStep operation.
     * @callback module:api/WorkflowApi~findActionByStepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stepId 
     * @param {String} actionId 
     * @param {module:api/WorkflowApi~findActionByStepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findActionByStep(stepId, actionId, callback) {
      let postBody = null;
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling findActionByStep");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling findActionByStep");
      }

      let pathParams = {
        'stepId': stepId,
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/steps/{stepId}/actions/{actionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findActionlets operation.
     * @callback module:api/WorkflowApi~findActionletsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/WorkflowApi~findActionletsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findActionlets(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/actionlets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findActionletsByAction operation.
     * @callback module:api/WorkflowApi~findActionletsByActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} actionId 
     * @param {module:api/WorkflowApi~findActionletsByActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findActionletsByAction(actionId, callback) {
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling findActionletsByAction");
      }

      let pathParams = {
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/actions/{actionId}/actionlets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findActionsByScheme operation.
     * @callback module:api/WorkflowApi~findActionsBySchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} schemeId 
     * @param {module:api/WorkflowApi~findActionsBySchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findActionsByScheme(schemeId, callback) {
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling findActionsByScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/schemes/{schemeId}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findActionsBySchemesAndSystemAction operation.
     * @callback module:api/WorkflowApi~findActionsBySchemesAndSystemActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} systemAction 
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowSchemesForm} opts.workflowSchemesForm 
     * @param {module:api/WorkflowApi~findActionsBySchemesAndSystemActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findActionsBySchemesAndSystemAction(systemAction, opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowSchemesForm'];
      // verify the required parameter 'systemAction' is set
      if (systemAction === undefined || systemAction === null) {
        throw new Error("Missing the required parameter 'systemAction' when calling findActionsBySchemesAndSystemAction");
      }

      let pathParams = {
        'systemAction': systemAction
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/schemes/actions/{systemAction}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findActionsByStep operation.
     * @callback module:api/WorkflowApi~findActionsByStepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stepId 
     * @param {module:api/WorkflowApi~findActionsByStepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findActionsByStep(stepId, callback) {
      let postBody = null;
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling findActionsByStep");
      }

      let pathParams = {
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/steps/{stepId}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllSchemesAndSchemesByContentType operation.
     * @callback module:api/WorkflowApi~findAllSchemesAndSchemesByContentTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentTypeId 
     * @param {module:api/WorkflowApi~findAllSchemesAndSchemesByContentTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findAllSchemesAndSchemesByContentType(contentTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'contentTypeId' is set
      if (contentTypeId === undefined || contentTypeId === null) {
        throw new Error("Missing the required parameter 'contentTypeId' when calling findAllSchemesAndSchemesByContentType");
      }

      let pathParams = {
        'contentTypeId': contentTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/schemes/schemescontenttypes/{contentTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAvailableActions operation.
     * @callback module:api/WorkflowApi~findAvailableActionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} inode 
     * @param {Object} opts Optional parameters
     * @param {String} opts.renderMode 
     * @param {module:api/WorkflowApi~findAvailableActionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findAvailableActions(inode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inode' is set
      if (inode === undefined || inode === null) {
        throw new Error("Missing the required parameter 'inode' when calling findAvailableActions");
      }

      let pathParams = {
        'inode': inode
      };
      let queryParams = {
        'renderMode': opts['renderMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/contentlet/{inode}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAvailableDefaultActionsByContentType operation.
     * @callback module:api/WorkflowApi~findAvailableDefaultActionsByContentTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentTypeId 
     * @param {module:api/WorkflowApi~findAvailableDefaultActionsByContentTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findAvailableDefaultActionsByContentType(contentTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'contentTypeId' is set
      if (contentTypeId === undefined || contentTypeId === null) {
        throw new Error("Missing the required parameter 'contentTypeId' when calling findAvailableDefaultActionsByContentType");
      }

      let pathParams = {
        'contentTypeId': contentTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/defaultactions/contenttype/{contentTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAvailableDefaultActionsBySchemes operation.
     * @callback module:api/WorkflowApi~findAvailableDefaultActionsBySchemesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.ids 
     * @param {module:api/WorkflowApi~findAvailableDefaultActionsBySchemesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findAvailableDefaultActionsBySchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/defaultactions/schemes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findInitialAvailableActionsByContentType operation.
     * @callback module:api/WorkflowApi~findInitialAvailableActionsByContentTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentTypeId 
     * @param {module:api/WorkflowApi~findInitialAvailableActionsByContentTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findInitialAvailableActionsByContentType(contentTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'contentTypeId' is set
      if (contentTypeId === undefined || contentTypeId === null) {
        throw new Error("Missing the required parameter 'contentTypeId' when calling findInitialAvailableActionsByContentType");
      }

      let pathParams = {
        'contentTypeId': contentTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/initialactions/contenttype/{contentTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSchemes operation.
     * @callback module:api/WorkflowApi~findSchemesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentTypeId 
     * @param {Boolean} opts.showArchive  (default to true)
     * @param {module:api/WorkflowApi~findSchemesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findSchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contentTypeId': opts['contentTypeId'],
        'showArchive': opts['showArchive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/schemes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findStepById operation.
     * @callback module:api/WorkflowApi~findStepByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stepId 
     * @param {module:api/WorkflowApi~findStepByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findStepById(stepId, callback) {
      let postBody = null;
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling findStepById");
      }

      let pathParams = {
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/steps/{stepId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findStepsByScheme operation.
     * @callback module:api/WorkflowApi~findStepsBySchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} schemeId 
     * @param {module:api/WorkflowApi~findStepsBySchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findStepsByScheme(schemeId, callback) {
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling findStepsByScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/schemes/{schemeId}/steps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSystemActionsByContentType operation.
     * @callback module:api/WorkflowApi~findSystemActionsByContentTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentTypeVarOrId 
     * @param {module:api/WorkflowApi~findSystemActionsByContentTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findSystemActionsByContentType(contentTypeVarOrId, callback) {
      let postBody = null;
      // verify the required parameter 'contentTypeVarOrId' is set
      if (contentTypeVarOrId === undefined || contentTypeVarOrId === null) {
        throw new Error("Missing the required parameter 'contentTypeVarOrId' when calling findSystemActionsByContentType");
      }

      let pathParams = {
        'contentTypeVarOrId': contentTypeVarOrId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/contenttypes/{contentTypeVarOrId}/system/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSystemActionsByScheme operation.
     * @callback module:api/WorkflowApi~findSystemActionsBySchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} schemeId 
     * @param {module:api/WorkflowApi~findSystemActionsBySchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findSystemActionsByScheme(schemeId, callback) {
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling findSystemActionsByScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/schemes/{schemeId}/system/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireActionByNameSinglePart operation.
     * @callback module:api/WorkflowApi~fireActionByNameSinglePartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntityView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fire action by name
     * @param {Object} opts Optional parameters
     * @param {String} opts.inode 
     * @param {String} opts.identifier 
     * @param {String} opts.indexPolicy 
     * @param {String} opts.language  (default to '-1')
     * @param {module:model/FireActionByNameForm} opts.fireActionByNameForm 
     * @param {module:api/WorkflowApi~fireActionByNameSinglePartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntityView}
     */
    fireActionByNameSinglePart(opts, callback) {
      opts = opts || {};
      let postBody = opts['fireActionByNameForm'];

      let pathParams = {
      };
      let queryParams = {
        'inode': opts['inode'],
        'identifier': opts['identifier'],
        'indexPolicy': opts['indexPolicy'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseEntityView;
      return this.apiClient.callApi(
        '/v1/workflow/actions/fire', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireActionDefaultMultipartNewPath operation.
     * @callback module:api/WorkflowApi~fireActionDefaultMultipartNewPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntityView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fire default action by name multipart
     * @param {module:model/String} systemAction 
     * @param {Object} opts Optional parameters
     * @param {String} opts.inode 
     * @param {String} opts.identifier 
     * @param {String} opts.indexPolicy 
     * @param {String} opts.language  (default to '-1')
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/WorkflowApi~fireActionDefaultMultipartNewPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntityView}
     */
    fireActionDefaultMultipartNewPath(systemAction, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemAction' is set
      if (systemAction === undefined || systemAction === null) {
        throw new Error("Missing the required parameter 'systemAction' when calling fireActionDefaultMultipartNewPath");
      }

      let pathParams = {
        'systemAction': systemAction
      };
      let queryParams = {
        'inode': opts['inode'],
        'identifier': opts['identifier'],
        'indexPolicy': opts['indexPolicy'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ResponseEntityView;
      return this.apiClient.callApi(
        '/v1/workflow/actions/default/firemultipart/{systemAction}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireActionDefaultSinglePart operation.
     * @callback module:api/WorkflowApi~fireActionDefaultSinglePartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntityView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fire default action by name
     * @param {module:model/String} systemAction 
     * @param {Object} opts Optional parameters
     * @param {String} opts.inode 
     * @param {String} opts.identifier 
     * @param {String} opts.indexPolicy 
     * @param {String} opts.language  (default to '-1')
     * @param {module:model/FireActionForm} opts.fireActionForm 
     * @param {module:api/WorkflowApi~fireActionDefaultSinglePartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntityView}
     */
    fireActionDefaultSinglePart(systemAction, opts, callback) {
      opts = opts || {};
      let postBody = opts['fireActionForm'];
      // verify the required parameter 'systemAction' is set
      if (systemAction === undefined || systemAction === null) {
        throw new Error("Missing the required parameter 'systemAction' when calling fireActionDefaultSinglePart");
      }

      let pathParams = {
        'systemAction': systemAction
      };
      let queryParams = {
        'inode': opts['inode'],
        'identifier': opts['identifier'],
        'indexPolicy': opts['indexPolicy'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseEntityView;
      return this.apiClient.callApi(
        '/v1/workflow/actions/default/fire/{systemAction}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireActionMultipartNewPath operation.
     * @callback module:api/WorkflowApi~fireActionMultipartNewPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntityView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fire action by ID multipart
     * @param {String} actionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.inode 
     * @param {String} opts.identifier 
     * @param {String} opts.indexPolicy 
     * @param {String} opts.language  (default to '-1')
     * @param {module:model/ContentDisposition} opts.contentDisposition 
     * @param {Object.<String, Object>} opts.entity 
     * @param {module:model/BodyPartMediaType} opts.mediaType 
     * @param {Object.<String, Object>} opts.messageBodyWorkers 
     * @param {module:model/MultiPart} opts.parent 
     * @param {Object.<String, Object>} opts.providers 
     * @param {Array.<module:model/BodyPart>} opts.bodyParts 
     * @param {module:api/WorkflowApi~fireActionMultipartNewPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntityView}
     */
    fireActionMultipartNewPath(actionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling fireActionMultipartNewPath");
      }

      let pathParams = {
        'actionId': actionId
      };
      let queryParams = {
        'inode': opts['inode'],
        'identifier': opts['identifier'],
        'indexPolicy': opts['indexPolicy'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
        'contentDisposition': opts['contentDisposition'],
        'entity': opts['entity'],
        'mediaType': opts['mediaType'],
        'messageBodyWorkers': opts['messageBodyWorkers'],
        'parent': opts['parent'],
        'providers': opts['providers'],
        'bodyParts': this.apiClient.buildCollectionParam(opts['bodyParts'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ResponseEntityView;
      return this.apiClient.callApi(
        '/v1/workflow/actions/{actionId}/firemultipart', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireActionSinglePart operation.
     * @callback module:api/WorkflowApi~fireActionSinglePartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntityView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fire action by ID
     * @param {String} actionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.inode 
     * @param {String} opts.identifier 
     * @param {String} opts.indexPolicy 
     * @param {String} opts.language  (default to '-1')
     * @param {module:model/FireActionForm} opts.fireActionForm 
     * @param {module:api/WorkflowApi~fireActionSinglePartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntityView}
     */
    fireActionSinglePart(actionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['fireActionForm'];
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling fireActionSinglePart");
      }

      let pathParams = {
        'actionId': actionId
      };
      let queryParams = {
        'inode': opts['inode'],
        'identifier': opts['identifier'],
        'indexPolicy': opts['indexPolicy'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseEntityView;
      return this.apiClient.callApi(
        '/v1/workflow/actions/{actionId}/fire', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireBulkActions operation.
     * @callback module:api/WorkflowApi~fireBulkActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/FireBulkActionsForm} opts.fireBulkActionsForm 
     * @param {module:api/WorkflowApi~fireBulkActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventOutput}
     */
    fireBulkActions(opts, callback) {
      opts = opts || {};
      let postBody = opts['fireBulkActionsForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/event-stream'];
      let returnType = EventOutput;
      return this.apiClient.callApi(
        '/v1/workflow/contentlet/actions/_bulkfire', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireBulkActions1 operation.
     * @callback module:api/WorkflowApi~fireBulkActions1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/FireBulkActionsForm} opts.fireBulkActionsForm 
     * @param {module:api/WorkflowApi~fireBulkActions1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    fireBulkActions1(opts, callback) {
      opts = opts || {};
      let postBody = opts['fireBulkActionsForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/contentlet/actions/bulk/fire', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireMergeActionDefault operation.
     * @callback module:api/WorkflowApi~fireMergeActionDefaultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} systemAction 
     * @param {Object} opts Optional parameters
     * @param {String} opts.inode 
     * @param {String} opts.identifier 
     * @param {String} opts.language  (default to '-1')
     * @param {Number} opts.offset 
     * @param {module:model/FireActionForm} opts.fireActionForm 
     * @param {module:api/WorkflowApi~fireMergeActionDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fireMergeActionDefault(systemAction, opts, callback) {
      opts = opts || {};
      let postBody = opts['fireActionForm'];
      // verify the required parameter 'systemAction' is set
      if (systemAction === undefined || systemAction === null) {
        throw new Error("Missing the required parameter 'systemAction' when calling fireMergeActionDefault");
      }

      let pathParams = {
        'systemAction': systemAction
      };
      let queryParams = {
        'inode': opts['inode'],
        'identifier': opts['identifier'],
        'language': opts['language'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/actions/default/fire/{systemAction}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireMultipleActionDefault operation.
     * @callback module:api/WorkflowApi~fireMultipleActionDefaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntityView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fire default action by name on multiple contents
     * @param {module:model/String} systemAction 
     * @param {Object} opts Optional parameters
     * @param {module:model/FireMultipleActionForm} opts.fireMultipleActionForm 
     * @param {module:api/WorkflowApi~fireMultipleActionDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntityView}
     */
    fireMultipleActionDefault(systemAction, opts, callback) {
      opts = opts || {};
      let postBody = opts['fireMultipleActionForm'];
      // verify the required parameter 'systemAction' is set
      if (systemAction === undefined || systemAction === null) {
        throw new Error("Missing the required parameter 'systemAction' when calling fireMultipleActionDefault");
      }

      let pathParams = {
        'systemAction': systemAction
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseEntityView;
      return this.apiClient.callApi(
        '/v1/workflow/actions/default/fire/{systemAction}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBulkActions operation.
     * @callback module:api/WorkflowApi~getBulkActionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/BulkActionForm} opts.bulkActionForm 
     * @param {module:api/WorkflowApi~getBulkActionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBulkActions(opts, callback) {
      opts = opts || {};
      let postBody = opts['bulkActionForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/contentlet/actions/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSystemActionsReferredByWorkflowAction operation.
     * @callback module:api/WorkflowApi~getSystemActionsReferredByWorkflowActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} workflowActionId 
     * @param {module:api/WorkflowApi~getSystemActionsReferredByWorkflowActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSystemActionsReferredByWorkflowAction(workflowActionId, callback) {
      let postBody = null;
      // verify the required parameter 'workflowActionId' is set
      if (workflowActionId === undefined || workflowActionId === null) {
        throw new Error("Missing the required parameter 'workflowActionId' when calling getSystemActionsReferredByWorkflowAction");
      }

      let pathParams = {
        'workflowActionId': workflowActionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/system/actions/{workflowActionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importScheme operation.
     * @callback module:api/WorkflowApi~importSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowSchemeImportObjectForm} opts.workflowSchemeImportObjectForm 
     * @param {module:api/WorkflowApi~importSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importScheme(opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowSchemeImportObjectForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/schemes/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reorderAction operation.
     * @callback module:api/WorkflowApi~reorderActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stepId 
     * @param {String} actionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowReorderWorkflowActionStepForm} opts.workflowReorderWorkflowActionStepForm 
     * @param {module:api/WorkflowApi~reorderActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reorderAction(stepId, actionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowReorderWorkflowActionStepForm'];
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling reorderAction");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling reorderAction");
      }

      let pathParams = {
        'stepId': stepId,
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/reorder/steps/{stepId}/actions/{actionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reorderStep operation.
     * @callback module:api/WorkflowApi~reorderStepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stepId 
     * @param {Number} order 
     * @param {module:api/WorkflowApi~reorderStepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reorderStep(stepId, order, callback) {
      let postBody = null;
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling reorderStep");
      }
      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling reorderStep");
      }

      let pathParams = {
        'stepId': stepId,
        'order': order
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/reorder/step/{stepId}/order/{order}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAction operation.
     * @callback module:api/WorkflowApi~saveActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowActionForm} opts.workflowActionForm 
     * @param {module:api/WorkflowApi~saveActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveAction(opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowActionForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveActionToStep operation.
     * @callback module:api/WorkflowApi~saveActionToStepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stepId 
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowActionStepForm} opts.workflowActionStepForm 
     * @param {module:api/WorkflowApi~saveActionToStepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveActionToStep(stepId, opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowActionStepForm'];
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling saveActionToStep");
      }

      let pathParams = {
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/steps/{stepId}/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveActionletToAction operation.
     * @callback module:api/WorkflowApi~saveActionletToActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} actionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowActionletActionForm} opts.workflowActionletActionForm 
     * @param {module:api/WorkflowApi~saveActionletToActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveActionletToAction(actionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowActionletActionForm'];
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling saveActionletToAction");
      }

      let pathParams = {
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/actions/{actionId}/actionlets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveScheme operation.
     * @callback module:api/WorkflowApi~saveSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowSchemeForm} opts.workflowSchemeForm 
     * @param {module:api/WorkflowApi~saveSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveScheme(opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowSchemeForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/schemes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSystemAction operation.
     * @callback module:api/WorkflowApi~saveSystemActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowSystemActionForm} opts.workflowSystemActionForm 
     * @param {module:api/WorkflowApi~saveSystemActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveSystemAction(opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowSystemActionForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/system/actions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAction operation.
     * @callback module:api/WorkflowApi~updateActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} actionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowActionForm} opts.workflowActionForm 
     * @param {module:api/WorkflowApi~updateActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAction(actionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowActionForm'];
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling updateAction");
      }

      let pathParams = {
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/actions/{actionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScheme operation.
     * @callback module:api/WorkflowApi~updateSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} schemeId 
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowSchemeForm} opts.workflowSchemeForm 
     * @param {module:api/WorkflowApi~updateSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateScheme(schemeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowSchemeForm'];
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling updateScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/schemes/{schemeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStep operation.
     * @callback module:api/WorkflowApi~updateStepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stepId 
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowStepUpdateForm} opts.workflowStepUpdateForm 
     * @param {module:api/WorkflowApi~updateStepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateStep(stepId, opts, callback) {
      opts = opts || {};
      let postBody = opts['workflowStepUpdateForm'];
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling updateStep");
      }

      let pathParams = {
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workflow/steps/{stepId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
