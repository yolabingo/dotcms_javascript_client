/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CopyContentletForm from '../model/CopyContentletForm';
import PageContainerForm from '../model/PageContainerForm';
import PageForm from '../model/PageForm';
import ResponseEntityViewListMulitreeView from '../model/ResponseEntityViewListMulitreeView';
import ResponseEntityViewMapStringObject from '../model/ResponseEntityViewMapStringObject';

/**
* Page service.
* @module api/PageApi
* @version 3
*/
export default class PageApi {

    /**
    * Constructs a new PageApi. 
    * @alias module:api/PageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addContent operation.
     * @callback module:api/PageApi~addContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pageId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.variantName 
     * @param {module:model/PageContainerForm} opts.pageContainerForm 
     * @param {module:api/PageApi~addContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addContent(pageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['pageContainerForm'];
      // verify the required parameter 'pageId' is set
      if (pageId === undefined || pageId === null) {
        throw new Error("Missing the required parameter 'pageId' when calling addContent");
      }

      let pathParams = {
        'pageId': pageId
      };
      let queryParams = {
        'variantName': opts['variantName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/page/{pageId}/content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyContent operation.
     * @callback module:api/PageApi~copyContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntityViewMapStringObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CopyContentletForm} opts.copyContentletForm 
     * @param {module:api/PageApi~copyContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntityViewMapStringObject}
     */
    copyContent(opts, callback) {
      opts = opts || {};
      let postBody = opts['copyContentletForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseEntityViewMapStringObject;
      return this.apiClient.callApi(
        '/v1/page/copyContent', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deepCopyPage operation.
     * @callback module:api/PageApi~deepCopyPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntityViewMapStringObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pageId 
     * @param {module:api/PageApi~deepCopyPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntityViewMapStringObject}
     */
    deepCopyPage(pageId, callback) {
      let postBody = null;
      // verify the required parameter 'pageId' is set
      if (pageId === undefined || pageId === null) {
        throw new Error("Missing the required parameter 'pageId' when calling deepCopyPage");
      }

      let pathParams = {
        'pageId': pageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseEntityViewMapStringObject;
      return this.apiClient.callApi(
        '/v1/page/{pageId}/_deepcopy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentTree operation.
     * @callback module:api/PageApi~getContentTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntityViewListMulitreeView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pageId 
     * @param {module:api/PageApi~getContentTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntityViewListMulitreeView}
     */
    getContentTree(pageId, callback) {
      let postBody = null;
      // verify the required parameter 'pageId' is set
      if (pageId === undefined || pageId === null) {
        throw new Error("Missing the required parameter 'pageId' when calling getContentTree");
      }

      let pathParams = {
        'pageId': pageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = ResponseEntityViewListMulitreeView;
      return this.apiClient.callApi(
        '/v1/page/{pageId}/content/tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHtmlVersionsPage operation.
     * @callback module:api/PageApi~getHtmlVersionsPageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pageId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.langId 
     * @param {module:api/PageApi~getHtmlVersionsPageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getHtmlVersionsPage(pageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pageId' is set
      if (pageId === undefined || pageId === null) {
        throw new Error("Missing the required parameter 'pageId' when calling getHtmlVersionsPage");
      }

      let pathParams = {
        'pageId': pageId
      };
      let queryParams = {
        'langId': opts['langId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/page/{pageId}/render/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalizedPersonasOnPage operation.
     * @callback module:api/PageApi~getPersonalizedPersonasOnPageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pageId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {String} opts.orderby  (default to 'title')
     * @param {String} opts.direction  (default to 'ASC')
     * @param {String} opts.hostId 
     * @param {Boolean} opts.respectFrontEndRoles 
     * @param {module:api/PageApi~getPersonalizedPersonasOnPageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPersonalizedPersonasOnPage(pageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pageId' is set
      if (pageId === undefined || pageId === null) {
        throw new Error("Missing the required parameter 'pageId' when calling getPersonalizedPersonasOnPage");
      }

      let pathParams = {
        'pageId': pageId
      };
      let queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'orderby': opts['orderby'],
        'direction': opts['direction'],
        'hostId': opts['hostId'],
        'respectFrontEndRoles': opts['respectFrontEndRoles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/page/{pageId}/personas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadJson2 operation.
     * @callback module:api/PageApi~loadJson2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uri 
     * @param {Object} opts Optional parameters
     * @param {String} opts.mode 
     * @param {String} opts.comDotmarketingPersonaId 
     * @param {String} opts.languageId 
     * @param {String} opts.deviceInode 
     * @param {module:api/PageApi~loadJson2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    loadJson2(uri, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling loadJson2");
      }

      let pathParams = {
        'uri': uri
      };
      let queryParams = {
        'mode': opts['mode'],
        'com.dotmarketing.persona.id': opts['comDotmarketingPersonaId'],
        'language_id': opts['languageId'],
        'device_inode': opts['deviceInode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/page/json/{uri}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the render operation.
     * @callback module:api/PageApi~renderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uri 
     * @param {Object} opts Optional parameters
     * @param {String} opts.mode 
     * @param {String} opts.comDotmarketingPersonaId 
     * @param {String} opts.languageId 
     * @param {String} opts.deviceInode 
     * @param {module:api/PageApi~renderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    render(uri, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling render");
      }

      let pathParams = {
        'uri': uri
      };
      let queryParams = {
        'mode': opts['mode'],
        'com.dotmarketing.persona.id': opts['comDotmarketingPersonaId'],
        'language_id': opts['languageId'],
        'device_inode': opts['deviceInode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/page/render/{uri}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renderHTMLOnly operation.
     * @callback module:api/PageApi~renderHTMLOnlyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uri 
     * @param {Object} opts Optional parameters
     * @param {String} opts.mode  (default to 'LIVE_ADMIN')
     * @param {module:api/PageApi~renderHTMLOnlyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renderHTMLOnly(uri, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling renderHTMLOnly");
      }

      let pathParams = {
        'uri': uri
      };
      let queryParams = {
        'mode': opts['mode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/html', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/page/renderHTML/{uri}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveLayout operation.
     * @callback module:api/PageApi~saveLayoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/PageForm} opts.pageForm 
     * @param {module:api/PageApi~saveLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveLayout(opts, callback) {
      opts = opts || {};
      let postBody = opts['pageForm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/page/layout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveLayout1 operation.
     * @callback module:api/PageApi~saveLayout1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pageId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.variantName 
     * @param {module:model/PageForm} opts.pageForm 
     * @param {module:api/PageApi~saveLayout1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    saveLayout1(pageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['pageForm'];
      // verify the required parameter 'pageId' is set
      if (pageId === undefined || pageId === null) {
        throw new Error("Missing the required parameter 'pageId' when calling saveLayout1");
      }

      let pathParams = {
        'pageId': pageId
      };
      let queryParams = {
        'variantName': opts['variantName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/page/{pageId}/layout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPage operation.
     * @callback module:api/PageApi~searchPageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.path 
     * @param {Boolean} opts.live 
     * @param {Boolean} opts.onlyLiveSites 
     * @param {module:api/PageApi~searchPageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchPage(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'path': opts['path'],
        'live': opts['live'],
        'onlyLiveSites': opts['onlyLiveSites']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/html', 'application/javascript'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/page/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
