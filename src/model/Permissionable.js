/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Permissionable model module.
 * @module model/Permissionable
 * @version 3
 */
class Permissionable {
    /**
     * Constructs a new <code>Permissionable</code>.
     * @alias module:model/Permissionable
     */
    constructor() { 
        
        Permissionable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Permissionable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Permissionable} obj Optional instance to populate.
     * @return {module:model/Permissionable} The populated <code>Permissionable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Permissionable();

            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('parentPermissionable')) {
                obj['parentPermissionable'] = Permissionable.constructFromObject(data['parentPermissionable']);
            }
            if (data.hasOwnProperty('permissionId')) {
                obj['permissionId'] = ApiClient.convertToType(data['permissionId'], 'String');
            }
            if (data.hasOwnProperty('permissionType')) {
                obj['permissionType'] = ApiClient.convertToType(data['permissionType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Permissionable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Permissionable</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // validate the optional field `parentPermissionable`
        if (data['parentPermissionable']) { // data not null
          Permissionable.validateJSON(data['parentPermissionable']);
        }
        // ensure the json data is a string
        if (data['permissionId'] && !(typeof data['permissionId'] === 'string' || data['permissionId'] instanceof String)) {
            throw new Error("Expected the field `permissionId` to be a primitive type in the JSON string but got " + data['permissionId']);
        }
        // ensure the json data is a string
        if (data['permissionType'] && !(typeof data['permissionType'] === 'string' || data['permissionType'] instanceof String)) {
            throw new Error("Expected the field `permissionType` to be a primitive type in the JSON string but got " + data['permissionType']);
        }

        return true;
    }


}



/**
 * @member {String} owner
 */
Permissionable.prototype['owner'] = undefined;

/**
 * @member {module:model/Permissionable} parentPermissionable
 */
Permissionable.prototype['parentPermissionable'] = undefined;

/**
 * @member {String} permissionId
 */
Permissionable.prototype['permissionId'] = undefined;

/**
 * @member {String} permissionType
 */
Permissionable.prototype['permissionType'] = undefined;






export default Permissionable;

