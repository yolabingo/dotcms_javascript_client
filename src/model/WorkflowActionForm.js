/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkflowActionForm model module.
 * @module model/WorkflowActionForm
 * @version 3
 */
class WorkflowActionForm {
    /**
     * Constructs a new <code>WorkflowActionForm</code>.
     * @alias module:model/WorkflowActionForm
     * @param schemeId {String} 
     * @param actionName {String} 
     * @param actionAssignable {Boolean} 
     * @param actionCommentable {Boolean} 
     * @param requiresCheckout {Boolean} 
     * @param showOn {Array.<module:model/WorkflowActionForm.ShowOnEnum>} 
     * @param actionRoleHierarchyForAssign {Boolean} 
     * @param actionNextStep {String} 
     */
    constructor(schemeId, actionName, actionAssignable, actionCommentable, requiresCheckout, showOn, actionRoleHierarchyForAssign, actionNextStep) { 
        
        WorkflowActionForm.initialize(this, schemeId, actionName, actionAssignable, actionCommentable, requiresCheckout, showOn, actionRoleHierarchyForAssign, actionNextStep);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, schemeId, actionName, actionAssignable, actionCommentable, requiresCheckout, showOn, actionRoleHierarchyForAssign, actionNextStep) { 
        obj['schemeId'] = schemeId;
        obj['actionName'] = actionName;
        obj['actionAssignable'] = actionAssignable;
        obj['actionCommentable'] = actionCommentable;
        obj['requiresCheckout'] = requiresCheckout;
        obj['showOn'] = showOn;
        obj['actionRoleHierarchyForAssign'] = actionRoleHierarchyForAssign;
        obj['actionNextStep'] = actionNextStep;
    }

    /**
     * Constructs a <code>WorkflowActionForm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowActionForm} obj Optional instance to populate.
     * @return {module:model/WorkflowActionForm} The populated <code>WorkflowActionForm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowActionForm();

            if (data.hasOwnProperty('actionId')) {
                obj['actionId'] = ApiClient.convertToType(data['actionId'], 'String');
            }
            if (data.hasOwnProperty('schemeId')) {
                obj['schemeId'] = ApiClient.convertToType(data['schemeId'], 'String');
            }
            if (data.hasOwnProperty('stepId')) {
                obj['stepId'] = ApiClient.convertToType(data['stepId'], 'String');
            }
            if (data.hasOwnProperty('actionName')) {
                obj['actionName'] = ApiClient.convertToType(data['actionName'], 'String');
            }
            if (data.hasOwnProperty('whoCanUse')) {
                obj['whoCanUse'] = ApiClient.convertToType(data['whoCanUse'], ['String']);
            }
            if (data.hasOwnProperty('actionIcon')) {
                obj['actionIcon'] = ApiClient.convertToType(data['actionIcon'], 'String');
            }
            if (data.hasOwnProperty('actionAssignable')) {
                obj['actionAssignable'] = ApiClient.convertToType(data['actionAssignable'], 'Boolean');
            }
            if (data.hasOwnProperty('actionCommentable')) {
                obj['actionCommentable'] = ApiClient.convertToType(data['actionCommentable'], 'Boolean');
            }
            if (data.hasOwnProperty('requiresCheckout')) {
                obj['requiresCheckout'] = ApiClient.convertToType(data['requiresCheckout'], 'Boolean');
            }
            if (data.hasOwnProperty('showOn')) {
                obj['showOn'] = ApiClient.convertToType(data['showOn'], ['String']);
            }
            if (data.hasOwnProperty('actionRoleHierarchyForAssign')) {
                obj['actionRoleHierarchyForAssign'] = ApiClient.convertToType(data['actionRoleHierarchyForAssign'], 'Boolean');
            }
            if (data.hasOwnProperty('roleHierarchyForAssign')) {
                obj['roleHierarchyForAssign'] = ApiClient.convertToType(data['roleHierarchyForAssign'], 'Boolean');
            }
            if (data.hasOwnProperty('actionNextStep')) {
                obj['actionNextStep'] = ApiClient.convertToType(data['actionNextStep'], 'String');
            }
            if (data.hasOwnProperty('actionNextAssign')) {
                obj['actionNextAssign'] = ApiClient.convertToType(data['actionNextAssign'], 'String');
            }
            if (data.hasOwnProperty('actionCondition')) {
                obj['actionCondition'] = ApiClient.convertToType(data['actionCondition'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowActionForm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowActionForm</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowActionForm.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['actionId'] && !(typeof data['actionId'] === 'string' || data['actionId'] instanceof String)) {
            throw new Error("Expected the field `actionId` to be a primitive type in the JSON string but got " + data['actionId']);
        }
        // ensure the json data is a string
        if (data['schemeId'] && !(typeof data['schemeId'] === 'string' || data['schemeId'] instanceof String)) {
            throw new Error("Expected the field `schemeId` to be a primitive type in the JSON string but got " + data['schemeId']);
        }
        // ensure the json data is a string
        if (data['stepId'] && !(typeof data['stepId'] === 'string' || data['stepId'] instanceof String)) {
            throw new Error("Expected the field `stepId` to be a primitive type in the JSON string but got " + data['stepId']);
        }
        // ensure the json data is a string
        if (data['actionName'] && !(typeof data['actionName'] === 'string' || data['actionName'] instanceof String)) {
            throw new Error("Expected the field `actionName` to be a primitive type in the JSON string but got " + data['actionName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['whoCanUse'])) {
            throw new Error("Expected the field `whoCanUse` to be an array in the JSON data but got " + data['whoCanUse']);
        }
        // ensure the json data is a string
        if (data['actionIcon'] && !(typeof data['actionIcon'] === 'string' || data['actionIcon'] instanceof String)) {
            throw new Error("Expected the field `actionIcon` to be a primitive type in the JSON string but got " + data['actionIcon']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['showOn'])) {
            throw new Error("Expected the field `showOn` to be an array in the JSON data but got " + data['showOn']);
        }
        // ensure the json data is a string
        if (data['actionNextStep'] && !(typeof data['actionNextStep'] === 'string' || data['actionNextStep'] instanceof String)) {
            throw new Error("Expected the field `actionNextStep` to be a primitive type in the JSON string but got " + data['actionNextStep']);
        }
        // ensure the json data is a string
        if (data['actionNextAssign'] && !(typeof data['actionNextAssign'] === 'string' || data['actionNextAssign'] instanceof String)) {
            throw new Error("Expected the field `actionNextAssign` to be a primitive type in the JSON string but got " + data['actionNextAssign']);
        }
        // ensure the json data is a string
        if (data['actionCondition'] && !(typeof data['actionCondition'] === 'string' || data['actionCondition'] instanceof String)) {
            throw new Error("Expected the field `actionCondition` to be a primitive type in the JSON string but got " + data['actionCondition']);
        }

        return true;
    }


}

WorkflowActionForm.RequiredProperties = ["schemeId", "actionName", "actionAssignable", "actionCommentable", "requiresCheckout", "showOn", "actionRoleHierarchyForAssign", "actionNextStep"];

/**
 * @member {String} actionId
 */
WorkflowActionForm.prototype['actionId'] = undefined;

/**
 * @member {String} schemeId
 */
WorkflowActionForm.prototype['schemeId'] = undefined;

/**
 * @member {String} stepId
 */
WorkflowActionForm.prototype['stepId'] = undefined;

/**
 * @member {String} actionName
 */
WorkflowActionForm.prototype['actionName'] = undefined;

/**
 * @member {Array.<String>} whoCanUse
 */
WorkflowActionForm.prototype['whoCanUse'] = undefined;

/**
 * @member {String} actionIcon
 */
WorkflowActionForm.prototype['actionIcon'] = undefined;

/**
 * @member {Boolean} actionAssignable
 */
WorkflowActionForm.prototype['actionAssignable'] = undefined;

/**
 * @member {Boolean} actionCommentable
 */
WorkflowActionForm.prototype['actionCommentable'] = undefined;

/**
 * @member {Boolean} requiresCheckout
 */
WorkflowActionForm.prototype['requiresCheckout'] = undefined;

/**
 * @member {Array.<module:model/WorkflowActionForm.ShowOnEnum>} showOn
 */
WorkflowActionForm.prototype['showOn'] = undefined;

/**
 * @member {Boolean} actionRoleHierarchyForAssign
 */
WorkflowActionForm.prototype['actionRoleHierarchyForAssign'] = undefined;

/**
 * @member {Boolean} roleHierarchyForAssign
 */
WorkflowActionForm.prototype['roleHierarchyForAssign'] = undefined;

/**
 * @member {String} actionNextStep
 */
WorkflowActionForm.prototype['actionNextStep'] = undefined;

/**
 * @member {String} actionNextAssign
 */
WorkflowActionForm.prototype['actionNextAssign'] = undefined;

/**
 * @member {String} actionCondition
 */
WorkflowActionForm.prototype['actionCondition'] = undefined;





/**
 * Allowed values for the <code>showOn</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowActionForm['ShowOnEnum'] = {

    /**
     * value: "NEW"
     * @const
     */
    "NEW": "NEW",

    /**
     * value: "LOCKED"
     * @const
     */
    "LOCKED": "LOCKED",

    /**
     * value: "UNLOCKED"
     * @const
     */
    "UNLOCKED": "UNLOCKED",

    /**
     * value: "PUBLISHED"
     * @const
     */
    "PUBLISHED": "PUBLISHED",

    /**
     * value: "UNPUBLISHED"
     * @const
     */
    "UNPUBLISHED": "UNPUBLISHED",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED",

    /**
     * value: "LISTING"
     * @const
     */
    "LISTING": "LISTING",

    /**
     * value: "EDITING"
     * @const
     */
    "EDITING": "EDITING"
};



export default WorkflowActionForm;

