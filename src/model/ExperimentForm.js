/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Goals from './Goals';
import Scheduling from './Scheduling';
import TargetingCondition from './TargetingCondition';
import TrafficProportion from './TrafficProportion';

/**
 * The ExperimentForm model module.
 * @module model/ExperimentForm
 * @version 3
 */
class ExperimentForm {
    /**
     * Constructs a new <code>ExperimentForm</code>.
     * @alias module:model/ExperimentForm
     */
    constructor() { 
        
        ExperimentForm.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExperimentForm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExperimentForm} obj Optional instance to populate.
     * @return {module:model/ExperimentForm} The populated <code>ExperimentForm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExperimentForm();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('pageId')) {
                obj['pageId'] = ApiClient.convertToType(data['pageId'], 'String');
            }
            if (data.hasOwnProperty('trafficAllocation')) {
                obj['trafficAllocation'] = ApiClient.convertToType(data['trafficAllocation'], 'Number');
            }
            if (data.hasOwnProperty('trafficProportion')) {
                obj['trafficProportion'] = TrafficProportion.constructFromObject(data['trafficProportion']);
            }
            if (data.hasOwnProperty('scheduling')) {
                obj['scheduling'] = Scheduling.constructFromObject(data['scheduling']);
            }
            if (data.hasOwnProperty('goals')) {
                obj['goals'] = Goals.constructFromObject(data['goals']);
            }
            if (data.hasOwnProperty('targetingConditions')) {
                obj['targetingConditions'] = ApiClient.convertToType(data['targetingConditions'], [TargetingCondition]);
            }
            if (data.hasOwnProperty('lookbackWindow')) {
                obj['lookbackWindow'] = ApiClient.convertToType(data['lookbackWindow'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExperimentForm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExperimentForm</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['pageId'] && !(typeof data['pageId'] === 'string' || data['pageId'] instanceof String)) {
            throw new Error("Expected the field `pageId` to be a primitive type in the JSON string but got " + data['pageId']);
        }
        // validate the optional field `trafficProportion`
        if (data['trafficProportion']) { // data not null
          TrafficProportion.validateJSON(data['trafficProportion']);
        }
        // validate the optional field `scheduling`
        if (data['scheduling']) { // data not null
          Scheduling.validateJSON(data['scheduling']);
        }
        // validate the optional field `goals`
        if (data['goals']) { // data not null
          Goals.validateJSON(data['goals']);
        }
        if (data['targetingConditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['targetingConditions'])) {
                throw new Error("Expected the field `targetingConditions` to be an array in the JSON data but got " + data['targetingConditions']);
            }
            // validate the optional field `targetingConditions` (array)
            for (const item of data['targetingConditions']) {
                TargetingCondition.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} name
 */
ExperimentForm.prototype['name'] = undefined;

/**
 * @member {String} description
 */
ExperimentForm.prototype['description'] = undefined;

/**
 * @member {String} pageId
 */
ExperimentForm.prototype['pageId'] = undefined;

/**
 * @member {Number} trafficAllocation
 */
ExperimentForm.prototype['trafficAllocation'] = undefined;

/**
 * @member {module:model/TrafficProportion} trafficProportion
 */
ExperimentForm.prototype['trafficProportion'] = undefined;

/**
 * @member {module:model/Scheduling} scheduling
 */
ExperimentForm.prototype['scheduling'] = undefined;

/**
 * @member {module:model/Goals} goals
 */
ExperimentForm.prototype['goals'] = undefined;

/**
 * @member {Array.<module:model/TargetingCondition>} targetingConditions
 */
ExperimentForm.prototype['targetingConditions'] = undefined;

/**
 * @member {Number} lookbackWindow
 */
ExperimentForm.prototype['lookbackWindow'] = undefined;






export default ExperimentForm;

