/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContainerEntry model module.
 * @module model/ContainerEntry
 * @version 3
 */
class ContainerEntry {
    /**
     * Constructs a new <code>ContainerEntry</code>.
     * @alias module:model/ContainerEntry
     */
    constructor() { 
        
        ContainerEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerEntry} obj Optional instance to populate.
     * @return {module:model/ContainerEntry} The populated <code>ContainerEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerEntry();

            if (data.hasOwnProperty('personaTag')) {
                obj['personaTag'] = ApiClient.convertToType(data['personaTag'], 'String');
            }
            if (data.hasOwnProperty('contentIds')) {
                obj['contentIds'] = ApiClient.convertToType(data['contentIds'], ['String']);
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('containerUUID')) {
                obj['containerUUID'] = ApiClient.convertToType(data['containerUUID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['personaTag'] && !(typeof data['personaTag'] === 'string' || data['personaTag'] instanceof String)) {
            throw new Error("Expected the field `personaTag` to be a primitive type in the JSON string but got " + data['personaTag']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contentIds'])) {
            throw new Error("Expected the field `contentIds` to be an array in the JSON data but got " + data['contentIds']);
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is a string
        if (data['containerUUID'] && !(typeof data['containerUUID'] === 'string' || data['containerUUID'] instanceof String)) {
            throw new Error("Expected the field `containerUUID` to be a primitive type in the JSON string but got " + data['containerUUID']);
        }

        return true;
    }


}



/**
 * @member {String} personaTag
 */
ContainerEntry.prototype['personaTag'] = undefined;

/**
 * @member {Array.<String>} contentIds
 */
ContainerEntry.prototype['contentIds'] = undefined;

/**
 * @member {String} containerId
 */
ContainerEntry.prototype['containerId'] = undefined;

/**
 * @member {String} containerUUID
 */
ContainerEntry.prototype['containerUUID'] = undefined;






export default ContainerEntry;

