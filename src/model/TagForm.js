/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RestTag from './RestTag';

/**
 * The TagForm model module.
 * @module model/TagForm
 * @version 3
 */
class TagForm {
    /**
     * Constructs a new <code>TagForm</code>.
     * @alias module:model/TagForm
     * @param tags {Object.<String, module:model/RestTag>} 
     */
    constructor(tags) { 
        
        TagForm.initialize(this, tags);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tags) { 
        obj['tags'] = tags;
    }

    /**
     * Constructs a <code>TagForm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagForm} obj Optional instance to populate.
     * @return {module:model/TagForm} The populated <code>TagForm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagForm();

            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': RestTag});
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagForm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagForm</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TagForm.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ownerId'] && !(typeof data['ownerId'] === 'string' || data['ownerId'] instanceof String)) {
            throw new Error("Expected the field `ownerId` to be a primitive type in the JSON string but got " + data['ownerId']);
        }

        return true;
    }


}

TagForm.RequiredProperties = ["tags"];

/**
 * @member {Object.<String, module:model/RestTag>} tags
 */
TagForm.prototype['tags'] = undefined;

/**
 * @member {String} ownerId
 */
TagForm.prototype['ownerId'] = undefined;






export default TagForm;

