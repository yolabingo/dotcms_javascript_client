/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SelectedExperiment from './SelectedExperiment';

/**
 * The SelectedExperiments model module.
 * @module model/SelectedExperiments
 * @version 3
 */
class SelectedExperiments {
    /**
     * Constructs a new <code>SelectedExperiments</code>.
     * @alias module:model/SelectedExperiments
     */
    constructor() { 
        
        SelectedExperiments.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SelectedExperiments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SelectedExperiments} obj Optional instance to populate.
     * @return {module:model/SelectedExperiments} The populated <code>SelectedExperiments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SelectedExperiments();

            if (data.hasOwnProperty('experiments')) {
                obj['experiments'] = ApiClient.convertToType(data['experiments'], [SelectedExperiment]);
            }
            if (data.hasOwnProperty('includedExperimentIds')) {
                obj['includedExperimentIds'] = ApiClient.convertToType(data['includedExperimentIds'], ['String']);
            }
            if (data.hasOwnProperty('excludedExperimentIds')) {
                obj['excludedExperimentIds'] = ApiClient.convertToType(data['excludedExperimentIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SelectedExperiments</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SelectedExperiments</code>.
     */
    static validateJSON(data) {
        if (data['experiments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['experiments'])) {
                throw new Error("Expected the field `experiments` to be an array in the JSON data but got " + data['experiments']);
            }
            // validate the optional field `experiments` (array)
            for (const item of data['experiments']) {
                SelectedExperiment.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includedExperimentIds'])) {
            throw new Error("Expected the field `includedExperimentIds` to be an array in the JSON data but got " + data['includedExperimentIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedExperimentIds'])) {
            throw new Error("Expected the field `excludedExperimentIds` to be an array in the JSON data but got " + data['excludedExperimentIds']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/SelectedExperiment>} experiments
 */
SelectedExperiments.prototype['experiments'] = undefined;

/**
 * @member {Array.<String>} includedExperimentIds
 */
SelectedExperiments.prototype['includedExperimentIds'] = undefined;

/**
 * @member {Array.<String>} excludedExperimentIds
 */
SelectedExperiments.prototype['excludedExperimentIds'] = undefined;






export default SelectedExperiments;

