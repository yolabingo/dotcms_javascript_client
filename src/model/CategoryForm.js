/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CategoryForm model module.
 * @module model/CategoryForm
 * @version 3
 */
class CategoryForm {
    /**
     * Constructs a new <code>CategoryForm</code>.
     * @alias module:model/CategoryForm
     * @param categoryName {String} 
     */
    constructor(categoryName) { 
        
        CategoryForm.initialize(this, categoryName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, categoryName) { 
        obj['categoryName'] = categoryName;
    }

    /**
     * Constructs a <code>CategoryForm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategoryForm} obj Optional instance to populate.
     * @return {module:model/CategoryForm} The populated <code>CategoryForm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategoryForm();

            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], 'String');
            }
            if (data.hasOwnProperty('inode')) {
                obj['inode'] = ApiClient.convertToType(data['inode'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('categoryName')) {
                obj['categoryName'] = ApiClient.convertToType(data['categoryName'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'Number');
            }
            if (data.hasOwnProperty('categoryVelocityVarName')) {
                obj['categoryVelocityVarName'] = ApiClient.convertToType(data['categoryVelocityVarName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CategoryForm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CategoryForm</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CategoryForm.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['siteId'] && !(typeof data['siteId'] === 'string' || data['siteId'] instanceof String)) {
            throw new Error("Expected the field `siteId` to be a primitive type in the JSON string but got " + data['siteId']);
        }
        // ensure the json data is a string
        if (data['inode'] && !(typeof data['inode'] === 'string' || data['inode'] instanceof String)) {
            throw new Error("Expected the field `inode` to be a primitive type in the JSON string but got " + data['inode']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['keywords'] && !(typeof data['keywords'] === 'string' || data['keywords'] instanceof String)) {
            throw new Error("Expected the field `keywords` to be a primitive type in the JSON string but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['categoryName'] && !(typeof data['categoryName'] === 'string' || data['categoryName'] instanceof String)) {
            throw new Error("Expected the field `categoryName` to be a primitive type in the JSON string but got " + data['categoryName']);
        }
        // ensure the json data is a string
        if (data['categoryVelocityVarName'] && !(typeof data['categoryVelocityVarName'] === 'string' || data['categoryVelocityVarName'] instanceof String)) {
            throw new Error("Expected the field `categoryVelocityVarName` to be a primitive type in the JSON string but got " + data['categoryVelocityVarName']);
        }

        return true;
    }


}

CategoryForm.RequiredProperties = ["categoryName"];

/**
 * @member {String} siteId
 */
CategoryForm.prototype['siteId'] = undefined;

/**
 * @member {String} inode
 */
CategoryForm.prototype['inode'] = undefined;

/**
 * @member {String} parent
 */
CategoryForm.prototype['parent'] = undefined;

/**
 * @member {String} description
 */
CategoryForm.prototype['description'] = undefined;

/**
 * @member {String} keywords
 */
CategoryForm.prototype['keywords'] = undefined;

/**
 * @member {String} key
 */
CategoryForm.prototype['key'] = undefined;

/**
 * @member {String} categoryName
 */
CategoryForm.prototype['categoryName'] = undefined;

/**
 * @member {Boolean} active
 */
CategoryForm.prototype['active'] = undefined;

/**
 * @member {Number} sortOrder
 */
CategoryForm.prototype['sortOrder'] = undefined;

/**
 * @member {String} categoryVelocityVarName
 */
CategoryForm.prototype['categoryVelocityVarName'] = undefined;






export default CategoryForm;

