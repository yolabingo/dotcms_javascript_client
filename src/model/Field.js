/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Field model module.
 * @module model/Field
 * @version 3
 */
class Field {
    /**
     * Constructs a new <code>Field</code>.
     * @alias module:model/Field
     * @param clazz {String} 
     */
    constructor(clazz) { 
        
        Field.initialize(this, clazz);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clazz) { 
        obj['clazz'] = clazz;
    }

    /**
     * Constructs a <code>Field</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Field} obj Optional instance to populate.
     * @return {module:model/Field} The populated <code>Field</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Field();

            if (data.hasOwnProperty('fieldContentTypeProperties')) {
                obj['fieldContentTypeProperties'] = ApiClient.convertToType(data['fieldContentTypeProperties'], ['String']);
            }
            if (data.hasOwnProperty('clazz')) {
                obj['clazz'] = ApiClient.convertToType(data['clazz'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Field</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Field</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Field.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fieldContentTypeProperties'])) {
            throw new Error("Expected the field `fieldContentTypeProperties` to be an array in the JSON data but got " + data['fieldContentTypeProperties']);
        }
        // ensure the json data is a string
        if (data['clazz'] && !(typeof data['clazz'] === 'string' || data['clazz'] instanceof String)) {
            throw new Error("Expected the field `clazz` to be a primitive type in the JSON string but got " + data['clazz']);
        }

        return true;
    }


}

Field.RequiredProperties = ["clazz"];

/**
 * @member {Array.<module:model/Field.FieldContentTypePropertiesEnum>} fieldContentTypeProperties
 */
Field.prototype['fieldContentTypeProperties'] = undefined;

/**
 * @member {String} clazz
 */
Field.prototype['clazz'] = undefined;





/**
 * Allowed values for the <code>fieldContentTypeProperties</code> property.
 * @enum {String}
 * @readonly
 */
Field['FieldContentTypePropertiesEnum'] = {

    /**
     * value: "NAME"
     * @const
     */
    "NAME": "NAME",

    /**
     * value: "VALUES"
     * @const
     */
    "VALUES": "VALUES",

    /**
     * value: "CATEGORIES"
     * @const
     */
    "CATEGORIES": "CATEGORIES",

    /**
     * value: "RELATIONSHIPS"
     * @const
     */
    "RELATIONSHIPS": "RELATIONSHIPS",

    /**
     * value: "REGEX_CHECK"
     * @const
     */
    "REGEX_CHECK": "REGEX_CHECK",

    /**
     * value: "HINT"
     * @const
     */
    "HINT": "HINT",

    /**
     * value: "REQUIRED"
     * @const
     */
    "REQUIRED": "REQUIRED",

    /**
     * value: "SEARCHABLE"
     * @const
     */
    "SEARCHABLE": "SEARCHABLE",

    /**
     * value: "INDEXED"
     * @const
     */
    "INDEXED": "INDEXED",

    /**
     * value: "LISTED"
     * @const
     */
    "LISTED": "LISTED",

    /**
     * value: "UNIQUE"
     * @const
     */
    "UNIQUE": "UNIQUE",

    /**
     * value: "DEFAULT_VALUE"
     * @const
     */
    "DEFAULT_VALUE": "DEFAULT_VALUE",

    /**
     * value: "DATA_TYPE"
     * @const
     */
    "DATA_TYPE": "DATA_TYPE"
};



export default Field;

