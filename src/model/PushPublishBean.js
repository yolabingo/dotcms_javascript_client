/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PushPublishBean model module.
 * @module model/PushPublishBean
 * @version 3
 */
class PushPublishBean {
    /**
     * Constructs a new <code>PushPublishBean</code>.
     * @alias module:model/PushPublishBean
     */
    constructor() { 
        
        PushPublishBean.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PushPublishBean</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PushPublishBean} obj Optional instance to populate.
     * @return {module:model/PushPublishBean} The populated <code>PushPublishBean</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PushPublishBean();

            if (data.hasOwnProperty('whereToSend')) {
                obj['whereToSend'] = ApiClient.convertToType(data['whereToSend'], 'String');
            }
            if (data.hasOwnProperty('publishDate')) {
                obj['publishDate'] = ApiClient.convertToType(data['publishDate'], 'String');
            }
            if (data.hasOwnProperty('publishTime')) {
                obj['publishTime'] = ApiClient.convertToType(data['publishTime'], 'String');
            }
            if (data.hasOwnProperty('expireDate')) {
                obj['expireDate'] = ApiClient.convertToType(data['expireDate'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('neverExpire')) {
                obj['neverExpire'] = ApiClient.convertToType(data['neverExpire'], 'String');
            }
            if (data.hasOwnProperty('filterKey')) {
                obj['filterKey'] = ApiClient.convertToType(data['filterKey'], 'String');
            }
            if (data.hasOwnProperty('iWantTo')) {
                obj['iWantTo'] = ApiClient.convertToType(data['iWantTo'], 'String');
            }
            if (data.hasOwnProperty('timezoneId')) {
                obj['timezoneId'] = ApiClient.convertToType(data['timezoneId'], 'String');
            }
            if (data.hasOwnProperty('iwantTo')) {
                obj['iwantTo'] = ApiClient.convertToType(data['iwantTo'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PushPublishBean</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PushPublishBean</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['whereToSend'] && !(typeof data['whereToSend'] === 'string' || data['whereToSend'] instanceof String)) {
            throw new Error("Expected the field `whereToSend` to be a primitive type in the JSON string but got " + data['whereToSend']);
        }
        // ensure the json data is a string
        if (data['publishDate'] && !(typeof data['publishDate'] === 'string' || data['publishDate'] instanceof String)) {
            throw new Error("Expected the field `publishDate` to be a primitive type in the JSON string but got " + data['publishDate']);
        }
        // ensure the json data is a string
        if (data['publishTime'] && !(typeof data['publishTime'] === 'string' || data['publishTime'] instanceof String)) {
            throw new Error("Expected the field `publishTime` to be a primitive type in the JSON string but got " + data['publishTime']);
        }
        // ensure the json data is a string
        if (data['expireDate'] && !(typeof data['expireDate'] === 'string' || data['expireDate'] instanceof String)) {
            throw new Error("Expected the field `expireDate` to be a primitive type in the JSON string but got " + data['expireDate']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['neverExpire'] && !(typeof data['neverExpire'] === 'string' || data['neverExpire'] instanceof String)) {
            throw new Error("Expected the field `neverExpire` to be a primitive type in the JSON string but got " + data['neverExpire']);
        }
        // ensure the json data is a string
        if (data['filterKey'] && !(typeof data['filterKey'] === 'string' || data['filterKey'] instanceof String)) {
            throw new Error("Expected the field `filterKey` to be a primitive type in the JSON string but got " + data['filterKey']);
        }
        // ensure the json data is a string
        if (data['iWantTo'] && !(typeof data['iWantTo'] === 'string' || data['iWantTo'] instanceof String)) {
            throw new Error("Expected the field `iWantTo` to be a primitive type in the JSON string but got " + data['iWantTo']);
        }
        // ensure the json data is a string
        if (data['timezoneId'] && !(typeof data['timezoneId'] === 'string' || data['timezoneId'] instanceof String)) {
            throw new Error("Expected the field `timezoneId` to be a primitive type in the JSON string but got " + data['timezoneId']);
        }
        // ensure the json data is a string
        if (data['iwantTo'] && !(typeof data['iwantTo'] === 'string' || data['iwantTo'] instanceof String)) {
            throw new Error("Expected the field `iwantTo` to be a primitive type in the JSON string but got " + data['iwantTo']);
        }

        return true;
    }


}



/**
 * @member {String} whereToSend
 */
PushPublishBean.prototype['whereToSend'] = undefined;

/**
 * @member {String} publishDate
 */
PushPublishBean.prototype['publishDate'] = undefined;

/**
 * @member {String} publishTime
 */
PushPublishBean.prototype['publishTime'] = undefined;

/**
 * @member {String} expireDate
 */
PushPublishBean.prototype['expireDate'] = undefined;

/**
 * @member {String} expireTime
 */
PushPublishBean.prototype['expireTime'] = undefined;

/**
 * @member {String} neverExpire
 */
PushPublishBean.prototype['neverExpire'] = undefined;

/**
 * @member {String} filterKey
 */
PushPublishBean.prototype['filterKey'] = undefined;

/**
 * @member {String} iWantTo
 */
PushPublishBean.prototype['iWantTo'] = undefined;

/**
 * @member {String} timezoneId
 */
PushPublishBean.prototype['timezoneId'] = undefined;

/**
 * @member {String} iwantTo
 */
PushPublishBean.prototype['iwantTo'] = undefined;






export default PushPublishBean;

