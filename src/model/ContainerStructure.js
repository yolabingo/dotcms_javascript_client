/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContainerStructure model module.
 * @module model/ContainerStructure
 * @version 3
 */
class ContainerStructure {
    /**
     * Constructs a new <code>ContainerStructure</code>.
     * @alias module:model/ContainerStructure
     */
    constructor() { 
        
        ContainerStructure.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerStructure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerStructure} obj Optional instance to populate.
     * @return {module:model/ContainerStructure} The populated <code>ContainerStructure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerStructure();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('structureId')) {
                obj['structureId'] = ApiClient.convertToType(data['structureId'], 'String');
            }
            if (data.hasOwnProperty('containerInode')) {
                obj['containerInode'] = ApiClient.convertToType(data['containerInode'], 'String');
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('contentTypeVar')) {
                obj['contentTypeVar'] = ApiClient.convertToType(data['contentTypeVar'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerStructure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerStructure</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['structureId'] && !(typeof data['structureId'] === 'string' || data['structureId'] instanceof String)) {
            throw new Error("Expected the field `structureId` to be a primitive type in the JSON string but got " + data['structureId']);
        }
        // ensure the json data is a string
        if (data['containerInode'] && !(typeof data['containerInode'] === 'string' || data['containerInode'] instanceof String)) {
            throw new Error("Expected the field `containerInode` to be a primitive type in the JSON string but got " + data['containerInode']);
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['contentTypeVar'] && !(typeof data['contentTypeVar'] === 'string' || data['contentTypeVar'] instanceof String)) {
            throw new Error("Expected the field `contentTypeVar` to be a primitive type in the JSON string but got " + data['contentTypeVar']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
ContainerStructure.prototype['id'] = undefined;

/**
 * @member {String} structureId
 */
ContainerStructure.prototype['structureId'] = undefined;

/**
 * @member {String} containerInode
 */
ContainerStructure.prototype['containerInode'] = undefined;

/**
 * @member {String} containerId
 */
ContainerStructure.prototype['containerId'] = undefined;

/**
 * @member {String} code
 */
ContainerStructure.prototype['code'] = undefined;

/**
 * @member {String} contentTypeVar
 */
ContainerStructure.prototype['contentTypeVar'] = undefined;






export default ContainerStructure;

