/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Permissionable from './Permissionable';

/**
 * The Container model module.
 * @module model/Container
 * @version 3
 */
class Container {
    /**
     * Constructs a new <code>Container</code>.
     * @alias module:model/Container
     */
    constructor() { 
        
        Container.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Container</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Container} obj Optional instance to populate.
     * @return {module:model/Container} The populated <code>Container</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Container();

            if (data.hasOwnProperty('getiDate')) {
                obj['getiDate'] = ApiClient.convertToType(data['getiDate'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('inode')) {
                obj['inode'] = ApiClient.convertToType(data['inode'], 'String');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('modDate')) {
                obj['modDate'] = ApiClient.convertToType(data['modDate'], 'Date');
            }
            if (data.hasOwnProperty('modUser')) {
                obj['modUser'] = ApiClient.convertToType(data['modUser'], 'String');
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'Number');
            }
            if (data.hasOwnProperty('showOnMenu')) {
                obj['showOnMenu'] = ApiClient.convertToType(data['showOnMenu'], 'Boolean');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('maxContentlets')) {
                obj['maxContentlets'] = ApiClient.convertToType(data['maxContentlets'], 'Number');
            }
            if (data.hasOwnProperty('useDiv')) {
                obj['useDiv'] = ApiClient.convertToType(data['useDiv'], 'Boolean');
            }
            if (data.hasOwnProperty('sortContentletsBy')) {
                obj['sortContentletsBy'] = ApiClient.convertToType(data['sortContentletsBy'], 'String');
            }
            if (data.hasOwnProperty('preLoop')) {
                obj['preLoop'] = ApiClient.convertToType(data['preLoop'], 'String');
            }
            if (data.hasOwnProperty('postLoop')) {
                obj['postLoop'] = ApiClient.convertToType(data['postLoop'], 'String');
            }
            if (data.hasOwnProperty('staticify')) {
                obj['staticify'] = ApiClient.convertToType(data['staticify'], 'Boolean');
            }
            if (data.hasOwnProperty('luceneQuery')) {
                obj['luceneQuery'] = ApiClient.convertToType(data['luceneQuery'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('parentPermissionable')) {
                obj['parentPermissionable'] = Permissionable.constructFromObject(data['parentPermissionable']);
            }
            if (data.hasOwnProperty('live')) {
                obj['live'] = ApiClient.convertToType(data['live'], 'Boolean');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('working')) {
                obj['working'] = ApiClient.convertToType(data['working'], 'Boolean');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('versionType')) {
                obj['versionType'] = ApiClient.convertToType(data['versionType'], 'String');
            }
            if (data.hasOwnProperty('permissionId')) {
                obj['permissionId'] = ApiClient.convertToType(data['permissionId'], 'String');
            }
            if (data.hasOwnProperty('versionId')) {
                obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('permissionType')) {
                obj['permissionType'] = ApiClient.convertToType(data['permissionType'], 'String');
            }
            if (data.hasOwnProperty('new')) {
                obj['new'] = ApiClient.convertToType(data['new'], 'Boolean');
            }
            if (data.hasOwnProperty('parents')) {
                obj['parents'] = ApiClient.convertToType(data['parents'], [Object]);
            }
            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'String');
            }
            if (data.hasOwnProperty('idate')) {
                obj['idate'] = ApiClient.convertToType(data['idate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Container</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Container</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['inode'] && !(typeof data['inode'] === 'string' || data['inode'] instanceof String)) {
            throw new Error("Expected the field `inode` to be a primitive type in the JSON string but got " + data['inode']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['modUser'] && !(typeof data['modUser'] === 'string' || data['modUser'] instanceof String)) {
            throw new Error("Expected the field `modUser` to be a primitive type in the JSON string but got " + data['modUser']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['sortContentletsBy'] && !(typeof data['sortContentletsBy'] === 'string' || data['sortContentletsBy'] instanceof String)) {
            throw new Error("Expected the field `sortContentletsBy` to be a primitive type in the JSON string but got " + data['sortContentletsBy']);
        }
        // ensure the json data is a string
        if (data['preLoop'] && !(typeof data['preLoop'] === 'string' || data['preLoop'] instanceof String)) {
            throw new Error("Expected the field `preLoop` to be a primitive type in the JSON string but got " + data['preLoop']);
        }
        // ensure the json data is a string
        if (data['postLoop'] && !(typeof data['postLoop'] === 'string' || data['postLoop'] instanceof String)) {
            throw new Error("Expected the field `postLoop` to be a primitive type in the JSON string but got " + data['postLoop']);
        }
        // ensure the json data is a string
        if (data['luceneQuery'] && !(typeof data['luceneQuery'] === 'string' || data['luceneQuery'] instanceof String)) {
            throw new Error("Expected the field `luceneQuery` to be a primitive type in the JSON string but got " + data['luceneQuery']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // validate the optional field `parentPermissionable`
        if (data['parentPermissionable']) { // data not null
          Permissionable.validateJSON(data['parentPermissionable']);
        }
        // ensure the json data is a string
        if (data['versionType'] && !(typeof data['versionType'] === 'string' || data['versionType'] instanceof String)) {
            throw new Error("Expected the field `versionType` to be a primitive type in the JSON string but got " + data['versionType']);
        }
        // ensure the json data is a string
        if (data['permissionId'] && !(typeof data['permissionId'] === 'string' || data['permissionId'] instanceof String)) {
            throw new Error("Expected the field `permissionId` to be a primitive type in the JSON string but got " + data['permissionId']);
        }
        // ensure the json data is a string
        if (data['versionId'] && !(typeof data['versionId'] === 'string' || data['versionId'] instanceof String)) {
            throw new Error("Expected the field `versionId` to be a primitive type in the JSON string but got " + data['versionId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['permissionType'] && !(typeof data['permissionType'] === 'string' || data['permissionType'] instanceof String)) {
            throw new Error("Expected the field `permissionType` to be a primitive type in the JSON string but got " + data['permissionType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parents'])) {
            throw new Error("Expected the field `parents` to be an array in the JSON data but got " + data['parents']);
        }
        // ensure the json data is a string
        if (data['categoryId'] && !(typeof data['categoryId'] === 'string' || data['categoryId'] instanceof String)) {
            throw new Error("Expected the field `categoryId` to be a primitive type in the JSON string but got " + data['categoryId']);
        }

        return true;
    }


}



/**
 * @member {Date} getiDate
 */
Container.prototype['getiDate'] = undefined;

/**
 * @member {String} type
 */
Container.prototype['type'] = undefined;

/**
 * @member {String} owner
 */
Container.prototype['owner'] = undefined;

/**
 * @member {String} inode
 */
Container.prototype['inode'] = undefined;

/**
 * @member {String} identifier
 */
Container.prototype['identifier'] = undefined;

/**
 * @member {module:model/Container.SourceEnum} source
 */
Container.prototype['source'] = undefined;

/**
 * @member {String} title
 */
Container.prototype['title'] = undefined;

/**
 * @member {String} friendlyName
 */
Container.prototype['friendlyName'] = undefined;

/**
 * @member {Date} modDate
 */
Container.prototype['modDate'] = undefined;

/**
 * @member {String} modUser
 */
Container.prototype['modUser'] = undefined;

/**
 * @member {Number} sortOrder
 */
Container.prototype['sortOrder'] = undefined;

/**
 * @member {Boolean} showOnMenu
 */
Container.prototype['showOnMenu'] = undefined;

/**
 * @member {String} code
 */
Container.prototype['code'] = undefined;

/**
 * @member {Number} maxContentlets
 */
Container.prototype['maxContentlets'] = undefined;

/**
 * @member {Boolean} useDiv
 */
Container.prototype['useDiv'] = undefined;

/**
 * @member {String} sortContentletsBy
 */
Container.prototype['sortContentletsBy'] = undefined;

/**
 * @member {String} preLoop
 */
Container.prototype['preLoop'] = undefined;

/**
 * @member {String} postLoop
 */
Container.prototype['postLoop'] = undefined;

/**
 * @member {Boolean} staticify
 */
Container.prototype['staticify'] = undefined;

/**
 * @member {String} luceneQuery
 */
Container.prototype['luceneQuery'] = undefined;

/**
 * @member {String} notes
 */
Container.prototype['notes'] = undefined;

/**
 * @member {module:model/Permissionable} parentPermissionable
 */
Container.prototype['parentPermissionable'] = undefined;

/**
 * @member {Boolean} live
 */
Container.prototype['live'] = undefined;

/**
 * @member {Boolean} deleted
 */
Container.prototype['deleted'] = undefined;

/**
 * @member {Boolean} working
 */
Container.prototype['working'] = undefined;

/**
 * @member {Boolean} archived
 */
Container.prototype['archived'] = undefined;

/**
 * @member {String} versionType
 */
Container.prototype['versionType'] = undefined;

/**
 * @member {String} permissionId
 */
Container.prototype['permissionId'] = undefined;

/**
 * @member {String} versionId
 */
Container.prototype['versionId'] = undefined;

/**
 * @member {String} name
 */
Container.prototype['name'] = undefined;

/**
 * @member {Boolean} locked
 */
Container.prototype['locked'] = undefined;

/**
 * @member {String} permissionType
 */
Container.prototype['permissionType'] = undefined;

/**
 * @member {Boolean} new
 */
Container.prototype['new'] = undefined;

/**
 * @member {Array.<Object>} parents
 */
Container.prototype['parents'] = undefined;

/**
 * @member {String} categoryId
 */
Container.prototype['categoryId'] = undefined;

/**
 * @member {Date} idate
 */
Container.prototype['idate'] = undefined;





/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
Container['SourceEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "DB"
     * @const
     */
    "DB": "DB",

    /**
     * value: "FILE"
     * @const
     */
    "FILE": "FILE"
};



export default Container;

