/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContentType model module.
 * @module model/ContentType
 * @version 3
 */
class ContentType {
    /**
     * Constructs a new <code>ContentType</code>.
     * @alias module:model/ContentType
     * @param clazz {String} 
     */
    constructor(clazz) { 
        
        ContentType.initialize(this, clazz);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clazz) { 
        obj['clazz'] = clazz;
    }

    /**
     * Constructs a <code>ContentType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentType} obj Optional instance to populate.
     * @return {module:model/ContentType} The populated <code>ContentType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentType();

            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('clazz')) {
                obj['clazz'] = ApiClient.convertToType(data['clazz'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContentType.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['clazz'] && !(typeof data['clazz'] === 'string' || data['clazz'] instanceof String)) {
            throw new Error("Expected the field `clazz` to be a primitive type in the JSON string but got " + data['clazz']);
        }

        return true;
    }


}

ContentType.RequiredProperties = ["clazz"];

/**
 * @member {String} owner
 */
ContentType.prototype['owner'] = undefined;

/**
 * @member {String} clazz
 */
ContentType.prototype['clazz'] = undefined;






export default ContentType;

