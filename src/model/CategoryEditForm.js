/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CategoryEditForm model module.
 * @module model/CategoryEditForm
 * @version 3
 */
class CategoryEditForm {
    /**
     * Constructs a new <code>CategoryEditForm</code>.
     * @alias module:model/CategoryEditForm
     */
    constructor() { 
        
        CategoryEditForm.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CategoryEditForm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategoryEditForm} obj Optional instance to populate.
     * @return {module:model/CategoryEditForm} The populated <code>CategoryEditForm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategoryEditForm();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('perPage')) {
                obj['perPage'] = ApiClient.convertToType(data['perPage'], 'Number');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('orderBy')) {
                obj['orderBy'] = ApiClient.convertToType(data['orderBy'], 'String');
            }
            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], 'String');
            }
            if (data.hasOwnProperty('parentInode')) {
                obj['parentInode'] = ApiClient.convertToType(data['parentInode'], 'String');
            }
            if (data.hasOwnProperty('categoryData')) {
                obj['categoryData'] = ApiClient.convertToType(data['categoryData'], {'String': 'Number'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CategoryEditForm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CategoryEditForm</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['orderBy'] && !(typeof data['orderBy'] === 'string' || data['orderBy'] instanceof String)) {
            throw new Error("Expected the field `orderBy` to be a primitive type in the JSON string but got " + data['orderBy']);
        }
        // ensure the json data is a string
        if (data['siteId'] && !(typeof data['siteId'] === 'string' || data['siteId'] instanceof String)) {
            throw new Error("Expected the field `siteId` to be a primitive type in the JSON string but got " + data['siteId']);
        }
        // ensure the json data is a string
        if (data['parentInode'] && !(typeof data['parentInode'] === 'string' || data['parentInode'] instanceof String)) {
            throw new Error("Expected the field `parentInode` to be a primitive type in the JSON string but got " + data['parentInode']);
        }

        return true;
    }


}



/**
 * @member {String} filter
 */
CategoryEditForm.prototype['filter'] = undefined;

/**
 * @member {Number} page
 */
CategoryEditForm.prototype['page'] = undefined;

/**
 * @member {Number} perPage
 */
CategoryEditForm.prototype['perPage'] = undefined;

/**
 * @member {String} direction
 */
CategoryEditForm.prototype['direction'] = undefined;

/**
 * @member {String} orderBy
 */
CategoryEditForm.prototype['orderBy'] = undefined;

/**
 * @member {String} siteId
 */
CategoryEditForm.prototype['siteId'] = undefined;

/**
 * @member {String} parentInode
 */
CategoryEditForm.prototype['parentInode'] = undefined;

/**
 * @member {Object.<String, Number>} categoryData
 */
CategoryEditForm.prototype['categoryData'] = undefined;






export default CategoryEditForm;

