/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchForm model module.
 * @module model/SearchForm
 * @version 3
 */
class SearchForm {
    /**
     * Constructs a new <code>SearchForm</code>.
     * @alias module:model/SearchForm
     */
    constructor() { 
        
        SearchForm.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchForm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchForm} obj Optional instance to populate.
     * @return {module:model/SearchForm} The populated <code>SearchForm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchForm();

            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], 'String');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('render')) {
                obj['render'] = ApiClient.convertToType(data['render'], 'String');
            }
            if (data.hasOwnProperty('depth')) {
                obj['depth'] = ApiClient.convertToType(data['depth'], 'Number');
            }
            if (data.hasOwnProperty('languageId')) {
                obj['languageId'] = ApiClient.convertToType(data['languageId'], 'Number');
            }
            if (data.hasOwnProperty('allCategoriesInfo')) {
                obj['allCategoriesInfo'] = ApiClient.convertToType(data['allCategoriesInfo'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchForm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchForm</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['sort'] && !(typeof data['sort'] === 'string' || data['sort'] instanceof String)) {
            throw new Error("Expected the field `sort` to be a primitive type in the JSON string but got " + data['sort']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // ensure the json data is a string
        if (data['render'] && !(typeof data['render'] === 'string' || data['render'] instanceof String)) {
            throw new Error("Expected the field `render` to be a primitive type in the JSON string but got " + data['render']);
        }

        return true;
    }


}



/**
 * @member {String} query
 */
SearchForm.prototype['query'] = undefined;

/**
 * @member {String} sort
 */
SearchForm.prototype['sort'] = undefined;

/**
 * @member {Number} limit
 */
SearchForm.prototype['limit'] = undefined;

/**
 * @member {Number} offset
 */
SearchForm.prototype['offset'] = undefined;

/**
 * @member {String} userId
 */
SearchForm.prototype['userId'] = undefined;

/**
 * @member {String} render
 */
SearchForm.prototype['render'] = undefined;

/**
 * @member {Number} depth
 */
SearchForm.prototype['depth'] = undefined;

/**
 * @member {Number} languageId
 */
SearchForm.prototype['languageId'] = undefined;

/**
 * @member {Boolean} allCategoriesInfo
 */
SearchForm.prototype['allCategoriesInfo'] = undefined;






export default SearchForm;

