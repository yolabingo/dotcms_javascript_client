/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TemplateLayout from './TemplateLayout';

/**
 * The PageForm model module.
 * @module model/PageForm
 * @version 3
 */
class PageForm {
    /**
     * Constructs a new <code>PageForm</code>.
     * @alias module:model/PageForm
     */
    constructor() { 
        
        PageForm.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PageForm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageForm} obj Optional instance to populate.
     * @return {module:model/PageForm} The populated <code>PageForm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PageForm();

            if (data.hasOwnProperty('themeId')) {
                obj['themeId'] = ApiClient.convertToType(data['themeId'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('hostId')) {
                obj['hostId'] = ApiClient.convertToType(data['hostId'], 'String');
            }
            if (data.hasOwnProperty('layout')) {
                obj['layout'] = TemplateLayout.constructFromObject(data['layout']);
            }
            if (data.hasOwnProperty('anonymousLayout')) {
                obj['anonymousLayout'] = ApiClient.convertToType(data['anonymousLayout'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PageForm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PageForm</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['themeId'] && !(typeof data['themeId'] === 'string' || data['themeId'] instanceof String)) {
            throw new Error("Expected the field `themeId` to be a primitive type in the JSON string but got " + data['themeId']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['hostId'] && !(typeof data['hostId'] === 'string' || data['hostId'] instanceof String)) {
            throw new Error("Expected the field `hostId` to be a primitive type in the JSON string but got " + data['hostId']);
        }
        // validate the optional field `layout`
        if (data['layout']) { // data not null
          TemplateLayout.validateJSON(data['layout']);
        }

        return true;
    }


}



/**
 * @member {String} themeId
 */
PageForm.prototype['themeId'] = undefined;

/**
 * @member {String} title
 */
PageForm.prototype['title'] = undefined;

/**
 * @member {String} hostId
 */
PageForm.prototype['hostId'] = undefined;

/**
 * @member {module:model/TemplateLayout} layout
 */
PageForm.prototype['layout'] = undefined;

/**
 * @member {Boolean} anonymousLayout
 */
PageForm.prototype['anonymousLayout'] = undefined;






export default PageForm;

