/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DotCmsRestApi);
  }
}(this, function(expect, DotCmsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DotCmsRestApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('activateIndex', function() {
      it('should call activateIndex successfully', function(done) {
        //uncomment below and update the code to test activateIndex
        //instance.activateIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('add', function() {
      it('should call add successfully', function(done) {
        //uncomment below and update the code to test add
        //instance.add(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('add1', function() {
      it('should call add1 successfully', function(done) {
        //uncomment below and update the code to test add1
        //instance.add1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('add2', function() {
      it('should call add2 successfully', function(done) {
        //uncomment below and update the code to test add2
        //instance.add2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('add3', function() {
      it('should call add3 successfully', function(done) {
        //uncomment below and update the code to test add3
        //instance.add3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('add4', function() {
      it('should call add4 successfully', function(done) {
        //uncomment below and update the code to test add4
        //instance.add4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addContentPortletToLayout', function() {
      it('should call addContentPortletToLayout successfully', function(done) {
        //uncomment below and update the code to test addContentPortletToLayout
        //instance.addContentPortletToLayout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTag', function() {
      it('should call addTag successfully', function(done) {
        //uncomment below and update the code to test addTag
        //instance.addTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addToolGroupToUser', function() {
      it('should call addToolGroupToUser successfully', function(done) {
        //uncomment below and update the code to test addToolGroupToUser
        //instance.addToolGroupToUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('aliveCheck', function() {
      it('should call aliveCheck successfully', function(done) {
        //uncomment below and update the code to test aliveCheck
        //instance.aliveCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applyLicense', function() {
      it('should call applyLicense successfully', function(done) {
        //uncomment below and update the code to test applyLicense
        //instance.applyLicense(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('archive', function() {
      it('should call archive successfully', function(done) {
        //uncomment below and update the code to test archive
        //instance.archive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('archive2', function() {
      it('should call archive2 successfully', function(done) {
        //uncomment below and update the code to test archive2
        //instance.archive2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('archiveSite', function() {
      it('should call archiveSite successfully', function(done) {
        //uncomment below and update the code to test archiveSite
        //instance.archiveSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authentication', function() {
      it('should call authentication successfully', function(done) {
        //uncomment below and update the code to test authentication
        //instance.authentication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bringBack', function() {
      it('should call bringBack successfully', function(done) {
        //uncomment below and update the code to test bringBack
        //instance.bringBack(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bulkArchive', function() {
      it('should call bulkArchive successfully', function(done) {
        //uncomment below and update the code to test bulkArchive
        //instance.bulkArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bulkDelete', function() {
      it('should call bulkDelete successfully', function(done) {
        //uncomment below and update the code to test bulkDelete
        //instance.bulkDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bulkPublish', function() {
      it('should call bulkPublish successfully', function(done) {
        //uncomment below and update the code to test bulkPublish
        //instance.bulkPublish(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bulkUnarchive', function() {
      it('should call bulkUnarchive successfully', function(done) {
        //uncomment below and update the code to test bulkUnarchive
        //instance.bulkUnarchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bulkUnpublish', function() {
      it('should call bulkUnpublish successfully', function(done) {
        //uncomment below and update the code to test bulkUnpublish
        //instance.bulkUnpublish(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('callDelete', function() {
      it('should call callDelete successfully', function(done) {
        //uncomment below and update the code to test callDelete
        //instance.callDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('callExport', function() {
      it('should call callExport successfully', function(done) {
        //uncomment below and update the code to test callExport
        //instance.callExport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('canLockContent1', function() {
      it('should call canLockContent1 successfully', function(done) {
        //uncomment below and update the code to test canLockContent1
        //instance.canLockContent1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeLoggerLevel', function() {
      it('should call changeLoggerLevel successfully', function(done) {
        //uncomment below and update the code to test changeLoggerLevel
        //instance.changeLoggerLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkIntegrity', function() {
      it('should call checkIntegrity successfully', function(done) {
        //uncomment below and update the code to test checkIntegrity
        //instance.checkIntegrity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkIntegrityProcessStatus', function() {
      it('should call checkIntegrityProcessStatus successfully', function(done) {
        //uncomment below and update the code to test checkIntegrityProcessStatus
        //instance.checkIntegrityProcessStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkRoles', function() {
      it('should call checkRoles successfully', function(done) {
        //uncomment below and update the code to test checkRoles
        //instance.checkRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clearIndex', function() {
      it('should call clearIndex successfully', function(done) {
        //uncomment below and update the code to test clearIndex
        //instance.clearIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('closeIndex', function() {
      it('should call closeIndex successfully', function(done) {
        //uncomment below and update the code to test closeIndex
        //instance.closeIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('containerContent', function() {
      it('should call containerContent successfully', function(done) {
        //uncomment below and update the code to test containerContent
        //instance.containerContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('containerContentByQueryParam', function() {
      it('should call containerContentByQueryParam successfully', function(done) {
        //uncomment below and update the code to test containerContentByQueryParam
        //instance.containerContentByQueryParam(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('containerForm', function() {
      it('should call containerForm successfully', function(done) {
        //uncomment below and update the code to test containerForm
        //instance.containerForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('containerFormByQueryParam', function() {
      it('should call containerFormByQueryParam successfully', function(done) {
        //uncomment below and update the code to test containerFormByQueryParam
        //instance.containerFormByQueryParam(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('copy', function() {
      it('should call copy successfully', function(done) {
        //uncomment below and update the code to test copy
        //instance.copy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('copy1', function() {
      it('should call copy1 successfully', function(done) {
        //uncomment below and update the code to test copy1
        //instance.copy1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('copySite', function() {
      it('should call copySite successfully', function(done) {
        //uncomment below and update the code to test copySite
        //instance.copySite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('copyTempFromUrl', function() {
      it('should call copyTempFromUrl successfully', function(done) {
        //uncomment below and update the code to test copyTempFromUrl
        //instance.copyTempFromUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApp', function() {
      it('should call createApp successfully', function(done) {
        //uncomment below and update the code to test createApp
        //instance.createApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAppSecrets', function() {
      it('should call createAppSecrets successfully', function(done) {
        //uncomment below and update the code to test createAppSecrets
        //instance.createAppSecrets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createContentPortlet', function() {
      it('should call createContentPortlet successfully', function(done) {
        //uncomment below and update the code to test createContentPortlet
        //instance.createContentPortlet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createContentTypeField', function() {
      it('should call createContentTypeField successfully', function(done) {
        //uncomment below and update the code to test createContentTypeField
        //instance.createContentTypeField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createContentTypeField1', function() {
      it('should call createContentTypeField1 successfully', function(done) {
        //uncomment below and update the code to test createContentTypeField1
        //instance.createContentTypeField1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFieldVariableByFieldId', function() {
      it('should call createFieldVariableByFieldId successfully', function(done) {
        //uncomment below and update the code to test createFieldVariableByFieldId
        //instance.createFieldVariableByFieldId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFieldVariableByFieldVar', function() {
      it('should call createFieldVariableByFieldVar successfully', function(done) {
        //uncomment below and update the code to test createFieldVariableByFieldVar
        //instance.createFieldVariableByFieldVar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFolders', function() {
      it('should call createFolders successfully', function(done) {
        //uncomment below and update the code to test createFolders
        //instance.createFolders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIndex', function() {
      it('should call createIndex successfully', function(done) {
        //uncomment below and update the code to test createIndex
        //instance.createIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNewSite', function() {
      it('should call createNewSite successfully', function(done) {
        //uncomment below and update the code to test createNewSite
        //instance.createNewSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('currentSite', function() {
      it('should call currentSite successfully', function(done) {
        //uncomment below and update the code to test currentSite
        //instance.currentSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deactivateIndex', function() {
      it('should call deactivateIndex successfully', function(done) {
        //uncomment below and update the code to test deactivateIndex
        //instance.deactivateIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('defaultSite', function() {
      it('should call defaultSite successfully', function(done) {
        //uncomment below and update the code to test defaultSite
        //instance.defaultSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete1', function() {
      it('should call delete1 successfully', function(done) {
        //uncomment below and update the code to test delete1
        //instance.delete1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete10', function() {
      it('should call delete10 successfully', function(done) {
        //uncomment below and update the code to test delete10
        //instance.delete10(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete2', function() {
      it('should call delete2 successfully', function(done) {
        //uncomment below and update the code to test delete2
        //instance.delete2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete3', function() {
      it('should call delete3 successfully', function(done) {
        //uncomment below and update the code to test delete3
        //instance.delete3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete5', function() {
      it('should call delete5 successfully', function(done) {
        //uncomment below and update the code to test delete5
        //instance.delete5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete6', function() {
      it('should call delete6 successfully', function(done) {
        //uncomment below and update the code to test delete6
        //instance.delete6(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete7', function() {
      it('should call delete7 successfully', function(done) {
        //uncomment below and update the code to test delete7
        //instance.delete7(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete8', function() {
      it('should call delete8 successfully', function(done) {
        //uncomment below and update the code to test delete8
        //instance.delete8(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete9', function() {
      it('should call delete9 successfully', function(done) {
        //uncomment below and update the code to test delete9
        //instance.delete9(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAllAppSecrets', function() {
      it('should call deleteAllAppSecrets successfully', function(done) {
        //uncomment below and update the code to test deleteAllAppSecrets
        //instance.deleteAllAppSecrets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApiToken', function() {
      it('should call deleteApiToken successfully', function(done) {
        //uncomment below and update the code to test deleteApiToken
        //instance.deleteApiToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApp', function() {
      it('should call deleteApp successfully', function(done) {
        //uncomment below and update the code to test deleteApp
        //instance.deleteApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAssetsByIdentifiers', function() {
      it('should call deleteAssetsByIdentifiers successfully', function(done) {
        //uncomment below and update the code to test deleteAssetsByIdentifiers
        //instance.deleteAssetsByIdentifiers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContentTypeFieldById', function() {
      it('should call deleteContentTypeFieldById successfully', function(done) {
        //uncomment below and update the code to test deleteContentTypeFieldById
        //instance.deleteContentTypeFieldById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContentTypeFieldById1', function() {
      it('should call deleteContentTypeFieldById1 successfully', function(done) {
        //uncomment below and update the code to test deleteContentTypeFieldById1
        //instance.deleteContentTypeFieldById1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContentTypeFieldByVar', function() {
      it('should call deleteContentTypeFieldByVar successfully', function(done) {
        //uncomment below and update the code to test deleteContentTypeFieldByVar
        //instance.deleteContentTypeFieldByVar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContentTypeFieldByVar1', function() {
      it('should call deleteContentTypeFieldByVar1 successfully', function(done) {
        //uncomment below and update the code to test deleteContentTypeFieldByVar1
        //instance.deleteContentTypeFieldByVar1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCustomPortlet', function() {
      it('should call deleteCustomPortlet successfully', function(done) {
        //uncomment below and update the code to test deleteCustomPortlet
        //instance.deleteCustomPortlet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEndpoint', function() {
      it('should call deleteEndpoint successfully', function(done) {
        //uncomment below and update the code to test deleteEndpoint
        //instance.deleteEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEnvironment', function() {
      it('should call deleteEnvironment successfully', function(done) {
        //uncomment below and update the code to test deleteEnvironment
        //instance.deleteEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFailedRecords', function() {
      it('should call deleteFailedRecords successfully', function(done) {
        //uncomment below and update the code to test deleteFailedRecords
        //instance.deleteFailedRecords(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFieldVariableByFieldId', function() {
      it('should call deleteFieldVariableByFieldId successfully', function(done) {
        //uncomment below and update the code to test deleteFieldVariableByFieldId
        //instance.deleteFieldVariableByFieldId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFieldVariableByFieldVar', function() {
      it('should call deleteFieldVariableByFieldVar successfully', function(done) {
        //uncomment below and update the code to test deleteFieldVariableByFieldVar
        //instance.deleteFieldVariableByFieldVar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFields', function() {
      it('should call deleteFields successfully', function(done) {
        //uncomment below and update the code to test deleteFields
        //instance.deleteFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFields1', function() {
      it('should call deleteFields1 successfully', function(done) {
        //uncomment below and update the code to test deleteFields1
        //instance.deleteFields1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFields2', function() {
      it('should call deleteFields2 successfully', function(done) {
        //uncomment below and update the code to test deleteFields2
        //instance.deleteFields2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFilter', function() {
      it('should call deleteFilter successfully', function(done) {
        //uncomment below and update the code to test deleteFilter
        //instance.deleteFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFolders', function() {
      it('should call deleteFolders successfully', function(done) {
        //uncomment below and update the code to test deleteFolders
        //instance.deleteFolders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteHash', function() {
      it('should call deleteHash successfully', function(done) {
        //uncomment below and update the code to test deleteHash
        //instance.deleteHash(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIndex', function() {
      it('should call deleteIndex successfully', function(done) {
        //uncomment below and update the code to test deleteIndex
        //instance.deleteIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIndividualAppSecret', function() {
      it('should call deleteIndividualAppSecret successfully', function(done) {
        //uncomment below and update the code to test deleteIndividualAppSecret
        //instance.deleteIndividualAppSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLanguage', function() {
      it('should call deleteLanguage successfully', function(done) {
        //uncomment below and update the code to test deleteLanguage
        //instance.deleteLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePersonalPortlet', function() {
      it('should call deletePersonalPortlet successfully', function(done) {
        //uncomment below and update the code to test deletePersonalPortlet
        //instance.deletePersonalPortlet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePortletForRole', function() {
      it('should call deletePortletForRole successfully', function(done) {
        //uncomment below and update the code to test deletePortletForRole
        //instance.deletePortletForRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRoleLayouts', function() {
      it('should call deleteRoleLayouts successfully', function(done) {
        //uncomment below and update the code to test deleteRoleLayouts
        //instance.deleteRoleLayouts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSite', function() {
      it('should call deleteSite successfully', function(done) {
        //uncomment below and update the code to test deleteSite
        //instance.deleteSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTagInodesByInode', function() {
      it('should call deleteTagInodesByInode successfully', function(done) {
        //uncomment below and update the code to test deleteTagInodesByInode
        //instance.deleteTagInodesByInode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteToolGroupFromUser', function() {
      it('should call deleteToolGroupFromUser successfully', function(done) {
        //uncomment below and update the code to test deleteToolGroupFromUser
        //instance.deleteToolGroupFromUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVersion', function() {
      it('should call deleteVersion successfully', function(done) {
        //uncomment below and update the code to test deleteVersion
        //instance.deleteVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('discardConflicts', function() {
      it('should call discardConflicts successfully', function(done) {
        //uncomment below and update the code to test discardConflicts
        //instance.discardConflicts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('doLogin', function() {
      it('should call doLogin successfully', function(done) {
        //uncomment below and update the code to test doLogin
        //instance.doLogin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('doesUserHaveAccessToPortlet', function() {
      it('should call doesUserHaveAccessToPortlet successfully', function(done) {
        //uncomment below and update the code to test doesUserHaveAccessToPortlet
        //instance.doesUserHaveAccessToPortlet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadAssets', function() {
      it('should call downloadAssets successfully', function(done) {
        //uncomment below and update the code to test downloadAssets
        //instance.downloadAssets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadDb', function() {
      it('should call downloadDb successfully', function(done) {
        //uncomment below and update the code to test downloadDb
        //instance.downloadDb(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadLogFile', function() {
      it('should call downloadLogFile successfully', function(done) {
        //uncomment below and update the code to test downloadLogFile
        //instance.downloadLogFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadRemainingRecordsAsCsv', function() {
      it('should call downloadRemainingRecordsAsCsv successfully', function(done) {
        //uncomment below and update the code to test downloadRemainingRecordsAsCsv
        //instance.downloadRemainingRecordsAsCsv(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadStarter', function() {
      it('should call downloadStarter successfully', function(done) {
        //uncomment below and update the code to test downloadStarter
        //instance.downloadStarter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadStarterWithAssets', function() {
      it('should call downloadStarterWithAssets successfully', function(done) {
        //uncomment below and update the code to test downloadStarterWithAssets
        //instance.downloadStarterWithAssets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dynamicDelete', function() {
      it('should call dynamicDelete successfully', function(done) {
        //uncomment below and update the code to test dynamicDelete
        //instance.dynamicDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dynamicGet', function() {
      it('should call dynamicGet successfully', function(done) {
        //uncomment below and update the code to test dynamicGet
        //instance.dynamicGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dynamicGet1', function() {
      it('should call dynamicGet1 successfully', function(done) {
        //uncomment below and update the code to test dynamicGet1
        //instance.dynamicGet1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dynamicPatch', function() {
      it('should call dynamicPatch successfully', function(done) {
        //uncomment below and update the code to test dynamicPatch
        //instance.dynamicPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dynamicPost', function() {
      it('should call dynamicPost successfully', function(done) {
        //uncomment below and update the code to test dynamicPost
        //instance.dynamicPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dynamicPost1', function() {
      it('should call dynamicPost1 successfully', function(done) {
        //uncomment below and update the code to test dynamicPost1
        //instance.dynamicPost1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dynamicPut', function() {
      it('should call dynamicPut successfully', function(done) {
        //uncomment below and update the code to test dynamicPut
        //instance.dynamicPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dynamicPut1', function() {
      it('should call dynamicPut1 successfully', function(done) {
        //uncomment below and update the code to test dynamicPut1
        //instance.dynamicPut1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('echo', function() {
      it('should call echo successfully', function(done) {
        //uncomment below and update the code to test echo
        //instance.echo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportSecrets', function() {
      it('should call exportSecrets successfully', function(done) {
        //uncomment below and update the code to test exportSecrets
        //instance.exportSecrets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('filter', function() {
      it('should call filter successfully', function(done) {
        //uncomment below and update the code to test filter
        //instance.filter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findAllSiteThumbnails', function() {
      it('should call findAllSiteThumbnails successfully', function(done) {
        //uncomment below and update the code to test findAllSiteThumbnails
        //instance.findAllSiteThumbnails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findByInode', function() {
      it('should call findByInode successfully', function(done) {
        //uncomment below and update the code to test findByInode
        //instance.findByInode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findFolderById', function() {
      it('should call findFolderById successfully', function(done) {
        //uncomment below and update the code to test findFolderById
        //instance.findFolderById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findHostByIdentifier', function() {
      it('should call findHostByIdentifier successfully', function(done) {
        //uncomment below and update the code to test findHostByIdentifier
        //instance.findHostByIdentifier(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findHostByName', function() {
      it('should call findHostByName successfully', function(done) {
        //uncomment below and update the code to test findHostByName
        //instance.findHostByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findPortlet', function() {
      it('should call findPortlet successfully', function(done) {
        //uncomment below and update the code to test findPortlet
        //instance.findPortlet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findResourceLink', function() {
      it('should call findResourceLink successfully', function(done) {
        //uncomment below and update the code to test findResourceLink
        //instance.findResourceLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findResourceLink1', function() {
      it('should call findResourceLink1 successfully', function(done) {
        //uncomment below and update the code to test findResourceLink1
        //instance.findResourceLink1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findResourceLinks', function() {
      it('should call findResourceLinks successfully', function(done) {
        //uncomment below and update the code to test findResourceLinks
        //instance.findResourceLinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findRoleLayouts', function() {
      it('should call findRoleLayouts successfully', function(done) {
        //uncomment below and update the code to test findRoleLayouts
        //instance.findRoleLayouts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findSubFoldersByPath', function() {
      it('should call findSubFoldersByPath successfully', function(done) {
        //uncomment below and update the code to test findSubFoldersByPath
        //instance.findSubFoldersByPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findTagsByInode', function() {
      it('should call findTagsByInode successfully', function(done) {
        //uncomment below and update the code to test findTagsByInode
        //instance.findTagsByInode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findThemeById', function() {
      it('should call findThemeById successfully', function(done) {
        //uncomment below and update the code to test findThemeById
        //instance.findThemeById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findThemes', function() {
      it('should call findThemes successfully', function(done) {
        //uncomment below and update the code to test findThemes
        //instance.findThemes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findVersionable', function() {
      it('should call findVersionable successfully', function(done) {
        //uncomment below and update the code to test findVersionable
        //instance.findVersionable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findVersions', function() {
      it('should call findVersions successfully', function(done) {
        //uncomment below and update the code to test findVersions
        //instance.findVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fixConflicts', function() {
      it('should call fixConflicts successfully', function(done) {
        //uncomment below and update the code to test fixConflicts
        //instance.fixConflicts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fixConflictsFromRemote', function() {
      it('should call fixConflictsFromRemote successfully', function(done) {
        //uncomment below and update the code to test fixConflictsFromRemote
        //instance.fixConflictsFromRemote(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('flushAll', function() {
      it('should call flushAll successfully', function(done) {
        //uncomment below and update the code to test flushAll
        //instance.flushAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('flushGroup', function() {
      it('should call flushGroup successfully', function(done) {
        //uncomment below and update the code to test flushGroup
        //instance.flushGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('flushIndiciesCache', function() {
      it('should call flushIndiciesCache successfully', function(done) {
        //uncomment below and update the code to test flushIndiciesCache
        //instance.flushIndiciesCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('flushObject', function() {
      it('should call flushObject successfully', function(done) {
        //uncomment below and update the code to test flushObject
        //instance.flushObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('forgotPassword', function() {
      it('should call forgotPassword successfully', function(done) {
        //uncomment below and update the code to test forgotPassword
        //instance.forgotPassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('freeLicense', function() {
      it('should call freeLicense successfully', function(done) {
        //uncomment below and update the code to test freeLicense
        //instance.freeLicense(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateIntegrityData', function() {
      it('should call generateIntegrityData successfully', function(done) {
        //uncomment below and update the code to test generateIntegrityData
        //instance.generateIntegrityData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('get', function() {
      it('should call get successfully', function(done) {
        //uncomment below and update the code to test get
        //instance.get(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('get2', function() {
      it('should call get2 successfully', function(done) {
        //uncomment below and update the code to test get2
        //instance.get2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('get3', function() {
      it('should call get3 successfully', function(done) {
        //uncomment below and update the code to test get3
        //instance.get3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('get4', function() {
      it('should call get4 successfully', function(done) {
        //uncomment below and update the code to test get4
        //instance.get4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('get5', function() {
      it('should call get5 successfully', function(done) {
        //uncomment below and update the code to test get5
        //instance.get5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getActive', function() {
      it('should call getActive successfully', function(done) {
        //uncomment below and update the code to test getActive
        //instance.getActive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAll', function() {
      it('should call getAll successfully', function(done) {
        //uncomment below and update the code to test getAll
        //instance.getAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllMessages', function() {
      it('should call getAllMessages successfully', function(done) {
        //uncomment below and update the code to test getAllMessages
        //instance.getAllMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApiToken', function() {
      it('should call getApiToken successfully', function(done) {
        //uncomment below and update the code to test getApiToken
        //instance.getApiToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApiTokens', function() {
      it('should call getApiTokens successfully', function(done) {
        //uncomment below and update the code to test getApiTokens
        //instance.getApiTokens(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppByKey', function() {
      it('should call getAppByKey successfully', function(done) {
        //uncomment below and update the code to test getAppByKey
        //instance.getAppByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppDetail', function() {
      it('should call getAppDetail successfully', function(done) {
        //uncomment below and update the code to test getAppDetail
        //instance.getAppDetail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getByContentlet', function() {
      it('should call getByContentlet successfully', function(done) {
        //uncomment below and update the code to test getByContentlet
        //instance.getByContentlet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCardinality', function() {
      it('should call getCardinality successfully', function(done) {
        //uncomment below and update the code to test getCardinality
        //instance.getCardinality(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCategories', function() {
      it('should call getCategories successfully', function(done) {
        //uncomment below and update the code to test getCategories
        //instance.getCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCategoryByIdOrKey', function() {
      it('should call getCategoryByIdOrKey successfully', function(done) {
        //uncomment below and update the code to test getCategoryByIdOrKey
        //instance.getCategoryByIdOrKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChildren', function() {
      it('should call getChildren successfully', function(done) {
        //uncomment below and update the code to test getChildren
        //instance.getChildren(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getClusterStats', function() {
      it('should call getClusterStats successfully', function(done) {
        //uncomment below and update the code to test getClusterStats
        //instance.getClusterStats(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfigVariables', function() {
      it('should call getConfigVariables successfully', function(done) {
        //uncomment below and update the code to test getConfigVariables
        //instance.getConfigVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContainers', function() {
      it('should call getContainers successfully', function(done) {
        //uncomment below and update the code to test getContainers
        //instance.getContainers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContent1', function() {
      it('should call getContent1 successfully', function(done) {
        //uncomment below and update the code to test getContent1
        //instance.getContent1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContent2', function() {
      it('should call getContent2 successfully', function(done) {
        //uncomment below and update the code to test getContent2
        //instance.getContent2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContentTypeFieldById', function() {
      it('should call getContentTypeFieldById successfully', function(done) {
        //uncomment below and update the code to test getContentTypeFieldById
        //instance.getContentTypeFieldById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContentTypeFieldById1', function() {
      it('should call getContentTypeFieldById1 successfully', function(done) {
        //uncomment below and update the code to test getContentTypeFieldById1
        //instance.getContentTypeFieldById1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContentTypeFieldByVar', function() {
      it('should call getContentTypeFieldByVar successfully', function(done) {
        //uncomment below and update the code to test getContentTypeFieldByVar
        //instance.getContentTypeFieldByVar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContentTypeFieldByVar1', function() {
      it('should call getContentTypeFieldByVar1 successfully', function(done) {
        //uncomment below and update the code to test getContentTypeFieldByVar1
        //instance.getContentTypeFieldByVar1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContentTypeFields', function() {
      it('should call getContentTypeFields successfully', function(done) {
        //uncomment below and update the code to test getContentTypeFields
        //instance.getContentTypeFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContentTypeFields1', function() {
      it('should call getContentTypeFields1 successfully', function(done) {
        //uncomment below and update the code to test getContentTypeFields1
        //instance.getContentTypeFields1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContentTypeFields2', function() {
      it('should call getContentTypeFields2 successfully', function(done) {
        //uncomment below and update the code to test getContentTypeFields2
        //instance.getContentTypeFields2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCreateContentURL', function() {
      it('should call getCreateContentURL successfully', function(done) {
        //uncomment below and update the code to test getCreateContentURL
        //instance.getCreateContentURL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDocumentCount', function() {
      it('should call getDocumentCount successfully', function(done) {
        //uncomment below and update the code to test getDocumentCount
        //instance.getDocumentCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getESConfigProperties', function() {
      it('should call getESConfigProperties successfully', function(done) {
        //uncomment below and update the code to test getESConfigProperties
        //instance.getESConfigProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEvents', function() {
      it('should call getEvents successfully', function(done) {
        //uncomment below and update the code to test getEvents
        //instance.getEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExternalGrammar', function() {
      it('should call getExternalGrammar successfully', function(done) {
        //uncomment below and update the code to test getExternalGrammar
        //instance.getExternalGrammar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFieldTypes', function() {
      it('should call getFieldTypes successfully', function(done) {
        //uncomment below and update the code to test getFieldTypes
        //instance.getFieldTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFieldVariableByFieldId', function() {
      it('should call getFieldVariableByFieldId successfully', function(done) {
        //uncomment below and update the code to test getFieldVariableByFieldId
        //instance.getFieldVariableByFieldId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFieldVariableByFieldVar', function() {
      it('should call getFieldVariableByFieldVar successfully', function(done) {
        //uncomment below and update the code to test getFieldVariableByFieldVar
        //instance.getFieldVariableByFieldVar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFieldVariablesByFieldId', function() {
      it('should call getFieldVariablesByFieldId successfully', function(done) {
        //uncomment below and update the code to test getFieldVariablesByFieldId
        //instance.getFieldVariablesByFieldId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFieldVariablesByFieldVar', function() {
      it('should call getFieldVariablesByFieldVar successfully', function(done) {
        //uncomment below and update the code to test getFieldVariablesByFieldVar
        //instance.getFieldVariablesByFieldVar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFilter', function() {
      it('should call getFilter successfully', function(done) {
        //uncomment below and update the code to test getFilter
        //instance.getFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFilters', function() {
      it('should call getFilters successfully', function(done) {
        //uncomment below and update the code to test getFilters
        //instance.getFilters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFolderContent', function() {
      it('should call getFolderContent successfully', function(done) {
        //uncomment below and update the code to test getFolderContent
        //instance.getFolderContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFromLanguageTag', function() {
      it('should call getFromLanguageTag successfully', function(done) {
        //uncomment below and update the code to test getFromLanguageTag
        //instance.getFromLanguageTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHash', function() {
      it('should call getHash successfully', function(done) {
        //uncomment below and update the code to test getHash
        //instance.getHash(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIncrement', function() {
      it('should call getIncrement successfully', function(done) {
        //uncomment below and update the code to test getIncrement
        //instance.getIncrement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIndexStatus', function() {
      it('should call getIndexStatus successfully', function(done) {
        //uncomment below and update the code to test getIndexStatus
        //instance.getIndexStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstalledBundles', function() {
      it('should call getInstalledBundles successfully', function(done) {
        //uncomment below and update the code to test getInstalledBundles
        //instance.getInstalledBundles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntegrityData', function() {
      it('should call getIntegrityData successfully', function(done) {
        //uncomment below and update the code to test getIntegrityData
        //instance.getIntegrityData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntegrityResult', function() {
      it('should call getIntegrityResult successfully', function(done) {
        //uncomment below and update the code to test getIntegrityResult
        //instance.getIntegrityResult(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getJvmInfo', function() {
      it('should call getJvmInfo successfully', function(done) {
        //uncomment below and update the code to test getJvmInfo
        //instance.getJvmInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getJwtFromApiToken', function() {
      it('should call getJwtFromApiToken successfully', function(done) {
        //uncomment below and update the code to test getJwtFromApiToken
        //instance.getJwtFromApiToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKeys', function() {
      it('should call getKeys successfully', function(done) {
        //uncomment below and update the code to test getKeys
        //instance.getKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLayout', function() {
      it('should call getLayout successfully', function(done) {
        //uncomment below and update the code to test getLayout
        //instance.getLayout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLayout1', function() {
      it('should call getLayout1 successfully', function(done) {
        //uncomment below and update the code to test getLayout1
        //instance.getLayout1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLayout2', function() {
      it('should call getLayout2 successfully', function(done) {
        //uncomment below and update the code to test getLayout2
        //instance.getLayout2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLayout3', function() {
      it('should call getLayout3 successfully', function(done) {
        //uncomment below and update the code to test getLayout3
        //instance.getLayout3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLayout4', function() {
      it('should call getLayout4 successfully', function(done) {
        //uncomment below and update the code to test getLayout4
        //instance.getLayout4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLicenseRepoStatus', function() {
      it('should call getLicenseRepoStatus successfully', function(done) {
        //uncomment below and update the code to test getLicenseRepoStatus
        //instance.getLicenseRepoStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLiveById', function() {
      it('should call getLiveById successfully', function(done) {
        //uncomment below and update the code to test getLiveById
        //instance.getLiveById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLiveById1', function() {
      it('should call getLiveById1 successfully', function(done) {
        //uncomment below and update the code to test getLiveById1
        //instance.getLiveById1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLoggedInUser', function() {
      it('should call getLoggedInUser successfully', function(done) {
        //uncomment below and update the code to test getLoggedInUser
        //instance.getLoggedInUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLoggedInUser1', function() {
      it('should call getLoggedInUser1 successfully', function(done) {
        //uncomment below and update the code to test getLoggedInUser1
        //instance.getLoggedInUser1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLogger', function() {
      it('should call getLogger successfully', function(done) {
        //uncomment below and update the code to test getLogger
        //instance.getLogger(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLoggers', function() {
      it('should call getLoggers successfully', function(done) {
        //uncomment below and update the code to test getLoggers
        //instance.getLoggers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLoginUser', function() {
      it('should call getLoginUser successfully', function(done) {
        //uncomment below and update the code to test getLoginUser
        //instance.getLoginUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMenus', function() {
      it('should call getMenus successfully', function(done) {
        //uncomment below and update the code to test getMenus
        //instance.getMenus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMessages', function() {
      it('should call getMessages successfully', function(done) {
        //uncomment below and update the code to test getMessages
        //instance.getMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMessages1', function() {
      it('should call getMessages1 successfully', function(done) {
        //uncomment below and update the code to test getMessages1
        //instance.getMessages1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNewNotificationsCount', function() {
      it('should call getNewNotificationsCount successfully', function(done) {
        //uncomment below and update the code to test getNewNotificationsCount
        //instance.getNewNotificationsCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNodesInfo', function() {
      it('should call getNodesInfo successfully', function(done) {
        //uncomment below and update the code to test getNodesInfo
        //instance.getNodesInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNotifications', function() {
      it('should call getNotifications successfully', function(done) {
        //uncomment below and update the code to test getNotifications
        //instance.getNotifications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOneSidedRelationships', function() {
      it('should call getOneSidedRelationships successfully', function(done) {
        //uncomment below and update the code to test getOneSidedRelationships
        //instance.getOneSidedRelationships(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPermissionsByPermissionType', function() {
      it('should call getPermissionsByPermissionType successfully', function(done) {
        //uncomment below and update the code to test getPermissionsByPermissionType
        //instance.getPermissionsByPermissionType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReindexationProgress', function() {
      it('should call getReindexationProgress successfully', function(done) {
        //uncomment below and update the code to test getReindexationProgress
        //instance.getReindexationProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRemoteToken', function() {
      it('should call getRemoteToken successfully', function(done) {
        //uncomment below and update the code to test getRemoteToken
        //instance.getRemoteToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSelectFolder', function() {
      it('should call getSelectFolder successfully', function(done) {
        //uncomment below and update the code to test getSelectFolder
        //instance.getSelectFolder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSiteSetupProgress', function() {
      it('should call getSiteSetupProgress successfully', function(done) {
        //uncomment below and update the code to test getSiteSetupProgress
        //instance.getSiteSetupProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSiteVariables', function() {
      it('should call getSiteVariables successfully', function(done) {
        //uncomment below and update the code to test getSiteVariables
        //instance.getSiteVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStructuresWithWYSIWYGFields', function() {
      it('should call getStructuresWithWYSIWYGFields successfully', function(done) {
        //uncomment below and update the code to test getStructuresWithWYSIWYGFields
        //instance.getStructuresWithWYSIWYGFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSuccessCallbackFunction', function() {
      it('should call getSuccessCallbackFunction successfully', function(done) {
        //uncomment below and update the code to test getSuccessCallbackFunction
        //instance.getSuccessCallbackFunction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSyncEvents', function() {
      it('should call getSyncEvents successfully', function(done) {
        //uncomment below and update the code to test getSyncEvents
        //instance.getSyncEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTagsByNameOrId', function() {
      it('should call getTagsByNameOrId successfully', function(done) {
        //uncomment below and update the code to test getTagsByNameOrId
        //instance.getTagsByNameOrId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTagsByUserId', function() {
      it('should call getTagsByUserId successfully', function(done) {
        //uncomment below and update the code to test getTagsByUserId
        //instance.getTagsByUserId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWadl', function() {
      it('should call getWadl successfully', function(done) {
        //uncomment below and update the code to test getWadl
        //instance.getWadl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWidget', function() {
      it('should call getWidget successfully', function(done) {
        //uncomment below and update the code to test getWidget
        //instance.getWidget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkingById', function() {
      it('should call getWorkingById successfully', function(done) {
        //uncomment below and update the code to test getWorkingById
        //instance.getWorkingById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkingById1', function() {
      it('should call getWorkingById1 successfully', function(done) {
        //uncomment below and update the code to test getWorkingById1
        //instance.getWorkingById1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importCategories', function() {
      it('should call importCategories successfully', function(done) {
        //uncomment below and update the code to test importCategories
        //instance.importCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importSecrets', function() {
      it('should call importSecrets successfully', function(done) {
        //uncomment below and update the code to test importSecrets
        //instance.importSecrets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importTags', function() {
      it('should call importTags successfully', function(done) {
        //uncomment below and update the code to test importTags
        //instance.importTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('incrementAsync', function() {
      it('should call incrementAsync successfully', function(done) {
        //uncomment below and update the code to test incrementAsync
        //instance.incrementAsync(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indexList', function() {
      it('should call indexList successfully', function(done) {
        //uncomment below and update the code to test indexList
        //instance.indexList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('isPgDumpAvailable', function() {
      it('should call isPgDumpAvailable successfully', function(done) {
        //uncomment below and update the code to test isPgDumpAvailable
        //instance.isPgDumpAvailable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issueApiToken', function() {
      it('should call issueApiToken successfully', function(done) {
        //uncomment below and update the code to test issueApiToken
        //instance.issueApiToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('layoutGet', function() {
      it('should call layoutGet successfully', function(done) {
        //uncomment below and update the code to test layoutGet
        //instance.layoutGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('layoutPost', function() {
      it('should call layoutPost successfully', function(done) {
        //uncomment below and update the code to test layoutPost
        //instance.layoutPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('linkTagsAndInode', function() {
      it('should call linkTagsAndInode successfully', function(done) {
        //uncomment below and update the code to test linkTagsAndInode
        //instance.linkTagsAndInode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list', function() {
      it('should call list successfully', function(done) {
        //uncomment below and update the code to test list
        //instance.list(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list10', function() {
      it('should call list10 successfully', function(done) {
        //uncomment below and update the code to test list10
        //instance.list10(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list11', function() {
      it('should call list11 successfully', function(done) {
        //uncomment below and update the code to test list11
        //instance.list11(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list12', function() {
      it('should call list12 successfully', function(done) {
        //uncomment below and update the code to test list12
        //instance.list12(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list13', function() {
      it('should call list13 successfully', function(done) {
        //uncomment below and update the code to test list13
        //instance.list13(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list14', function() {
      it('should call list14 successfully', function(done) {
        //uncomment below and update the code to test list14
        //instance.list14(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list2', function() {
      it('should call list2 successfully', function(done) {
        //uncomment below and update the code to test list2
        //instance.list2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list3', function() {
      it('should call list3 successfully', function(done) {
        //uncomment below and update the code to test list3
        //instance.list3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list4', function() {
      it('should call list4 successfully', function(done) {
        //uncomment below and update the code to test list4
        //instance.list4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list5', function() {
      it('should call list5 successfully', function(done) {
        //uncomment below and update the code to test list5
        //instance.list5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list6', function() {
      it('should call list6 successfully', function(done) {
        //uncomment below and update the code to test list6
        //instance.list6(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list7', function() {
      it('should call list7 successfully', function(done) {
        //uncomment below and update the code to test list7
        //instance.list7(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list8', function() {
      it('should call list8 successfully', function(done) {
        //uncomment below and update the code to test list8
        //instance.list8(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list9', function() {
      it('should call list9 successfully', function(done) {
        //uncomment below and update the code to test list9
        //instance.list9(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAvailableApps', function() {
      it('should call listAvailableApps successfully', function(done) {
        //uncomment below and update the code to test listAvailableApps
        //instance.listAvailableApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadAssetsUnder', function() {
      it('should call loadAssetsUnder successfully', function(done) {
        //uncomment below and update the code to test loadAssetsUnder
        //instance.loadAssetsUnder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadAssetsUnder1', function() {
      it('should call loadAssetsUnder1 successfully', function(done) {
        //uncomment below and update the code to test loadAssetsUnder1
        //instance.loadAssetsUnder1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadById', function() {
      it('should call loadById successfully', function(done) {
        //uncomment below and update the code to test loadById
        //instance.loadById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadByName', function() {
      it('should call loadByName successfully', function(done) {
        //uncomment below and update the code to test loadByName
        //instance.loadByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadChildren', function() {
      it('should call loadChildren successfully', function(done) {
        //uncomment below and update the code to test loadChildren
        //instance.loadChildren(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadEnvironments', function() {
      it('should call loadEnvironments successfully', function(done) {
        //uncomment below and update the code to test loadEnvironments
        //instance.loadEnvironments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadFolderAndSubFoldersByPath', function() {
      it('should call loadFolderAndSubFoldersByPath successfully', function(done) {
        //uncomment below and update the code to test loadFolderAndSubFoldersByPath
        //instance.loadFolderAndSubFoldersByPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadFolderByURI', function() {
      it('should call loadFolderByURI successfully', function(done) {
        //uncomment below and update the code to test loadFolderByURI
        //instance.loadFolderByURI(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadJson', function() {
      it('should call loadJson successfully', function(done) {
        //uncomment below and update the code to test loadJson
        //instance.loadJson(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadRoleByRoleId', function() {
      it('should call loadRoleByRoleId successfully', function(done) {
        //uncomment below and update the code to test loadRoleByRoleId
        //instance.loadRoleByRoleId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadRootRoles', function() {
      it('should call loadRootRoles successfully', function(done) {
        //uncomment below and update the code to test loadRootRoles
        //instance.loadRootRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadUsersAndRolesByRoleId', function() {
      it('should call loadUsersAndRolesByRoleId successfully', function(done) {
        //uncomment below and update the code to test loadUsersAndRolesByRoleId
        //instance.loadUsersAndRolesByRoleId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loginAs', function() {
      it('should call loginAs successfully', function(done) {
        //uncomment below and update the code to test loginAs
        //instance.loginAs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loginAsData', function() {
      it('should call loginAsData successfully', function(done) {
        //uncomment below and update the code to test loginAsData
        //instance.loginAsData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loginForm', function() {
      it('should call loginForm successfully', function(done) {
        //uncomment below and update the code to test loginForm
        //instance.loginForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logout', function() {
      it('should call logout successfully', function(done) {
        //uncomment below and update the code to test logout
        //instance.logout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logoutAs', function() {
      it('should call logoutAs successfully', function(done) {
        //uncomment below and update the code to test logoutAs
        //instance.logoutAs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logoutGet', function() {
      it('should call logoutGet successfully', function(done) {
        //uncomment below and update the code to test logoutGet
        //instance.logoutGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logoutPost', function() {
      it('should call logoutPost successfully', function(done) {
        //uncomment below and update the code to test logoutPost
        //instance.logoutPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('makeDefault', function() {
      it('should call makeDefault successfully', function(done) {
        //uncomment below and update the code to test makeDefault
        //instance.makeDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('makeDefault1', function() {
      it('should call makeDefault1 successfully', function(done) {
        //uncomment below and update the code to test makeDefault1
        //instance.makeDefault1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('markAsRead', function() {
      it('should call markAsRead successfully', function(done) {
        //uncomment below and update the code to test markAsRead
        //instance.markAsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metadata', function() {
      it('should call metadata successfully', function(done) {
        //uncomment below and update the code to test metadata
        //instance.metadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modIndex', function() {
      it('should call modIndex successfully', function(done) {
        //uncomment below and update the code to test modIndex
        //instance.modIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('moveFields', function() {
      it('should call moveFields successfully', function(done) {
        //uncomment below and update the code to test moveFields
        //instance.moveFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('openIndex', function() {
      it('should call openIndex successfully', function(done) {
        //uncomment below and update the code to test openIndex
        //instance.openIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('optimizeIndices', function() {
      it('should call optimizeIndices successfully', function(done) {
        //uncomment below and update the code to test optimizeIndices
        //instance.optimizeIndices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchMultipart', function() {
      it('should call patchMultipart successfully', function(done) {
        //uncomment below and update the code to test patchMultipart
        //instance.patchMultipart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchMultipart1', function() {
      it('should call patchMultipart1 successfully', function(done) {
        //uncomment below and update the code to test patchMultipart1
        //instance.patchMultipart1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('personalizePageContainers', function() {
      it('should call personalizePageContainers successfully', function(done) {
        //uncomment below and update the code to test personalizePageContainers
        //instance.personalizePageContainers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('personalizePageContainers1', function() {
      it('should call personalizePageContainers1 successfully', function(done) {
        //uncomment below and update the code to test personalizePageContainers1
        //instance.personalizePageContainers1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pickLicense', function() {
      it('should call pickLicense successfully', function(done) {
        //uncomment below and update the code to test pickLicense
        //instance.pickLicense(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ping', function() {
      it('should call ping successfully', function(done) {
        //uncomment below and update the code to test ping
        //instance.ping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postMultipart', function() {
      it('should call postMultipart successfully', function(done) {
        //uncomment below and update the code to test postMultipart
        //instance.postMultipart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postMultipart1', function() {
      it('should call postMultipart1 successfully', function(done) {
        //uncomment below and update the code to test postMultipart1
        //instance.postMultipart1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('processBundle', function() {
      it('should call processBundle successfully', function(done) {
        //uncomment below and update the code to test processBundle
        //instance.processBundle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('processLogin', function() {
      it('should call processLogin successfully', function(done) {
        //uncomment below and update the code to test processLogin
        //instance.processLogin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('publish', function() {
      it('should call publish successfully', function(done) {
        //uncomment below and update the code to test publish
        //instance.publish(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('publish1', function() {
      it('should call publish1 successfully', function(done) {
        //uncomment below and update the code to test publish1
        //instance.publish1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('publish2', function() {
      it('should call publish2 successfully', function(done) {
        //uncomment below and update the code to test publish2
        //instance.publish2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('publishSite', function() {
      it('should call publishSite successfully', function(done) {
        //uncomment below and update the code to test publishSite
        //instance.publishSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pullRelated', function() {
      it('should call pullRelated successfully', function(done) {
        //uncomment below and update the code to test pullRelated
        //instance.pullRelated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putMultipart', function() {
      it('should call putMultipart successfully', function(done) {
        //uncomment below and update the code to test putMultipart
        //instance.putMultipart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putMultipart1', function() {
      it('should call putMultipart1 successfully', function(done) {
        //uncomment below and update the code to test putMultipart1
        //instance.putMultipart1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putZipFile', function() {
      it('should call putZipFile successfully', function(done) {
        //uncomment below and update the code to test putZipFile
        //instance.putZipFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('regenerateKey', function() {
      it('should call regenerateKey successfully', function(done) {
        //uncomment below and update the code to test regenerateKey
        //instance.regenerateKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('remove', function() {
      it('should call remove successfully', function(done) {
        //uncomment below and update the code to test remove
        //instance.remove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('remove1', function() {
      it('should call remove1 successfully', function(done) {
        //uncomment below and update the code to test remove1
        //instance.remove1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('remove2', function() {
      it('should call remove2 successfully', function(done) {
        //uncomment below and update the code to test remove2
        //instance.remove2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('remove3', function() {
      it('should call remove3 successfully', function(done) {
        //uncomment below and update the code to test remove3
        //instance.remove3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('remove4', function() {
      it('should call remove4 successfully', function(done) {
        //uncomment below and update the code to test remove4
        //instance.remove4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeContentletFromContainer', function() {
      it('should call removeContentletFromContainer successfully', function(done) {
        //uncomment below and update the code to test removeContentletFromContainer
        //instance.removeContentletFromContainer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeFromCluster', function() {
      it('should call removeFromCluster successfully', function(done) {
        //uncomment below and update the code to test removeFromCluster
        //instance.removeFromCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestLicense', function() {
      it('should call requestLicense successfully', function(done) {
        //uncomment below and update the code to test requestLicense
        //instance.requestLicense(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetLicense', function() {
      it('should call resetLicense successfully', function(done) {
        //uncomment below and update the code to test resetLicense
        //instance.resetLicense(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetPassword', function() {
      it('should call resetPassword successfully', function(done) {
        //uncomment below and update the code to test resetPassword
        //instance.resetPassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeApiToken', function() {
      it('should call revokeApiToken successfully', function(done) {
        //uncomment below and update the code to test revokeApiToken
        //instance.revokeApiToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeUserToken', function() {
      it('should call revokeUserToken successfully', function(done) {
        //uncomment below and update the code to test revokeUserToken
        //instance.revokeUserToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeUsersToken', function() {
      it('should call revokeUsersToken successfully', function(done) {
        //uncomment below and update the code to test revokeUsersToken
        //instance.revokeUsersToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('save', function() {
      it('should call save successfully', function(done) {
        //uncomment below and update the code to test save
        //instance.save(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('save1', function() {
      it('should call save1 successfully', function(done) {
        //uncomment below and update the code to test save1
        //instance.save1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('save2', function() {
      it('should call save2 successfully', function(done) {
        //uncomment below and update the code to test save2
        //instance.save2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveAndPublish', function() {
      it('should call saveAndPublish successfully', function(done) {
        //uncomment below and update the code to test saveAndPublish
        //instance.saveAndPublish(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveCompanyAuthTypeInfo', function() {
      it('should call saveCompanyAuthTypeInfo successfully', function(done) {
        //uncomment below and update the code to test saveCompanyAuthTypeInfo
        //instance.saveCompanyAuthTypeInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveCompanyBasicInfo', function() {
      it('should call saveCompanyBasicInfo successfully', function(done) {
        //uncomment below and update the code to test saveCompanyBasicInfo
        //instance.saveCompanyBasicInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveCompanyLocaleInfo', function() {
      it('should call saveCompanyLocaleInfo successfully', function(done) {
        //uncomment below and update the code to test saveCompanyLocaleInfo
        //instance.saveCompanyLocaleInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveCompanyLogo', function() {
      it('should call saveCompanyLogo successfully', function(done) {
        //uncomment below and update the code to test saveCompanyLogo
        //instance.saveCompanyLogo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveDraft', function() {
      it('should call saveDraft successfully', function(done) {
        //uncomment below and update the code to test saveDraft
        //instance.saveDraft(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveFromForm', function() {
      it('should call saveFromForm successfully', function(done) {
        //uncomment below and update the code to test saveFromForm
        //instance.saveFromForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveFromLanguageTag', function() {
      it('should call saveFromLanguageTag successfully', function(done) {
        //uncomment below and update the code to test saveFromLanguageTag
        //instance.saveFromLanguageTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveLanguage', function() {
      it('should call saveLanguage successfully', function(done) {
        //uncomment below and update the code to test saveLanguage
        //instance.saveLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveNew', function() {
      it('should call saveNew successfully', function(done) {
        //uncomment below and update the code to test saveNew
        //instance.saveNew(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveNew1', function() {
      it('should call saveNew1 successfully', function(done) {
        //uncomment below and update the code to test saveNew1
        //instance.saveNew1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveNew2', function() {
      it('should call saveNew2 successfully', function(done) {
        //uncomment below and update the code to test saveNew2
        //instance.saveNew2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveRoleLayouts', function() {
      it('should call saveRoleLayouts successfully', function(done) {
        //uncomment below and update the code to test saveRoleLayouts
        //instance.saveRoleLayouts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveSiteVariable', function() {
      it('should call saveSiteVariable successfully', function(done) {
        //uncomment below and update the code to test saveSiteVariable
        //instance.saveSiteVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveTest', function() {
      it('should call saveTest successfully', function(done) {
        //uncomment below and update the code to test saveTest
        //instance.saveTest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('search1', function() {
      it('should call search1 successfully', function(done) {
        //uncomment below and update the code to test search1
        //instance.search1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchPost', function() {
      it('should call searchPost successfully', function(done) {
        //uncomment below and update the code to test searchPost
        //instance.searchPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchRaw', function() {
      it('should call searchRaw successfully', function(done) {
        //uncomment below and update the code to test searchRaw
        //instance.searchRaw(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchRawGet', function() {
      it('should call searchRawGet successfully', function(done) {
        //uncomment below and update the code to test searchRawGet
        //instance.searchRawGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchRoles', function() {
      it('should call searchRoles successfully', function(done) {
        //uncomment below and update the code to test searchRoles
        //instance.searchRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('selectFolder', function() {
      it('should call selectFolder successfully', function(done) {
        //uncomment below and update the code to test selectFolder
        //instance.selectFolder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('selectFolder1', function() {
      it('should call selectFolder1 successfully', function(done) {
        //uncomment below and update the code to test selectFolder1
        //instance.selectFolder1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('self', function() {
      it('should call self successfully', function(done) {
        //uncomment below and update the code to test self
        //instance.self(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('self1', function() {
      it('should call self1 successfully', function(done) {
        //uncomment below and update the code to test self1
        //instance.self1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('self2', function() {
      it('should call self2 successfully', function(done) {
        //uncomment below and update the code to test self2
        //instance.self2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('self3', function() {
      it('should call self3 successfully', function(done) {
        //uncomment below and update the code to test self3
        //instance.self3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('self4', function() {
      it('should call self4 successfully', function(done) {
        //uncomment below and update the code to test self4
        //instance.self4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('self5', function() {
      it('should call self5 successfully', function(done) {
        //uncomment below and update the code to test self5
        //instance.self5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('self6', function() {
      it('should call self6 successfully', function(done) {
        //uncomment below and update the code to test self6
        //instance.self6(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('set', function() {
      it('should call set successfully', function(done) {
        //uncomment below and update the code to test set
        //instance.set(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('set1', function() {
      it('should call set1 successfully', function(done) {
        //uncomment below and update the code to test set1
        //instance.set1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setHash', function() {
      it('should call setHash successfully', function(done) {
        //uncomment below and update the code to test setHash
        //instance.setHash(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showObject', function() {
      it('should call showObject successfully', function(done) {
        //uncomment below and update the code to test showObject
        //instance.showObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showObjects', function() {
      it('should call showObjects successfully', function(done) {
        //uncomment below and update the code to test showObjects
        //instance.showObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showProviders', function() {
      it('should call showProviders successfully', function(done) {
        //uncomment below and update the code to test showProviders
        //instance.showProviders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showProviders1', function() {
      it('should call showProviders1 successfully', function(done) {
        //uncomment below and update the code to test showProviders1
        //instance.showProviders1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('shutdown', function() {
      it('should call shutdown successfully', function(done) {
        //uncomment below and update the code to test shutdown
        //instance.shutdown(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sites', function() {
      it('should call sites successfully', function(done) {
        //uncomment below and update the code to test sites
        //instance.sites(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startReindex', function() {
      it('should call startReindex successfully', function(done) {
        //uncomment below and update the code to test startReindex
        //instance.startReindex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('statusCheck', function() {
      it('should call statusCheck successfully', function(done) {
        //uncomment below and update the code to test statusCheck
        //instance.statusCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopReindexation', function() {
      it('should call stopReindexation successfully', function(done) {
        //uncomment below and update the code to test stopReindexation
        //instance.stopReindexation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('switchSite', function() {
      it('should call switchSite successfully', function(done) {
        //uncomment below and update the code to test switchSite
        //instance.switchSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('switchSite1', function() {
      it('should call switchSite1 successfully', function(done) {
        //uncomment below and update the code to test switchSite1
        //instance.switchSite1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('testCluster', function() {
      it('should call testCluster successfully', function(done) {
        //uncomment below and update the code to test testCluster
        //instance.testCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unarchive', function() {
      it('should call unarchive successfully', function(done) {
        //uncomment below and update the code to test unarchive
        //instance.unarchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unarchive1', function() {
      it('should call unarchive1 successfully', function(done) {
        //uncomment below and update the code to test unarchive1
        //instance.unarchive1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unarchiveSite', function() {
      it('should call unarchiveSite successfully', function(done) {
        //uncomment below and update the code to test unarchiveSite
        //instance.unarchiveSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unpublish', function() {
      it('should call unpublish successfully', function(done) {
        //uncomment below and update the code to test unpublish
        //instance.unpublish(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unpublish1', function() {
      it('should call unpublish1 successfully', function(done) {
        //uncomment below and update the code to test unpublish1
        //instance.unpublish1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unpublishSite', function() {
      it('should call unpublishSite successfully', function(done) {
        //uncomment below and update the code to test unpublishSite
        //instance.unpublishSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('update', function() {
      it('should call update successfully', function(done) {
        //uncomment below and update the code to test update
        //instance.update(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('update2', function() {
      it('should call update2 successfully', function(done) {
        //uncomment below and update the code to test update2
        //instance.update2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('update3', function() {
      it('should call update3 successfully', function(done) {
        //uncomment below and update the code to test update3
        //instance.update3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('update4', function() {
      it('should call update4 successfully', function(done) {
        //uncomment below and update the code to test update4
        //instance.update4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('update5', function() {
      it('should call update5 successfully', function(done) {
        //uncomment below and update the code to test update5
        //instance.update5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('update6', function() {
      it('should call update6 successfully', function(done) {
        //uncomment below and update the code to test update6
        //instance.update6(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('update7', function() {
      it('should call update7 successfully', function(done) {
        //uncomment below and update the code to test update7
        //instance.update7(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAppIndividualSecret', function() {
      it('should call updateAppIndividualSecret successfully', function(done) {
        //uncomment below and update the code to test updateAppIndividualSecret
        //instance.updateAppIndividualSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBundles', function() {
      it('should call updateBundles successfully', function(done) {
        //uncomment below and update the code to test updateBundles
        //instance.updateBundles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContentTypeFieldById', function() {
      it('should call updateContentTypeFieldById successfully', function(done) {
        //uncomment below and update the code to test updateContentTypeFieldById
        //instance.updateContentTypeFieldById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContentTypeFieldById1', function() {
      it('should call updateContentTypeFieldById1 successfully', function(done) {
        //uncomment below and update the code to test updateContentTypeFieldById1
        //instance.updateContentTypeFieldById1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContentTypeFieldByVar', function() {
      it('should call updateContentTypeFieldByVar successfully', function(done) {
        //uncomment below and update the code to test updateContentTypeFieldByVar
        //instance.updateContentTypeFieldByVar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContentTypeFieldByVar1', function() {
      it('should call updateContentTypeFieldByVar1 successfully', function(done) {
        //uncomment below and update the code to test updateContentTypeFieldByVar1
        //instance.updateContentTypeFieldByVar1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateField', function() {
      it('should call updateField successfully', function(done) {
        //uncomment below and update the code to test updateField
        //instance.updateField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFieldVariableByFieldId', function() {
      it('should call updateFieldVariableByFieldId successfully', function(done) {
        //uncomment below and update the code to test updateFieldVariableByFieldId
        //instance.updateFieldVariableByFieldId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFieldVariableByFieldVar', function() {
      it('should call updateFieldVariableByFieldVar successfully', function(done) {
        //uncomment below and update the code to test updateFieldVariableByFieldVar
        //instance.updateFieldVariableByFieldVar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFields', function() {
      it('should call updateFields successfully', function(done) {
        //uncomment below and update the code to test updateFields
        //instance.updateFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFields1', function() {
      it('should call updateFields1 successfully', function(done) {
        //uncomment below and update the code to test updateFields1
        //instance.updateFields1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFromForm', function() {
      it('should call updateFromForm successfully', function(done) {
        //uncomment below and update the code to test updateFromForm
        //instance.updateFromForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLanguage', function() {
      it('should call updateLanguage successfully', function(done) {
        //uncomment below and update the code to test updateLanguage
        //instance.updateLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSite', function() {
      it('should call updateSite successfully', function(done) {
        //uncomment below and update the code to test updateSite
        //instance.updateSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTag', function() {
      it('should call updateTag successfully', function(done) {
        //uncomment below and update the code to test updateTag
        //instance.updateTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('upgrade', function() {
      it('should call upgrade successfully', function(done) {
        //uncomment below and update the code to test upgrade
        //instance.upgrade(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadTempResourceMulti', function() {
      it('should call uploadTempResourceMulti successfully', function(done) {
        //uncomment below and update the code to test uploadTempResourceMulti
        //instance.uploadTempResourceMulti(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userHasLayout', function() {
      it('should call userHasLayout successfully', function(done) {
        //uncomment below and update the code to test userHasLayout
        //instance.userHasLayout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateEmail', function() {
      it('should call validateEmail successfully', function(done) {
        //uncomment below and update the code to test validateEmail
        //instance.validateEmail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
