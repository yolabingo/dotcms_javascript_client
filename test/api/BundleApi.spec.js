/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DotCmsRestApi);
  }
}(this, function(expect, DotCmsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DotCmsRestApi.BundleApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BundleApi', function() {
    describe('deleteAll', function() {
      it('should call deleteAll successfully', function(done) {
        //uncomment below and update the code to test deleteAll
        //instance.deleteAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAllFail', function() {
      it('should call deleteAllFail successfully', function(done) {
        //uncomment below and update the code to test deleteAllFail
        //instance.deleteAllFail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAllSuccess', function() {
      it('should call deleteAllSuccess successfully', function(done) {
        //uncomment below and update the code to test deleteAllSuccess
        //instance.deleteAllSuccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBundlesByIdentifiers', function() {
      it('should call deleteBundlesByIdentifiers successfully', function(done) {
        //uncomment below and update the code to test deleteBundlesByIdentifiers
        //instance.deleteBundlesByIdentifiers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBundlesOlderThan', function() {
      it('should call deleteBundlesOlderThan successfully', function(done) {
        //uncomment below and update the code to test deleteBundlesOlderThan
        //instance.deleteBundlesOlderThan(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEnvironmentPushHistory', function() {
      it('should call deleteEnvironmentPushHistory successfully', function(done) {
        //uncomment below and update the code to test deleteEnvironmentPushHistory
        //instance.deleteEnvironmentPushHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePushHistory', function() {
      it('should call deletePushHistory successfully', function(done) {
        //uncomment below and update the code to test deletePushHistory
        //instance.deletePushHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadBundle', function() {
      it('should call downloadBundle successfully', function(done) {
        //uncomment below and update the code to test downloadBundle
        //instance.downloadBundle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadManifest', function() {
      it('should call downloadManifest successfully', function(done) {
        //uncomment below and update the code to test downloadManifest
        //instance.downloadManifest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateBundle', function() {
      it('should call generateBundle successfully', function(done) {
        //uncomment below and update the code to test generateBundle
        //instance.generateBundle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPublishQueueElements', function() {
      it('should call getPublishQueueElements successfully', function(done) {
        //uncomment below and update the code to test getPublishQueueElements
        //instance.getPublishQueueElements(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUnsendBundles', function() {
      it('should call getUnsendBundles successfully', function(done) {
        //uncomment below and update the code to test getUnsendBundles
        //instance.getUnsendBundles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBundle', function() {
      it('should call updateBundle successfully', function(done) {
        //uncomment below and update the code to test updateBundle
        //instance.updateBundle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadBundleAsync', function() {
      it('should call uploadBundleAsync successfully', function(done) {
        //uncomment below and update the code to test uploadBundleAsync
        //instance.uploadBundleAsync(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadBundleSync', function() {
      it('should call uploadBundleSync successfully', function(done) {
        //uncomment below and update the code to test uploadBundleSync
        //instance.uploadBundleSync(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
