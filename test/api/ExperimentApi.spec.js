/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DotCmsRestApi);
  }
}(this, function(expect, DotCmsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DotCmsRestApi.ExperimentApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ExperimentApi', function() {
    describe('addVariant', function() {
      it('should call addVariant successfully', function(done) {
        //uncomment below and update the code to test addVariant
        //instance.addVariant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('archive1', function() {
      it('should call archive1 successfully', function(done) {
        //uncomment below and update the code to test archive1
        //instance.archive1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('create', function() {
      it('should call create successfully', function(done) {
        //uncomment below and update the code to test create
        //instance.create(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete4', function() {
      it('should call delete4 successfully', function(done) {
        //uncomment below and update the code to test delete4
        //instance.delete4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteGoal', function() {
      it('should call deleteGoal successfully', function(done) {
        //uncomment below and update the code to test deleteGoal
        //instance.deleteGoal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTargetingCondition', function() {
      it('should call deleteTargetingCondition successfully', function(done) {
        //uncomment below and update the code to test deleteTargetingCondition
        //instance.deleteTargetingCondition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVariant', function() {
      it('should call deleteVariant successfully', function(done) {
        //uncomment below and update the code to test deleteVariant
        //instance.deleteVariant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('end', function() {
      it('should call end successfully', function(done) {
        //uncomment below and update the code to test end
        //instance.end(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('get1', function() {
      it('should call get1 successfully', function(done) {
        //uncomment below and update the code to test get1
        //instance.get1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('isUserIncluded', function() {
      it('should call isUserIncluded successfully', function(done) {
        //uncomment below and update the code to test isUserIncluded
        //instance.isUserIncluded(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list1', function() {
      it('should call list1 successfully', function(done) {
        //uncomment below and update the code to test list1
        //instance.list1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('start', function() {
      it('should call start successfully', function(done) {
        //uncomment below and update the code to test start
        //instance.start(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('update1', function() {
      it('should call update1 successfully', function(done) {
        //uncomment below and update the code to test update1
        //instance.update1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVariant', function() {
      it('should call updateVariant successfully', function(done) {
        //uncomment below and update the code to test updateVariant
        //instance.updateVariant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
