/**
 * dotCMS REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DotCmsRestApi);
  }
}(this, function(expect, DotCmsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DotCmsRestApi.WorkflowApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WorkflowApi', function() {
    describe('addStep', function() {
      it('should call addStep successfully', function(done) {
        //uncomment below and update the code to test addStep
        //instance.addStep(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('copyScheme', function() {
      it('should call copyScheme successfully', function(done) {
        //uncomment below and update the code to test copyScheme
        //instance.copyScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAction', function() {
      it('should call deleteAction successfully', function(done) {
        //uncomment below and update the code to test deleteAction
        //instance.deleteAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAction1', function() {
      it('should call deleteAction1 successfully', function(done) {
        //uncomment below and update the code to test deleteAction1
        //instance.deleteAction1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteActionlet', function() {
      it('should call deleteActionlet successfully', function(done) {
        //uncomment below and update the code to test deleteActionlet
        //instance.deleteActionlet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteScheme', function() {
      it('should call deleteScheme successfully', function(done) {
        //uncomment below and update the code to test deleteScheme
        //instance.deleteScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStep', function() {
      it('should call deleteStep successfully', function(done) {
        //uncomment below and update the code to test deleteStep
        //instance.deleteStep(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletesSystemAction', function() {
      it('should call deletesSystemAction successfully', function(done) {
        //uncomment below and update the code to test deletesSystemAction
        //instance.deletesSystemAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('evaluateActionCondition', function() {
      it('should call evaluateActionCondition successfully', function(done) {
        //uncomment below and update the code to test evaluateActionCondition
        //instance.evaluateActionCondition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportScheme', function() {
      it('should call exportScheme successfully', function(done) {
        //uncomment below and update the code to test exportScheme
        //instance.exportScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findAction', function() {
      it('should call findAction successfully', function(done) {
        //uncomment below and update the code to test findAction
        //instance.findAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findActionByStep', function() {
      it('should call findActionByStep successfully', function(done) {
        //uncomment below and update the code to test findActionByStep
        //instance.findActionByStep(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findActionlets', function() {
      it('should call findActionlets successfully', function(done) {
        //uncomment below and update the code to test findActionlets
        //instance.findActionlets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findActionletsByAction', function() {
      it('should call findActionletsByAction successfully', function(done) {
        //uncomment below and update the code to test findActionletsByAction
        //instance.findActionletsByAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findActionsByScheme', function() {
      it('should call findActionsByScheme successfully', function(done) {
        //uncomment below and update the code to test findActionsByScheme
        //instance.findActionsByScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findActionsBySchemesAndSystemAction', function() {
      it('should call findActionsBySchemesAndSystemAction successfully', function(done) {
        //uncomment below and update the code to test findActionsBySchemesAndSystemAction
        //instance.findActionsBySchemesAndSystemAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findActionsByStep', function() {
      it('should call findActionsByStep successfully', function(done) {
        //uncomment below and update the code to test findActionsByStep
        //instance.findActionsByStep(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findAllSchemesAndSchemesByContentType', function() {
      it('should call findAllSchemesAndSchemesByContentType successfully', function(done) {
        //uncomment below and update the code to test findAllSchemesAndSchemesByContentType
        //instance.findAllSchemesAndSchemesByContentType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findAvailableActions', function() {
      it('should call findAvailableActions successfully', function(done) {
        //uncomment below and update the code to test findAvailableActions
        //instance.findAvailableActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findAvailableDefaultActionsByContentType', function() {
      it('should call findAvailableDefaultActionsByContentType successfully', function(done) {
        //uncomment below and update the code to test findAvailableDefaultActionsByContentType
        //instance.findAvailableDefaultActionsByContentType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findAvailableDefaultActionsBySchemes', function() {
      it('should call findAvailableDefaultActionsBySchemes successfully', function(done) {
        //uncomment below and update the code to test findAvailableDefaultActionsBySchemes
        //instance.findAvailableDefaultActionsBySchemes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findInitialAvailableActionsByContentType', function() {
      it('should call findInitialAvailableActionsByContentType successfully', function(done) {
        //uncomment below and update the code to test findInitialAvailableActionsByContentType
        //instance.findInitialAvailableActionsByContentType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findSchemes', function() {
      it('should call findSchemes successfully', function(done) {
        //uncomment below and update the code to test findSchemes
        //instance.findSchemes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findStepById', function() {
      it('should call findStepById successfully', function(done) {
        //uncomment below and update the code to test findStepById
        //instance.findStepById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findStepsByScheme', function() {
      it('should call findStepsByScheme successfully', function(done) {
        //uncomment below and update the code to test findStepsByScheme
        //instance.findStepsByScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findSystemActionsByContentType', function() {
      it('should call findSystemActionsByContentType successfully', function(done) {
        //uncomment below and update the code to test findSystemActionsByContentType
        //instance.findSystemActionsByContentType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findSystemActionsByScheme', function() {
      it('should call findSystemActionsByScheme successfully', function(done) {
        //uncomment below and update the code to test findSystemActionsByScheme
        //instance.findSystemActionsByScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fireActionByNameSinglePart', function() {
      it('should call fireActionByNameSinglePart successfully', function(done) {
        //uncomment below and update the code to test fireActionByNameSinglePart
        //instance.fireActionByNameSinglePart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fireActionDefaultMultipartNewPath', function() {
      it('should call fireActionDefaultMultipartNewPath successfully', function(done) {
        //uncomment below and update the code to test fireActionDefaultMultipartNewPath
        //instance.fireActionDefaultMultipartNewPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fireActionDefaultSinglePart', function() {
      it('should call fireActionDefaultSinglePart successfully', function(done) {
        //uncomment below and update the code to test fireActionDefaultSinglePart
        //instance.fireActionDefaultSinglePart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fireActionMultipartNewPath', function() {
      it('should call fireActionMultipartNewPath successfully', function(done) {
        //uncomment below and update the code to test fireActionMultipartNewPath
        //instance.fireActionMultipartNewPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fireActionSinglePart', function() {
      it('should call fireActionSinglePart successfully', function(done) {
        //uncomment below and update the code to test fireActionSinglePart
        //instance.fireActionSinglePart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fireBulkActions', function() {
      it('should call fireBulkActions successfully', function(done) {
        //uncomment below and update the code to test fireBulkActions
        //instance.fireBulkActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fireBulkActions1', function() {
      it('should call fireBulkActions1 successfully', function(done) {
        //uncomment below and update the code to test fireBulkActions1
        //instance.fireBulkActions1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fireMergeActionDefault', function() {
      it('should call fireMergeActionDefault successfully', function(done) {
        //uncomment below and update the code to test fireMergeActionDefault
        //instance.fireMergeActionDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fireMultipleActionDefault', function() {
      it('should call fireMultipleActionDefault successfully', function(done) {
        //uncomment below and update the code to test fireMultipleActionDefault
        //instance.fireMultipleActionDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBulkActions', function() {
      it('should call getBulkActions successfully', function(done) {
        //uncomment below and update the code to test getBulkActions
        //instance.getBulkActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSystemActionsReferredByWorkflowAction', function() {
      it('should call getSystemActionsReferredByWorkflowAction successfully', function(done) {
        //uncomment below and update the code to test getSystemActionsReferredByWorkflowAction
        //instance.getSystemActionsReferredByWorkflowAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importScheme', function() {
      it('should call importScheme successfully', function(done) {
        //uncomment below and update the code to test importScheme
        //instance.importScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reorderAction', function() {
      it('should call reorderAction successfully', function(done) {
        //uncomment below and update the code to test reorderAction
        //instance.reorderAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reorderStep', function() {
      it('should call reorderStep successfully', function(done) {
        //uncomment below and update the code to test reorderStep
        //instance.reorderStep(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveAction', function() {
      it('should call saveAction successfully', function(done) {
        //uncomment below and update the code to test saveAction
        //instance.saveAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveActionToStep', function() {
      it('should call saveActionToStep successfully', function(done) {
        //uncomment below and update the code to test saveActionToStep
        //instance.saveActionToStep(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveActionletToAction', function() {
      it('should call saveActionletToAction successfully', function(done) {
        //uncomment below and update the code to test saveActionletToAction
        //instance.saveActionletToAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveScheme', function() {
      it('should call saveScheme successfully', function(done) {
        //uncomment below and update the code to test saveScheme
        //instance.saveScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveSystemAction', function() {
      it('should call saveSystemAction successfully', function(done) {
        //uncomment below and update the code to test saveSystemAction
        //instance.saveSystemAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAction', function() {
      it('should call updateAction successfully', function(done) {
        //uncomment below and update the code to test updateAction
        //instance.updateAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateScheme', function() {
      it('should call updateScheme successfully', function(done) {
        //uncomment below and update the code to test updateScheme
        //instance.updateScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStep', function() {
      it('should call updateStep successfully', function(done) {
        //uncomment below and update the code to test updateStep
        //instance.updateStep(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
